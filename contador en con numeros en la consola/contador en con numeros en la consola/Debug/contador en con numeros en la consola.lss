
contador en con numeros en la consola.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  000001b0  00000224  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001b0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000022e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000260  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000002a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000079a  00000000  00000000  000002d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006f5  00000000  00000000  00000a6a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000033d  00000000  00000000  0000115f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  0000149c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000401  00000000  00000000  000014f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000e8  00000000  00000000  000018f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  000019d9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 eb       	ldi	r30, 0xB0	; 176
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 30       	cpi	r26, 0x0A	; 10
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e0       	ldi	r26, 0x0A	; 10
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	aa 30       	cpi	r26, 0x0A	; 10
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 a9 00 	call	0x152	; 0x152 <main>
  9e:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <GPIO_init>:
// Define el valor máximo para el contador (8 bits)
#define MAX_VALUE 255

void GPIO_init(void) {
	// Configura PC4 y PC5 como salidas
	DDRC |= (1 << DDC4) | (1 << DDC5);
  a6:	87 b1       	in	r24, 0x07	; 7
  a8:	80 63       	ori	r24, 0x30	; 48
  aa:	87 b9       	out	0x07, r24	; 7

	// Configura PD2 a PD7 como salidas
	DDRD |= (1 << DDD2) | (1 << DDD3) | (1 << DDD4) | (1 << DDD5) | (1 << DDD6) | (1 << DDD7);
  ac:	8a b1       	in	r24, 0x0a	; 10
  ae:	8c 6f       	ori	r24, 0xFC	; 252
  b0:	8a b9       	out	0x0a, r24	; 10

	// Inicializa los LEDs apagados
	PORTC &= ~((1 << PORTC4) | (1 << PORTC5));
  b2:	88 b1       	in	r24, 0x08	; 8
  b4:	8f 7c       	andi	r24, 0xCF	; 207
  b6:	88 b9       	out	0x08, r24	; 8
	PORTD &= ~((1 << PORTD2) | (1 << PORTD3) | (1 << PORTD4) | (1 << PORTD5) | (1 << PORTD6) | (1 << PORTD7));
  b8:	8b b1       	in	r24, 0x0b	; 11
  ba:	83 70       	andi	r24, 0x03	; 3
  bc:	8b b9       	out	0x0b, r24	; 11
  be:	08 95       	ret

000000c0 <refreshPort>:
}

void refreshPort(uint8_t value) {
	// Actualiza cada bit en PORTD y PORTC según el valor recibido
	if (value & 0b00000001) {  // Bit 0
  c0:	80 ff       	sbrs	r24, 0
  c2:	04 c0       	rjmp	.+8      	; 0xcc <refreshPort+0xc>
		PORTC |= (1 << PORTC4);
  c4:	98 b1       	in	r25, 0x08	; 8
  c6:	90 61       	ori	r25, 0x10	; 16
  c8:	98 b9       	out	0x08, r25	; 8
  ca:	03 c0       	rjmp	.+6      	; 0xd2 <refreshPort+0x12>
		} else {
		PORTC &= ~(1 << PORTC4);
  cc:	98 b1       	in	r25, 0x08	; 8
  ce:	9f 7e       	andi	r25, 0xEF	; 239
  d0:	98 b9       	out	0x08, r25	; 8
	}

	if (value & 0b00000010) {  // Bit 1
  d2:	81 ff       	sbrs	r24, 1
  d4:	04 c0       	rjmp	.+8      	; 0xde <refreshPort+0x1e>
		PORTC |= (1 << PORTC5);
  d6:	98 b1       	in	r25, 0x08	; 8
  d8:	90 62       	ori	r25, 0x20	; 32
  da:	98 b9       	out	0x08, r25	; 8
  dc:	03 c0       	rjmp	.+6      	; 0xe4 <refreshPort+0x24>
		} else {
		PORTC &= ~(1 << PORTC5);
  de:	98 b1       	in	r25, 0x08	; 8
  e0:	9f 7d       	andi	r25, 0xDF	; 223
  e2:	98 b9       	out	0x08, r25	; 8
	}

	if (value & 0b00000100) {  // Bit 2
  e4:	82 ff       	sbrs	r24, 2
  e6:	04 c0       	rjmp	.+8      	; 0xf0 <refreshPort+0x30>
		PORTD |= (1 << PORTD2);
  e8:	9b b1       	in	r25, 0x0b	; 11
  ea:	94 60       	ori	r25, 0x04	; 4
  ec:	9b b9       	out	0x0b, r25	; 11
  ee:	03 c0       	rjmp	.+6      	; 0xf6 <refreshPort+0x36>
		} else {
		PORTD &= ~(1 << PORTD2);
  f0:	9b b1       	in	r25, 0x0b	; 11
  f2:	9b 7f       	andi	r25, 0xFB	; 251
  f4:	9b b9       	out	0x0b, r25	; 11
	}

	if (value & 0b00001000) {  // Bit 3
  f6:	83 ff       	sbrs	r24, 3
  f8:	04 c0       	rjmp	.+8      	; 0x102 <refreshPort+0x42>
		PORTD |= (1 << PORTD3);
  fa:	9b b1       	in	r25, 0x0b	; 11
  fc:	98 60       	ori	r25, 0x08	; 8
  fe:	9b b9       	out	0x0b, r25	; 11
 100:	03 c0       	rjmp	.+6      	; 0x108 <refreshPort+0x48>
		} else {
		PORTD &= ~(1 << PORTD3);
 102:	9b b1       	in	r25, 0x0b	; 11
 104:	97 7f       	andi	r25, 0xF7	; 247
 106:	9b b9       	out	0x0b, r25	; 11
	}

	if (value & 0b00010000) {  // Bit 4
 108:	84 ff       	sbrs	r24, 4
 10a:	04 c0       	rjmp	.+8      	; 0x114 <refreshPort+0x54>
		PORTD |= (1 << PORTD4);
 10c:	9b b1       	in	r25, 0x0b	; 11
 10e:	90 61       	ori	r25, 0x10	; 16
 110:	9b b9       	out	0x0b, r25	; 11
 112:	03 c0       	rjmp	.+6      	; 0x11a <refreshPort+0x5a>
		} else {
		PORTD &= ~(1 << PORTD4);
 114:	9b b1       	in	r25, 0x0b	; 11
 116:	9f 7e       	andi	r25, 0xEF	; 239
 118:	9b b9       	out	0x0b, r25	; 11
	}

	if (value & 0b00100000) {  // Bit 5
 11a:	85 ff       	sbrs	r24, 5
 11c:	04 c0       	rjmp	.+8      	; 0x126 <refreshPort+0x66>
		PORTD |= (1 << PORTD5);
 11e:	9b b1       	in	r25, 0x0b	; 11
 120:	90 62       	ori	r25, 0x20	; 32
 122:	9b b9       	out	0x0b, r25	; 11
 124:	03 c0       	rjmp	.+6      	; 0x12c <refreshPort+0x6c>
		} else {
		PORTD &= ~(1 << PORTD5);
 126:	9b b1       	in	r25, 0x0b	; 11
 128:	9f 7d       	andi	r25, 0xDF	; 223
 12a:	9b b9       	out	0x0b, r25	; 11
	}

	if (value & 0b01000000) {  // Bit 6
 12c:	86 ff       	sbrs	r24, 6
 12e:	04 c0       	rjmp	.+8      	; 0x138 <refreshPort+0x78>
		PORTD |= (1 << PORTD6);
 130:	9b b1       	in	r25, 0x0b	; 11
 132:	90 64       	ori	r25, 0x40	; 64
 134:	9b b9       	out	0x0b, r25	; 11
 136:	03 c0       	rjmp	.+6      	; 0x13e <refreshPort+0x7e>
		} else {
		PORTD &= ~(1 << PORTD6);
 138:	9b b1       	in	r25, 0x0b	; 11
 13a:	9f 7b       	andi	r25, 0xBF	; 191
 13c:	9b b9       	out	0x0b, r25	; 11
	}

	if (value & 0b10000000) {  // Bit 7
 13e:	88 23       	and	r24, r24
 140:	24 f4       	brge	.+8      	; 0x14a <refreshPort+0x8a>
		PORTD |= (1 << PORTD7);
 142:	8b b1       	in	r24, 0x0b	; 11
 144:	80 68       	ori	r24, 0x80	; 128
 146:	8b b9       	out	0x0b, r24	; 11
 148:	08 95       	ret
		} else {
		PORTD &= ~(1 << PORTD7);
 14a:	8b b1       	in	r24, 0x0b	; 11
 14c:	8f 77       	andi	r24, 0x7F	; 127
 14e:	8b b9       	out	0x0b, r24	; 11
 150:	08 95       	ret

00000152 <main>:
	}
}

int main(void) {
 152:	cf 93       	push	r28
 154:	df 93       	push	r29
 156:	cd b7       	in	r28, 0x3d	; 61
 158:	de b7       	in	r29, 0x3e	; 62
 15a:	29 97       	sbiw	r28, 0x09	; 9
 15c:	0f b6       	in	r0, 0x3f	; 63
 15e:	f8 94       	cli
 160:	de bf       	out	0x3e, r29	; 62
 162:	0f be       	out	0x3f, r0	; 63
 164:	cd bf       	out	0x3d, r28	; 61
	uint8_t test_values[] = {0, 1, 3, 7, 15, 31, 63, 127, 255};
 166:	89 e0       	ldi	r24, 0x09	; 9
 168:	e0 e0       	ldi	r30, 0x00	; 0
 16a:	f1 e0       	ldi	r31, 0x01	; 1
 16c:	de 01       	movw	r26, r28
 16e:	11 96       	adiw	r26, 0x01	; 1
 170:	01 90       	ld	r0, Z+
 172:	0d 92       	st	X+, r0
 174:	8a 95       	dec	r24
 176:	e1 f7       	brne	.-8      	; 0x170 <main+0x1e>
	uint8_t i;

	// Inicializa GPIO
	GPIO_init();
 178:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_init>

	// Prueba diferentes valores para verificar el funcionamiento de los LEDs
	while (1) {
		for (i = 0; i < sizeof(test_values) / sizeof(test_values[0]); i++) {
 17c:	10 e0       	ldi	r17, 0x00	; 0
 17e:	13 c0       	rjmp	.+38     	; 0x1a6 <main+0x54>
			refreshPort(test_values[i]);
 180:	e1 e0       	ldi	r30, 0x01	; 1
 182:	f0 e0       	ldi	r31, 0x00	; 0
 184:	ec 0f       	add	r30, r28
 186:	fd 1f       	adc	r31, r29
 188:	e1 0f       	add	r30, r17
 18a:	f1 1d       	adc	r31, r1
 18c:	80 81       	ld	r24, Z
 18e:	0e 94 60 00 	call	0xc0	; 0xc0 <refreshPort>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 192:	2f ef       	ldi	r18, 0xFF	; 255
 194:	83 ed       	ldi	r24, 0xD3	; 211
 196:	90 e3       	ldi	r25, 0x30	; 48
 198:	21 50       	subi	r18, 0x01	; 1
 19a:	80 40       	sbci	r24, 0x00	; 0
 19c:	90 40       	sbci	r25, 0x00	; 0
 19e:	e1 f7       	brne	.-8      	; 0x198 <main+0x46>
 1a0:	00 c0       	rjmp	.+0      	; 0x1a2 <main+0x50>
 1a2:	00 00       	nop
	// Inicializa GPIO
	GPIO_init();

	// Prueba diferentes valores para verificar el funcionamiento de los LEDs
	while (1) {
		for (i = 0; i < sizeof(test_values) / sizeof(test_values[0]); i++) {
 1a4:	1f 5f       	subi	r17, 0xFF	; 255
 1a6:	19 30       	cpi	r17, 0x09	; 9
 1a8:	58 f3       	brcs	.-42     	; 0x180 <main+0x2e>
 1aa:	e8 cf       	rjmp	.-48     	; 0x17c <main+0x2a>

000001ac <_exit>:
 1ac:	f8 94       	cli

000001ae <__stop_program>:
 1ae:	ff cf       	rjmp	.-2      	; 0x1ae <__stop_program>
