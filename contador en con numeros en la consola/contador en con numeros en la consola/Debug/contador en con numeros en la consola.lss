
contador en con numeros en la consola.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000098  00800100  00000a18  00000aac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a18  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000088  00800198  00800198  00000b44  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000b44  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ba0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  00000be0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c3d  00000000  00000000  00000c68  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000867  00000000  00000000  000018a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000530  00000000  00000000  0000210c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000130  00000000  00000000  0000263c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000049d  00000000  00000000  0000276c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002f1  00000000  00000000  00002c09  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  00002efa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 a6 01 	jmp	0x34c	; 0x34c <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e1       	ldi	r30, 0x18	; 24
  7c:	fa e0       	ldi	r31, 0x0A	; 10
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 39       	cpi	r26, 0x98	; 152
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	a8 e9       	ldi	r26, 0x98	; 152
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a0 32       	cpi	r26, 0x20	; 32
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 a9 00 	call	0x152	; 0x152 <main>
  9e:	0c 94 0a 05 	jmp	0xa14	; 0xa14 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <GPIO_init>:
char input_buffer[4]; // Buffer para almacenar la cadena recibida

// Configura los pines
void GPIO_init(void) {
	// Configura PC4 y PC5 como salidas
	DDRC |= (1 << DDC4) | (1 << DDC5);
  a6:	87 b1       	in	r24, 0x07	; 7
  a8:	80 63       	ori	r24, 0x30	; 48
  aa:	87 b9       	out	0x07, r24	; 7

	// Configura PD2 a PD7 como salidas
	DDRD |= (1 << DDD2) | (1 << DDD3) | (1 << DDD4) | (1 << DDD5) | (1 << DDD6) | (1 << DDD7);
  ac:	8a b1       	in	r24, 0x0a	; 10
  ae:	8c 6f       	ori	r24, 0xFC	; 252
  b0:	8a b9       	out	0x0a, r24	; 10

	// Inicializa los LEDs apagados
	PORTC &= ~((1 << PORTC4) | (1 << PORTC5));
  b2:	88 b1       	in	r24, 0x08	; 8
  b4:	8f 7c       	andi	r24, 0xCF	; 207
  b6:	88 b9       	out	0x08, r24	; 8
	PORTD &= ~((1 << PORTD2) | (1 << PORTD3) | (1 << PORTD4) | (1 << PORTD5) | (1 << PORTD6) | (1 << PORTD7));
  b8:	8b b1       	in	r24, 0x0b	; 11
  ba:	83 70       	andi	r24, 0x03	; 3
  bc:	8b b9       	out	0x0b, r24	; 11
  be:	08 95       	ret

000000c0 <refreshPort>:
}

// Actualiza los LEDs según el valor recibido
void refreshPort(uint8_t value) {
	// Actualiza cada bit en PORTD y PORTC según el valor recibido
	if (value & 0b00000001) {  // Bit 0
  c0:	80 ff       	sbrs	r24, 0
  c2:	04 c0       	rjmp	.+8      	; 0xcc <refreshPort+0xc>
		PORTC |= (1 << PORTC4);
  c4:	98 b1       	in	r25, 0x08	; 8
  c6:	90 61       	ori	r25, 0x10	; 16
  c8:	98 b9       	out	0x08, r25	; 8
  ca:	03 c0       	rjmp	.+6      	; 0xd2 <refreshPort+0x12>
		} else {
		PORTC &= ~(1 << PORTC4);
  cc:	98 b1       	in	r25, 0x08	; 8
  ce:	9f 7e       	andi	r25, 0xEF	; 239
  d0:	98 b9       	out	0x08, r25	; 8
	}

	if (value & 0b00000010) {  // Bit 1
  d2:	81 ff       	sbrs	r24, 1
  d4:	04 c0       	rjmp	.+8      	; 0xde <refreshPort+0x1e>
		PORTC |= (1 << PORTC5);
  d6:	98 b1       	in	r25, 0x08	; 8
  d8:	90 62       	ori	r25, 0x20	; 32
  da:	98 b9       	out	0x08, r25	; 8
  dc:	03 c0       	rjmp	.+6      	; 0xe4 <refreshPort+0x24>
		} else {
		PORTC &= ~(1 << PORTC5);
  de:	98 b1       	in	r25, 0x08	; 8
  e0:	9f 7d       	andi	r25, 0xDF	; 223
  e2:	98 b9       	out	0x08, r25	; 8
	}

	if (value & 0b00000100) {  // Bit 2
  e4:	82 ff       	sbrs	r24, 2
  e6:	04 c0       	rjmp	.+8      	; 0xf0 <refreshPort+0x30>
		PORTD |= (1 << PORTD2);
  e8:	9b b1       	in	r25, 0x0b	; 11
  ea:	94 60       	ori	r25, 0x04	; 4
  ec:	9b b9       	out	0x0b, r25	; 11
  ee:	03 c0       	rjmp	.+6      	; 0xf6 <refreshPort+0x36>
		} else {
		PORTD &= ~(1 << PORTD2);
  f0:	9b b1       	in	r25, 0x0b	; 11
  f2:	9b 7f       	andi	r25, 0xFB	; 251
  f4:	9b b9       	out	0x0b, r25	; 11
	}

	if (value & 0b00001000) {  // Bit 3
  f6:	83 ff       	sbrs	r24, 3
  f8:	04 c0       	rjmp	.+8      	; 0x102 <refreshPort+0x42>
		PORTD |= (1 << PORTD3);
  fa:	9b b1       	in	r25, 0x0b	; 11
  fc:	98 60       	ori	r25, 0x08	; 8
  fe:	9b b9       	out	0x0b, r25	; 11
 100:	03 c0       	rjmp	.+6      	; 0x108 <refreshPort+0x48>
		} else {
		PORTD &= ~(1 << PORTD3);
 102:	9b b1       	in	r25, 0x0b	; 11
 104:	97 7f       	andi	r25, 0xF7	; 247
 106:	9b b9       	out	0x0b, r25	; 11
	}

	if (value & 0b00010000) {  // Bit 4
 108:	84 ff       	sbrs	r24, 4
 10a:	04 c0       	rjmp	.+8      	; 0x114 <refreshPort+0x54>
		PORTD |= (1 << PORTD4);
 10c:	9b b1       	in	r25, 0x0b	; 11
 10e:	90 61       	ori	r25, 0x10	; 16
 110:	9b b9       	out	0x0b, r25	; 11
 112:	03 c0       	rjmp	.+6      	; 0x11a <refreshPort+0x5a>
		} else {
		PORTD &= ~(1 << PORTD4);
 114:	9b b1       	in	r25, 0x0b	; 11
 116:	9f 7e       	andi	r25, 0xEF	; 239
 118:	9b b9       	out	0x0b, r25	; 11
	}

	if (value & 0b00100000) {  // Bit 5
 11a:	85 ff       	sbrs	r24, 5
 11c:	04 c0       	rjmp	.+8      	; 0x126 <refreshPort+0x66>
		PORTD |= (1 << PORTD5);
 11e:	9b b1       	in	r25, 0x0b	; 11
 120:	90 62       	ori	r25, 0x20	; 32
 122:	9b b9       	out	0x0b, r25	; 11
 124:	03 c0       	rjmp	.+6      	; 0x12c <refreshPort+0x6c>
		} else {
		PORTD &= ~(1 << PORTD5);
 126:	9b b1       	in	r25, 0x0b	; 11
 128:	9f 7d       	andi	r25, 0xDF	; 223
 12a:	9b b9       	out	0x0b, r25	; 11
	}

	if (value & 0b01000000) {  // Bit 6
 12c:	86 ff       	sbrs	r24, 6
 12e:	04 c0       	rjmp	.+8      	; 0x138 <refreshPort+0x78>
		PORTD |= (1 << PORTD6);
 130:	9b b1       	in	r25, 0x0b	; 11
 132:	90 64       	ori	r25, 0x40	; 64
 134:	9b b9       	out	0x0b, r25	; 11
 136:	03 c0       	rjmp	.+6      	; 0x13e <refreshPort+0x7e>
		} else {
		PORTD &= ~(1 << PORTD6);
 138:	9b b1       	in	r25, 0x0b	; 11
 13a:	9f 7b       	andi	r25, 0xBF	; 191
 13c:	9b b9       	out	0x0b, r25	; 11
	}

	if (value & 0b10000000) {  // Bit 7
 13e:	88 23       	and	r24, r24
 140:	24 f4       	brge	.+8      	; 0x14a <refreshPort+0x8a>
		PORTD |= (1 << PORTD7);
 142:	8b b1       	in	r24, 0x0b	; 11
 144:	80 68       	ori	r24, 0x80	; 128
 146:	8b b9       	out	0x0b, r24	; 11
 148:	08 95       	ret
		} else {
		PORTD &= ~(1 << PORTD7);
 14a:	8b b1       	in	r24, 0x0b	; 11
 14c:	8f 77       	andi	r24, 0x7F	; 127
 14e:	8b b9       	out	0x0b, r24	; 11
 150:	08 95       	ret

00000152 <main>:
	}
}
int main(void) {
	// Inicializa GPIO y UART
	GPIO_init();
 152:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_init>
	UART_init(9600); // Inicializa UART con baud rate de 9600
 156:	80 e8       	ldi	r24, 0x80	; 128
 158:	95 e2       	ldi	r25, 0x25	; 37
 15a:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <UART_init>
	sei(); // Habilita las interrupciones globales
 15e:	78 94       	sei

	// Mensaje inicial para el usuario
	UART_send_string("Por favor, ingresa un número (0-255): ");
 160:	8e e6       	ldi	r24, 0x6E	; 110
 162:	91 e0       	ldi	r25, 0x01	; 1
 164:	0e 94 29 01 	call	0x252	; 0x252 <UART_send_string>

	while (1) {
		// Lee una cadena de caracteres desde UART
		UART_receive_string(input_buffer, sizeof(input_buffer));
 168:	64 e0       	ldi	r22, 0x04	; 4
 16a:	8c e1       	ldi	r24, 0x1C	; 28
 16c:	92 e0       	ldi	r25, 0x02	; 2
 16e:	0e 94 7e 01 	call	0x2fc	; 0x2fc <UART_receive_string>

		// Envía un salto de línea antes de imprimir el mensaje recibido
		UART_send('\n');
 172:	8a e0       	ldi	r24, 0x0A	; 10
 174:	0e 94 22 01 	call	0x244	; 0x244 <UART_send>
		UART_send('\r'); // Retorno de carro para asegurar la posición del cursor al inicio de la línea
 178:	8d e0       	ldi	r24, 0x0D	; 13
 17a:	0e 94 22 01 	call	0x244	; 0x244 <UART_send>

		UART_send_string("Cadena recibida: ");
 17e:	80 e0       	ldi	r24, 0x00	; 0
 180:	91 e0       	ldi	r25, 0x01	; 1
 182:	0e 94 29 01 	call	0x252	; 0x252 <UART_send_string>
		UART_send_string(input_buffer);
 186:	8c e1       	ldi	r24, 0x1C	; 28
 188:	92 e0       	ldi	r25, 0x02	; 2
 18a:	0e 94 29 01 	call	0x252	; 0x252 <UART_send_string>
		UART_send('\n');
 18e:	8a e0       	ldi	r24, 0x0A	; 10
 190:	0e 94 22 01 	call	0x244	; 0x244 <UART_send>
		// Convierte la cadena a un número entero
		received_value = atoi(input_buffer);
 194:	8c e1       	ldi	r24, 0x1C	; 28
 196:	92 e0       	ldi	r25, 0x02	; 2
 198:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <atoi>
 19c:	90 93 99 01 	sts	0x0199, r25	; 0x800199 <__data_end+0x1>
 1a0:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <__data_end>
		// Envía un salto de línea antes de imprimir el mensaje recibido
		UART_send('\n');
 1a4:	8a e0       	ldi	r24, 0x0A	; 10
 1a6:	0e 94 22 01 	call	0x244	; 0x244 <UART_send>
		UART_send('\r'); // Retorno de carro para asegurar la posición del cursor al inicio de la línea
 1aa:	8d e0       	ldi	r24, 0x0D	; 13
 1ac:	0e 94 22 01 	call	0x244	; 0x244 <UART_send>
		// Envía un salto de línea antes de imprimir el valor entero
		UART_send_string("Valor recibido como entero: ");
 1b0:	82 e1       	ldi	r24, 0x12	; 18
 1b2:	91 e0       	ldi	r25, 0x01	; 1
 1b4:	0e 94 29 01 	call	0x252	; 0x252 <UART_send_string>
		UART_send_number(received_value);
 1b8:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <__data_end>
 1bc:	0e 94 36 01 	call	0x26c	; 0x26c <UART_send_number>
		// Envía un salto de línea antes de imprimir el mensaje recibido
		UART_send('\n');
 1c0:	8a e0       	ldi	r24, 0x0A	; 10
 1c2:	0e 94 22 01 	call	0x244	; 0x244 <UART_send>
		UART_send('\r'); // Retorno de carro para asegurar la posición del cursor al inicio de la línea
 1c6:	8d e0       	ldi	r24, 0x0D	; 13
 1c8:	0e 94 22 01 	call	0x244	; 0x244 <UART_send>


		// Verifica si el número está en el rango permitido
		if (received_value >= 0 && received_value <= 255) {
 1cc:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <__data_end>
 1d0:	28 2f       	mov	r18, r24
 1d2:	30 91 99 01 	lds	r19, 0x0199	; 0x800199 <__data_end+0x1>
 1d6:	2f 3f       	cpi	r18, 0xFF	; 255
 1d8:	31 05       	cpc	r19, r1
 1da:	09 f0       	breq	.+2      	; 0x1de <main+0x8c>
 1dc:	18 f4       	brcc	.+6      	; 0x1e4 <main+0x92>
			// Actualiza los LEDs según el valor recibido
			refreshPort(received_value);
 1de:	0e 94 60 00 	call	0xc0	; 0xc0 <refreshPort>
 1e2:	04 c0       	rjmp	.+8      	; 0x1ec <main+0x9a>
			} else {
			// Maneja valores fuera del rango permitido
			UART_send_string("Valor no válido. Por favor, ingresa un número entre 0 y 255.\n");
 1e4:	8f e2       	ldi	r24, 0x2F	; 47
 1e6:	91 e0       	ldi	r25, 0x01	; 1
 1e8:	0e 94 29 01 	call	0x252	; 0x252 <UART_send_string>
		}

		// Solicita al usuario que ingrese otro número
		UART_send_string("\nPor favor, ingresa un número (0-255): ");
 1ec:	8d e6       	ldi	r24, 0x6D	; 109
 1ee:	91 e0       	ldi	r25, 0x01	; 1
 1f0:	0e 94 29 01 	call	0x252	; 0x252 <UART_send_string>
	}
 1f4:	b9 cf       	rjmp	.-142    	; 0x168 <main+0x16>

000001f6 <UART_init>:
volatile uint8_t uart_head = 0; // Índice de la cabeza del buffer
volatile uint8_t uart_tail = 0; // Índice de la cola del buffer

/* Inicializa el UART con el baud rate especificado. */
void UART_init(unsigned int baud) {
	unsigned int ubrr = BAUD_PRESCALE(baud);
 1f6:	a0 e0       	ldi	r26, 0x00	; 0
 1f8:	b0 e0       	ldi	r27, 0x00	; 0
 1fa:	88 0f       	add	r24, r24
 1fc:	99 1f       	adc	r25, r25
 1fe:	aa 1f       	adc	r26, r26
 200:	bb 1f       	adc	r27, r27
 202:	88 0f       	add	r24, r24
 204:	99 1f       	adc	r25, r25
 206:	aa 1f       	adc	r26, r26
 208:	bb 1f       	adc	r27, r27
 20a:	9c 01       	movw	r18, r24
 20c:	ad 01       	movw	r20, r26
 20e:	22 0f       	add	r18, r18
 210:	33 1f       	adc	r19, r19
 212:	44 1f       	adc	r20, r20
 214:	55 1f       	adc	r21, r21
 216:	22 0f       	add	r18, r18
 218:	33 1f       	adc	r19, r19
 21a:	44 1f       	adc	r20, r20
 21c:	55 1f       	adc	r21, r21
 21e:	60 e0       	ldi	r22, 0x00	; 0
 220:	74 e2       	ldi	r23, 0x24	; 36
 222:	84 ef       	ldi	r24, 0xF4	; 244
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	0e 94 ca 01 	call	0x394	; 0x394 <__udivmodsi4>
 22a:	21 50       	subi	r18, 0x01	; 1
 22c:	31 09       	sbc	r19, r1
	UBRR0H = (unsigned char)(ubrr >> 8);
 22e:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (unsigned char)ubrr;
 232:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	UCSR0B = (1 << RXEN0) | (1 << TXEN0) | (1 << RXCIE0); // Habilitar RX, TX y la interrupción RX
 236:	88 e9       	ldi	r24, 0x98	; 152
 238:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00); // Configurar para 8 bits de datos, 1 bit de stop
 23c:	86 e0       	ldi	r24, 0x06	; 6
 23e:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 242:	08 95       	ret

00000244 <UART_send>:
}

/* Envía un solo carácter a través de UART. */
void UART_send(unsigned char data) {
	while (!(UCSR0A & (1 << UDRE0))); // Esperar hasta que el buffer de transmisión esté vacío
 244:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 248:	95 ff       	sbrs	r25, 5
 24a:	fc cf       	rjmp	.-8      	; 0x244 <UART_send>
	UDR0 = data; // Enviar el carácter
 24c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 250:	08 95       	ret

00000252 <UART_send_string>:
}

/* Envía una cadena de caracteres a través de UART. */
void UART_send_string(const char* str) {
 252:	cf 93       	push	r28
 254:	df 93       	push	r29
 256:	ec 01       	movw	r28, r24
	while (*str) {
 258:	03 c0       	rjmp	.+6      	; 0x260 <UART_send_string+0xe>
		UART_send(*str++); // Enviar cada carácter de la cadena
 25a:	21 96       	adiw	r28, 0x01	; 1
 25c:	0e 94 22 01 	call	0x244	; 0x244 <UART_send>
	UDR0 = data; // Enviar el carácter
}

/* Envía una cadena de caracteres a través de UART. */
void UART_send_string(const char* str) {
	while (*str) {
 260:	88 81       	ld	r24, Y
 262:	81 11       	cpse	r24, r1
 264:	fa cf       	rjmp	.-12     	; 0x25a <UART_send_string+0x8>
		UART_send(*str++); // Enviar cada carácter de la cadena
	}
}
 266:	df 91       	pop	r29
 268:	cf 91       	pop	r28
 26a:	08 95       	ret

0000026c <UART_send_number>:

/* Envía un número a través de UART. */
void UART_send_number(uint8_t number) {
 26c:	0f 93       	push	r16
 26e:	1f 93       	push	r17
 270:	cf 93       	push	r28
 272:	df 93       	push	r29
 274:	00 d0       	rcall	.+0      	; 0x276 <UART_send_number+0xa>
 276:	00 d0       	rcall	.+0      	; 0x278 <UART_send_number+0xc>
 278:	cd b7       	in	r28, 0x3d	; 61
 27a:	de b7       	in	r29, 0x3e	; 62
	char buffer[4]; // Para almacenar hasta 3 dígitos y un terminador de cadena
	snprintf(buffer, sizeof(buffer), "%u", number); // Convierte el número a cadena
 27c:	1f 92       	push	r1
 27e:	8f 93       	push	r24
 280:	85 e9       	ldi	r24, 0x95	; 149
 282:	91 e0       	ldi	r25, 0x01	; 1
 284:	9f 93       	push	r25
 286:	8f 93       	push	r24
 288:	1f 92       	push	r1
 28a:	84 e0       	ldi	r24, 0x04	; 4
 28c:	8f 93       	push	r24
 28e:	8e 01       	movw	r16, r28
 290:	0f 5f       	subi	r16, 0xFF	; 255
 292:	1f 4f       	sbci	r17, 0xFF	; 255
 294:	1f 93       	push	r17
 296:	0f 93       	push	r16
 298:	0e 94 12 02 	call	0x424	; 0x424 <snprintf>
	UART_send_string(buffer); // Envía la cadena
 29c:	c8 01       	movw	r24, r16
 29e:	0e 94 29 01 	call	0x252	; 0x252 <UART_send_string>
}
 2a2:	0f b6       	in	r0, 0x3f	; 63
 2a4:	f8 94       	cli
 2a6:	de bf       	out	0x3e, r29	; 62
 2a8:	0f be       	out	0x3f, r0	; 63
 2aa:	cd bf       	out	0x3d, r28	; 61
 2ac:	0f 90       	pop	r0
 2ae:	0f 90       	pop	r0
 2b0:	0f 90       	pop	r0
 2b2:	0f 90       	pop	r0
 2b4:	df 91       	pop	r29
 2b6:	cf 91       	pop	r28
 2b8:	1f 91       	pop	r17
 2ba:	0f 91       	pop	r16
 2bc:	08 95       	ret

000002be <UART_receive>:

/* Lee un solo carácter del buffer UART. */
unsigned char UART_receive(void) {
	if (uart_head != uart_tail) { // Verificar si hay datos disponibles
 2be:	90 91 9b 01 	lds	r25, 0x019B	; 0x80019b <uart_head>
 2c2:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <uart_tail>
 2c6:	98 17       	cp	r25, r24
 2c8:	69 f0       	breq	.+26     	; 0x2e4 <UART_receive+0x26>
		unsigned char data = uart_buffer[uart_tail]; // Leer el carácter del buffer
 2ca:	e0 91 9a 01 	lds	r30, 0x019A	; 0x80019a <uart_tail>
 2ce:	f0 e0       	ldi	r31, 0x00	; 0
 2d0:	e4 56       	subi	r30, 0x64	; 100
 2d2:	fe 4f       	sbci	r31, 0xFE	; 254
 2d4:	80 81       	ld	r24, Z
		uart_tail = (uart_tail + 1) % sizeof(uart_buffer); // Actualizar el índice de la cola
 2d6:	90 91 9a 01 	lds	r25, 0x019A	; 0x80019a <uart_tail>
 2da:	9f 5f       	subi	r25, 0xFF	; 255
 2dc:	9f 77       	andi	r25, 0x7F	; 127
 2de:	90 93 9a 01 	sts	0x019A, r25	; 0x80019a <uart_tail>
		return data; // Devolver el carácter recibido
 2e2:	08 95       	ret
		} else {
		return 0; // No hay datos disponibles
 2e4:	80 e0       	ldi	r24, 0x00	; 0
	}
}
 2e6:	08 95       	ret

000002e8 <UART_available>:
	buffer[index] = '\0'; // Null-terminar el string
}

/* Verifica si hay datos disponibles en el buffer UART. */
int UART_available(void) {
	return (uart_head != uart_tail); // Retorna 1 si hay datos en el buffer, 0 si no
 2e8:	20 91 9b 01 	lds	r18, 0x019B	; 0x80019b <uart_head>
 2ec:	90 91 9a 01 	lds	r25, 0x019A	; 0x80019a <uart_tail>
 2f0:	81 e0       	ldi	r24, 0x01	; 1
 2f2:	29 13       	cpse	r18, r25
 2f4:	01 c0       	rjmp	.+2      	; 0x2f8 <UART_available+0x10>
 2f6:	80 e0       	ldi	r24, 0x00	; 0
}
 2f8:	90 e0       	ldi	r25, 0x00	; 0
 2fa:	08 95       	ret

000002fc <UART_receive_string>:
		return 0; // No hay datos disponibles
	}
}

/* Lee una cadena del buffer UART hasta que se encuentra un delimitador. */
void UART_receive_string(char* buffer, uint8_t max_length) {
 2fc:	0f 93       	push	r16
 2fe:	1f 93       	push	r17
 300:	cf 93       	push	r28
 302:	df 93       	push	r29
 304:	8c 01       	movw	r16, r24
 306:	d6 2f       	mov	r29, r22
	uint8_t index = 0;
 308:	c0 e0       	ldi	r28, 0x00	; 0
	char received_char;

	while (index < (max_length - 1)) { // Deja espacio para el terminador de cadena
 30a:	0f c0       	rjmp	.+30     	; 0x32a <UART_receive_string+0x2e>
		if (UART_available()) {
 30c:	0e 94 74 01 	call	0x2e8	; 0x2e8 <UART_available>
 310:	89 2b       	or	r24, r25
 312:	59 f0       	breq	.+22     	; 0x32a <UART_receive_string+0x2e>
			received_char = UART_receive();
 314:	0e 94 5f 01 	call	0x2be	; 0x2be <UART_receive>
			if (received_char == '\n' || received_char == '\r') {
 318:	8a 30       	cpi	r24, 0x0A	; 10
 31a:	79 f0       	breq	.+30     	; 0x33a <UART_receive_string+0x3e>
 31c:	8d 30       	cpi	r24, 0x0D	; 13
 31e:	69 f0       	breq	.+26     	; 0x33a <UART_receive_string+0x3e>
				// Fin de la cadena
				break;
			}
			buffer[index++] = received_char;
 320:	f8 01       	movw	r30, r16
 322:	ec 0f       	add	r30, r28
 324:	f1 1d       	adc	r31, r1
 326:	80 83       	st	Z, r24
 328:	cf 5f       	subi	r28, 0xFF	; 255
/* Lee una cadena del buffer UART hasta que se encuentra un delimitador. */
void UART_receive_string(char* buffer, uint8_t max_length) {
	uint8_t index = 0;
	char received_char;

	while (index < (max_length - 1)) { // Deja espacio para el terminador de cadena
 32a:	2c 2f       	mov	r18, r28
 32c:	30 e0       	ldi	r19, 0x00	; 0
 32e:	8d 2f       	mov	r24, r29
 330:	90 e0       	ldi	r25, 0x00	; 0
 332:	01 97       	sbiw	r24, 0x01	; 1
 334:	28 17       	cp	r18, r24
 336:	39 07       	cpc	r19, r25
 338:	4c f3       	brlt	.-46     	; 0x30c <UART_receive_string+0x10>
				break;
			}
			buffer[index++] = received_char;
		}
	}
	buffer[index] = '\0'; // Null-terminar el string
 33a:	f8 01       	movw	r30, r16
 33c:	ec 0f       	add	r30, r28
 33e:	f1 1d       	adc	r31, r1
 340:	10 82       	st	Z, r1
}
 342:	df 91       	pop	r29
 344:	cf 91       	pop	r28
 346:	1f 91       	pop	r17
 348:	0f 91       	pop	r16
 34a:	08 95       	ret

0000034c <__vector_18>:
int UART_available(void) {
	return (uart_head != uart_tail); // Retorna 1 si hay datos en el buffer, 0 si no
}

// Rutina de interrupción del UART
ISR(USART_RX_vect) {
 34c:	1f 92       	push	r1
 34e:	0f 92       	push	r0
 350:	0f b6       	in	r0, 0x3f	; 63
 352:	0f 92       	push	r0
 354:	11 24       	eor	r1, r1
 356:	8f 93       	push	r24
 358:	ef 93       	push	r30
 35a:	ff 93       	push	r31
	uart_buffer[uart_head] = UDR0; // Leer el carácter recibido del registro UDR0
 35c:	e0 91 9b 01 	lds	r30, 0x019B	; 0x80019b <uart_head>
 360:	f0 e0       	ldi	r31, 0x00	; 0
 362:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 366:	e4 56       	subi	r30, 0x64	; 100
 368:	fe 4f       	sbci	r31, 0xFE	; 254
 36a:	80 83       	st	Z, r24
	uart_head = (uart_head + 1) % sizeof(uart_buffer); // Actualizar el índice de la cabeza del buffer
 36c:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <uart_head>
 370:	8f 5f       	subi	r24, 0xFF	; 255
 372:	8f 77       	andi	r24, 0x7F	; 127
 374:	80 93 9b 01 	sts	0x019B, r24	; 0x80019b <uart_head>
	uart_buffer[uart_head] = '\0'; // Terminador de cadena
 378:	e0 91 9b 01 	lds	r30, 0x019B	; 0x80019b <uart_head>
 37c:	f0 e0       	ldi	r31, 0x00	; 0
 37e:	e4 56       	subi	r30, 0x64	; 100
 380:	fe 4f       	sbci	r31, 0xFE	; 254
 382:	10 82       	st	Z, r1
}
 384:	ff 91       	pop	r31
 386:	ef 91       	pop	r30
 388:	8f 91       	pop	r24
 38a:	0f 90       	pop	r0
 38c:	0f be       	out	0x3f, r0	; 63
 38e:	0f 90       	pop	r0
 390:	1f 90       	pop	r1
 392:	18 95       	reti

00000394 <__udivmodsi4>:
 394:	a1 e2       	ldi	r26, 0x21	; 33
 396:	1a 2e       	mov	r1, r26
 398:	aa 1b       	sub	r26, r26
 39a:	bb 1b       	sub	r27, r27
 39c:	fd 01       	movw	r30, r26
 39e:	0d c0       	rjmp	.+26     	; 0x3ba <__udivmodsi4_ep>

000003a0 <__udivmodsi4_loop>:
 3a0:	aa 1f       	adc	r26, r26
 3a2:	bb 1f       	adc	r27, r27
 3a4:	ee 1f       	adc	r30, r30
 3a6:	ff 1f       	adc	r31, r31
 3a8:	a2 17       	cp	r26, r18
 3aa:	b3 07       	cpc	r27, r19
 3ac:	e4 07       	cpc	r30, r20
 3ae:	f5 07       	cpc	r31, r21
 3b0:	20 f0       	brcs	.+8      	; 0x3ba <__udivmodsi4_ep>
 3b2:	a2 1b       	sub	r26, r18
 3b4:	b3 0b       	sbc	r27, r19
 3b6:	e4 0b       	sbc	r30, r20
 3b8:	f5 0b       	sbc	r31, r21

000003ba <__udivmodsi4_ep>:
 3ba:	66 1f       	adc	r22, r22
 3bc:	77 1f       	adc	r23, r23
 3be:	88 1f       	adc	r24, r24
 3c0:	99 1f       	adc	r25, r25
 3c2:	1a 94       	dec	r1
 3c4:	69 f7       	brne	.-38     	; 0x3a0 <__udivmodsi4_loop>
 3c6:	60 95       	com	r22
 3c8:	70 95       	com	r23
 3ca:	80 95       	com	r24
 3cc:	90 95       	com	r25
 3ce:	9b 01       	movw	r18, r22
 3d0:	ac 01       	movw	r20, r24
 3d2:	bd 01       	movw	r22, r26
 3d4:	cf 01       	movw	r24, r30
 3d6:	08 95       	ret

000003d8 <atoi>:
 3d8:	fc 01       	movw	r30, r24
 3da:	88 27       	eor	r24, r24
 3dc:	99 27       	eor	r25, r25
 3de:	e8 94       	clt
 3e0:	21 91       	ld	r18, Z+
 3e2:	20 32       	cpi	r18, 0x20	; 32
 3e4:	e9 f3       	breq	.-6      	; 0x3e0 <atoi+0x8>
 3e6:	29 30       	cpi	r18, 0x09	; 9
 3e8:	10 f0       	brcs	.+4      	; 0x3ee <atoi+0x16>
 3ea:	2e 30       	cpi	r18, 0x0E	; 14
 3ec:	c8 f3       	brcs	.-14     	; 0x3e0 <atoi+0x8>
 3ee:	2b 32       	cpi	r18, 0x2B	; 43
 3f0:	41 f0       	breq	.+16     	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
 3f2:	2d 32       	cpi	r18, 0x2D	; 45
 3f4:	39 f4       	brne	.+14     	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 3f6:	68 94       	set
 3f8:	04 c0       	rjmp	.+8      	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
 3fa:	0e 94 0a 02 	call	0x414	; 0x414 <__mulhi_const_10>
 3fe:	82 0f       	add	r24, r18
 400:	91 1d       	adc	r25, r1
 402:	21 91       	ld	r18, Z+
 404:	20 53       	subi	r18, 0x30	; 48
 406:	2a 30       	cpi	r18, 0x0A	; 10
 408:	c0 f3       	brcs	.-16     	; 0x3fa <atoi+0x22>
 40a:	1e f4       	brtc	.+6      	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
 40c:	90 95       	com	r25
 40e:	81 95       	neg	r24
 410:	9f 4f       	sbci	r25, 0xFF	; 255
 412:	08 95       	ret

00000414 <__mulhi_const_10>:
 414:	7a e0       	ldi	r23, 0x0A	; 10
 416:	97 9f       	mul	r25, r23
 418:	90 2d       	mov	r25, r0
 41a:	87 9f       	mul	r24, r23
 41c:	80 2d       	mov	r24, r0
 41e:	91 0d       	add	r25, r1
 420:	11 24       	eor	r1, r1
 422:	08 95       	ret

00000424 <snprintf>:
 424:	ae e0       	ldi	r26, 0x0E	; 14
 426:	b0 e0       	ldi	r27, 0x00	; 0
 428:	e8 e1       	ldi	r30, 0x18	; 24
 42a:	f2 e0       	ldi	r31, 0x02	; 2
 42c:	0c 94 e1 04 	jmp	0x9c2	; 0x9c2 <__prologue_saves__+0x1c>
 430:	0d 89       	ldd	r16, Y+21	; 0x15
 432:	1e 89       	ldd	r17, Y+22	; 0x16
 434:	8f 89       	ldd	r24, Y+23	; 0x17
 436:	98 8d       	ldd	r25, Y+24	; 0x18
 438:	26 e0       	ldi	r18, 0x06	; 6
 43a:	2c 83       	std	Y+4, r18	; 0x04
 43c:	1a 83       	std	Y+2, r17	; 0x02
 43e:	09 83       	std	Y+1, r16	; 0x01
 440:	97 ff       	sbrs	r25, 7
 442:	02 c0       	rjmp	.+4      	; 0x448 <snprintf+0x24>
 444:	80 e0       	ldi	r24, 0x00	; 0
 446:	90 e8       	ldi	r25, 0x80	; 128
 448:	01 97       	sbiw	r24, 0x01	; 1
 44a:	9e 83       	std	Y+6, r25	; 0x06
 44c:	8d 83       	std	Y+5, r24	; 0x05
 44e:	ae 01       	movw	r20, r28
 450:	45 5e       	subi	r20, 0xE5	; 229
 452:	5f 4f       	sbci	r21, 0xFF	; 255
 454:	69 8d       	ldd	r22, Y+25	; 0x19
 456:	7a 8d       	ldd	r23, Y+26	; 0x1a
 458:	ce 01       	movw	r24, r28
 45a:	01 96       	adiw	r24, 0x01	; 1
 45c:	0e 94 42 02 	call	0x484	; 0x484 <vfprintf>
 460:	4d 81       	ldd	r20, Y+5	; 0x05
 462:	5e 81       	ldd	r21, Y+6	; 0x06
 464:	57 fd       	sbrc	r21, 7
 466:	0a c0       	rjmp	.+20     	; 0x47c <snprintf+0x58>
 468:	2f 81       	ldd	r18, Y+7	; 0x07
 46a:	38 85       	ldd	r19, Y+8	; 0x08
 46c:	42 17       	cp	r20, r18
 46e:	53 07       	cpc	r21, r19
 470:	0c f4       	brge	.+2      	; 0x474 <snprintf+0x50>
 472:	9a 01       	movw	r18, r20
 474:	f8 01       	movw	r30, r16
 476:	e2 0f       	add	r30, r18
 478:	f3 1f       	adc	r31, r19
 47a:	10 82       	st	Z, r1
 47c:	2e 96       	adiw	r28, 0x0e	; 14
 47e:	e4 e0       	ldi	r30, 0x04	; 4
 480:	0c 94 fd 04 	jmp	0x9fa	; 0x9fa <__epilogue_restores__+0x1c>

00000484 <vfprintf>:
 484:	ab e0       	ldi	r26, 0x0B	; 11
 486:	b0 e0       	ldi	r27, 0x00	; 0
 488:	e8 e4       	ldi	r30, 0x48	; 72
 48a:	f2 e0       	ldi	r31, 0x02	; 2
 48c:	0c 94 d3 04 	jmp	0x9a6	; 0x9a6 <__prologue_saves__>
 490:	6c 01       	movw	r12, r24
 492:	7b 01       	movw	r14, r22
 494:	8a 01       	movw	r16, r20
 496:	fc 01       	movw	r30, r24
 498:	17 82       	std	Z+7, r1	; 0x07
 49a:	16 82       	std	Z+6, r1	; 0x06
 49c:	83 81       	ldd	r24, Z+3	; 0x03
 49e:	81 ff       	sbrs	r24, 1
 4a0:	cc c1       	rjmp	.+920    	; 0x83a <__DATA_REGION_LENGTH__+0x3a>
 4a2:	ce 01       	movw	r24, r28
 4a4:	01 96       	adiw	r24, 0x01	; 1
 4a6:	3c 01       	movw	r6, r24
 4a8:	f6 01       	movw	r30, r12
 4aa:	93 81       	ldd	r25, Z+3	; 0x03
 4ac:	f7 01       	movw	r30, r14
 4ae:	93 fd       	sbrc	r25, 3
 4b0:	85 91       	lpm	r24, Z+
 4b2:	93 ff       	sbrs	r25, 3
 4b4:	81 91       	ld	r24, Z+
 4b6:	7f 01       	movw	r14, r30
 4b8:	88 23       	and	r24, r24
 4ba:	09 f4       	brne	.+2      	; 0x4be <vfprintf+0x3a>
 4bc:	ba c1       	rjmp	.+884    	; 0x832 <__DATA_REGION_LENGTH__+0x32>
 4be:	85 32       	cpi	r24, 0x25	; 37
 4c0:	39 f4       	brne	.+14     	; 0x4d0 <vfprintf+0x4c>
 4c2:	93 fd       	sbrc	r25, 3
 4c4:	85 91       	lpm	r24, Z+
 4c6:	93 ff       	sbrs	r25, 3
 4c8:	81 91       	ld	r24, Z+
 4ca:	7f 01       	movw	r14, r30
 4cc:	85 32       	cpi	r24, 0x25	; 37
 4ce:	29 f4       	brne	.+10     	; 0x4da <vfprintf+0x56>
 4d0:	b6 01       	movw	r22, r12
 4d2:	90 e0       	ldi	r25, 0x00	; 0
 4d4:	0e 94 39 04 	call	0x872	; 0x872 <fputc>
 4d8:	e7 cf       	rjmp	.-50     	; 0x4a8 <vfprintf+0x24>
 4da:	91 2c       	mov	r9, r1
 4dc:	21 2c       	mov	r2, r1
 4de:	31 2c       	mov	r3, r1
 4e0:	ff e1       	ldi	r31, 0x1F	; 31
 4e2:	f3 15       	cp	r31, r3
 4e4:	d8 f0       	brcs	.+54     	; 0x51c <vfprintf+0x98>
 4e6:	8b 32       	cpi	r24, 0x2B	; 43
 4e8:	79 f0       	breq	.+30     	; 0x508 <vfprintf+0x84>
 4ea:	38 f4       	brcc	.+14     	; 0x4fa <vfprintf+0x76>
 4ec:	80 32       	cpi	r24, 0x20	; 32
 4ee:	79 f0       	breq	.+30     	; 0x50e <vfprintf+0x8a>
 4f0:	83 32       	cpi	r24, 0x23	; 35
 4f2:	a1 f4       	brne	.+40     	; 0x51c <vfprintf+0x98>
 4f4:	23 2d       	mov	r18, r3
 4f6:	20 61       	ori	r18, 0x10	; 16
 4f8:	1d c0       	rjmp	.+58     	; 0x534 <vfprintf+0xb0>
 4fa:	8d 32       	cpi	r24, 0x2D	; 45
 4fc:	61 f0       	breq	.+24     	; 0x516 <vfprintf+0x92>
 4fe:	80 33       	cpi	r24, 0x30	; 48
 500:	69 f4       	brne	.+26     	; 0x51c <vfprintf+0x98>
 502:	23 2d       	mov	r18, r3
 504:	21 60       	ori	r18, 0x01	; 1
 506:	16 c0       	rjmp	.+44     	; 0x534 <vfprintf+0xb0>
 508:	83 2d       	mov	r24, r3
 50a:	82 60       	ori	r24, 0x02	; 2
 50c:	38 2e       	mov	r3, r24
 50e:	e3 2d       	mov	r30, r3
 510:	e4 60       	ori	r30, 0x04	; 4
 512:	3e 2e       	mov	r3, r30
 514:	2a c0       	rjmp	.+84     	; 0x56a <vfprintf+0xe6>
 516:	f3 2d       	mov	r31, r3
 518:	f8 60       	ori	r31, 0x08	; 8
 51a:	1d c0       	rjmp	.+58     	; 0x556 <vfprintf+0xd2>
 51c:	37 fc       	sbrc	r3, 7
 51e:	2d c0       	rjmp	.+90     	; 0x57a <vfprintf+0xf6>
 520:	20 ed       	ldi	r18, 0xD0	; 208
 522:	28 0f       	add	r18, r24
 524:	2a 30       	cpi	r18, 0x0A	; 10
 526:	40 f0       	brcs	.+16     	; 0x538 <vfprintf+0xb4>
 528:	8e 32       	cpi	r24, 0x2E	; 46
 52a:	b9 f4       	brne	.+46     	; 0x55a <vfprintf+0xd6>
 52c:	36 fc       	sbrc	r3, 6
 52e:	81 c1       	rjmp	.+770    	; 0x832 <__DATA_REGION_LENGTH__+0x32>
 530:	23 2d       	mov	r18, r3
 532:	20 64       	ori	r18, 0x40	; 64
 534:	32 2e       	mov	r3, r18
 536:	19 c0       	rjmp	.+50     	; 0x56a <vfprintf+0xe6>
 538:	36 fe       	sbrs	r3, 6
 53a:	06 c0       	rjmp	.+12     	; 0x548 <vfprintf+0xc4>
 53c:	8a e0       	ldi	r24, 0x0A	; 10
 53e:	98 9e       	mul	r9, r24
 540:	20 0d       	add	r18, r0
 542:	11 24       	eor	r1, r1
 544:	92 2e       	mov	r9, r18
 546:	11 c0       	rjmp	.+34     	; 0x56a <vfprintf+0xe6>
 548:	ea e0       	ldi	r30, 0x0A	; 10
 54a:	2e 9e       	mul	r2, r30
 54c:	20 0d       	add	r18, r0
 54e:	11 24       	eor	r1, r1
 550:	22 2e       	mov	r2, r18
 552:	f3 2d       	mov	r31, r3
 554:	f0 62       	ori	r31, 0x20	; 32
 556:	3f 2e       	mov	r3, r31
 558:	08 c0       	rjmp	.+16     	; 0x56a <vfprintf+0xe6>
 55a:	8c 36       	cpi	r24, 0x6C	; 108
 55c:	21 f4       	brne	.+8      	; 0x566 <vfprintf+0xe2>
 55e:	83 2d       	mov	r24, r3
 560:	80 68       	ori	r24, 0x80	; 128
 562:	38 2e       	mov	r3, r24
 564:	02 c0       	rjmp	.+4      	; 0x56a <vfprintf+0xe6>
 566:	88 36       	cpi	r24, 0x68	; 104
 568:	41 f4       	brne	.+16     	; 0x57a <vfprintf+0xf6>
 56a:	f7 01       	movw	r30, r14
 56c:	93 fd       	sbrc	r25, 3
 56e:	85 91       	lpm	r24, Z+
 570:	93 ff       	sbrs	r25, 3
 572:	81 91       	ld	r24, Z+
 574:	7f 01       	movw	r14, r30
 576:	81 11       	cpse	r24, r1
 578:	b3 cf       	rjmp	.-154    	; 0x4e0 <vfprintf+0x5c>
 57a:	98 2f       	mov	r25, r24
 57c:	9f 7d       	andi	r25, 0xDF	; 223
 57e:	95 54       	subi	r25, 0x45	; 69
 580:	93 30       	cpi	r25, 0x03	; 3
 582:	28 f4       	brcc	.+10     	; 0x58e <vfprintf+0x10a>
 584:	0c 5f       	subi	r16, 0xFC	; 252
 586:	1f 4f       	sbci	r17, 0xFF	; 255
 588:	9f e3       	ldi	r25, 0x3F	; 63
 58a:	99 83       	std	Y+1, r25	; 0x01
 58c:	0d c0       	rjmp	.+26     	; 0x5a8 <vfprintf+0x124>
 58e:	83 36       	cpi	r24, 0x63	; 99
 590:	31 f0       	breq	.+12     	; 0x59e <vfprintf+0x11a>
 592:	83 37       	cpi	r24, 0x73	; 115
 594:	71 f0       	breq	.+28     	; 0x5b2 <vfprintf+0x12e>
 596:	83 35       	cpi	r24, 0x53	; 83
 598:	09 f0       	breq	.+2      	; 0x59c <vfprintf+0x118>
 59a:	59 c0       	rjmp	.+178    	; 0x64e <vfprintf+0x1ca>
 59c:	21 c0       	rjmp	.+66     	; 0x5e0 <vfprintf+0x15c>
 59e:	f8 01       	movw	r30, r16
 5a0:	80 81       	ld	r24, Z
 5a2:	89 83       	std	Y+1, r24	; 0x01
 5a4:	0e 5f       	subi	r16, 0xFE	; 254
 5a6:	1f 4f       	sbci	r17, 0xFF	; 255
 5a8:	88 24       	eor	r8, r8
 5aa:	83 94       	inc	r8
 5ac:	91 2c       	mov	r9, r1
 5ae:	53 01       	movw	r10, r6
 5b0:	13 c0       	rjmp	.+38     	; 0x5d8 <vfprintf+0x154>
 5b2:	28 01       	movw	r4, r16
 5b4:	f2 e0       	ldi	r31, 0x02	; 2
 5b6:	4f 0e       	add	r4, r31
 5b8:	51 1c       	adc	r5, r1
 5ba:	f8 01       	movw	r30, r16
 5bc:	a0 80       	ld	r10, Z
 5be:	b1 80       	ldd	r11, Z+1	; 0x01
 5c0:	36 fe       	sbrs	r3, 6
 5c2:	03 c0       	rjmp	.+6      	; 0x5ca <vfprintf+0x146>
 5c4:	69 2d       	mov	r22, r9
 5c6:	70 e0       	ldi	r23, 0x00	; 0
 5c8:	02 c0       	rjmp	.+4      	; 0x5ce <vfprintf+0x14a>
 5ca:	6f ef       	ldi	r22, 0xFF	; 255
 5cc:	7f ef       	ldi	r23, 0xFF	; 255
 5ce:	c5 01       	movw	r24, r10
 5d0:	0e 94 2e 04 	call	0x85c	; 0x85c <strnlen>
 5d4:	4c 01       	movw	r8, r24
 5d6:	82 01       	movw	r16, r4
 5d8:	f3 2d       	mov	r31, r3
 5da:	ff 77       	andi	r31, 0x7F	; 127
 5dc:	3f 2e       	mov	r3, r31
 5de:	16 c0       	rjmp	.+44     	; 0x60c <vfprintf+0x188>
 5e0:	28 01       	movw	r4, r16
 5e2:	22 e0       	ldi	r18, 0x02	; 2
 5e4:	42 0e       	add	r4, r18
 5e6:	51 1c       	adc	r5, r1
 5e8:	f8 01       	movw	r30, r16
 5ea:	a0 80       	ld	r10, Z
 5ec:	b1 80       	ldd	r11, Z+1	; 0x01
 5ee:	36 fe       	sbrs	r3, 6
 5f0:	03 c0       	rjmp	.+6      	; 0x5f8 <vfprintf+0x174>
 5f2:	69 2d       	mov	r22, r9
 5f4:	70 e0       	ldi	r23, 0x00	; 0
 5f6:	02 c0       	rjmp	.+4      	; 0x5fc <vfprintf+0x178>
 5f8:	6f ef       	ldi	r22, 0xFF	; 255
 5fa:	7f ef       	ldi	r23, 0xFF	; 255
 5fc:	c5 01       	movw	r24, r10
 5fe:	0e 94 23 04 	call	0x846	; 0x846 <strnlen_P>
 602:	4c 01       	movw	r8, r24
 604:	f3 2d       	mov	r31, r3
 606:	f0 68       	ori	r31, 0x80	; 128
 608:	3f 2e       	mov	r3, r31
 60a:	82 01       	movw	r16, r4
 60c:	33 fc       	sbrc	r3, 3
 60e:	1b c0       	rjmp	.+54     	; 0x646 <vfprintf+0x1c2>
 610:	82 2d       	mov	r24, r2
 612:	90 e0       	ldi	r25, 0x00	; 0
 614:	88 16       	cp	r8, r24
 616:	99 06       	cpc	r9, r25
 618:	b0 f4       	brcc	.+44     	; 0x646 <vfprintf+0x1c2>
 61a:	b6 01       	movw	r22, r12
 61c:	80 e2       	ldi	r24, 0x20	; 32
 61e:	90 e0       	ldi	r25, 0x00	; 0
 620:	0e 94 39 04 	call	0x872	; 0x872 <fputc>
 624:	2a 94       	dec	r2
 626:	f4 cf       	rjmp	.-24     	; 0x610 <vfprintf+0x18c>
 628:	f5 01       	movw	r30, r10
 62a:	37 fc       	sbrc	r3, 7
 62c:	85 91       	lpm	r24, Z+
 62e:	37 fe       	sbrs	r3, 7
 630:	81 91       	ld	r24, Z+
 632:	5f 01       	movw	r10, r30
 634:	b6 01       	movw	r22, r12
 636:	90 e0       	ldi	r25, 0x00	; 0
 638:	0e 94 39 04 	call	0x872	; 0x872 <fputc>
 63c:	21 10       	cpse	r2, r1
 63e:	2a 94       	dec	r2
 640:	21 e0       	ldi	r18, 0x01	; 1
 642:	82 1a       	sub	r8, r18
 644:	91 08       	sbc	r9, r1
 646:	81 14       	cp	r8, r1
 648:	91 04       	cpc	r9, r1
 64a:	71 f7       	brne	.-36     	; 0x628 <vfprintf+0x1a4>
 64c:	e8 c0       	rjmp	.+464    	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
 64e:	84 36       	cpi	r24, 0x64	; 100
 650:	11 f0       	breq	.+4      	; 0x656 <vfprintf+0x1d2>
 652:	89 36       	cpi	r24, 0x69	; 105
 654:	41 f5       	brne	.+80     	; 0x6a6 <vfprintf+0x222>
 656:	f8 01       	movw	r30, r16
 658:	37 fe       	sbrs	r3, 7
 65a:	07 c0       	rjmp	.+14     	; 0x66a <vfprintf+0x1e6>
 65c:	60 81       	ld	r22, Z
 65e:	71 81       	ldd	r23, Z+1	; 0x01
 660:	82 81       	ldd	r24, Z+2	; 0x02
 662:	93 81       	ldd	r25, Z+3	; 0x03
 664:	0c 5f       	subi	r16, 0xFC	; 252
 666:	1f 4f       	sbci	r17, 0xFF	; 255
 668:	08 c0       	rjmp	.+16     	; 0x67a <vfprintf+0x1f6>
 66a:	60 81       	ld	r22, Z
 66c:	71 81       	ldd	r23, Z+1	; 0x01
 66e:	07 2e       	mov	r0, r23
 670:	00 0c       	add	r0, r0
 672:	88 0b       	sbc	r24, r24
 674:	99 0b       	sbc	r25, r25
 676:	0e 5f       	subi	r16, 0xFE	; 254
 678:	1f 4f       	sbci	r17, 0xFF	; 255
 67a:	f3 2d       	mov	r31, r3
 67c:	ff 76       	andi	r31, 0x6F	; 111
 67e:	3f 2e       	mov	r3, r31
 680:	97 ff       	sbrs	r25, 7
 682:	09 c0       	rjmp	.+18     	; 0x696 <vfprintf+0x212>
 684:	90 95       	com	r25
 686:	80 95       	com	r24
 688:	70 95       	com	r23
 68a:	61 95       	neg	r22
 68c:	7f 4f       	sbci	r23, 0xFF	; 255
 68e:	8f 4f       	sbci	r24, 0xFF	; 255
 690:	9f 4f       	sbci	r25, 0xFF	; 255
 692:	f0 68       	ori	r31, 0x80	; 128
 694:	3f 2e       	mov	r3, r31
 696:	2a e0       	ldi	r18, 0x0A	; 10
 698:	30 e0       	ldi	r19, 0x00	; 0
 69a:	a3 01       	movw	r20, r6
 69c:	0e 94 75 04 	call	0x8ea	; 0x8ea <__ultoa_invert>
 6a0:	88 2e       	mov	r8, r24
 6a2:	86 18       	sub	r8, r6
 6a4:	45 c0       	rjmp	.+138    	; 0x730 <vfprintf+0x2ac>
 6a6:	85 37       	cpi	r24, 0x75	; 117
 6a8:	31 f4       	brne	.+12     	; 0x6b6 <vfprintf+0x232>
 6aa:	23 2d       	mov	r18, r3
 6ac:	2f 7e       	andi	r18, 0xEF	; 239
 6ae:	b2 2e       	mov	r11, r18
 6b0:	2a e0       	ldi	r18, 0x0A	; 10
 6b2:	30 e0       	ldi	r19, 0x00	; 0
 6b4:	25 c0       	rjmp	.+74     	; 0x700 <vfprintf+0x27c>
 6b6:	93 2d       	mov	r25, r3
 6b8:	99 7f       	andi	r25, 0xF9	; 249
 6ba:	b9 2e       	mov	r11, r25
 6bc:	8f 36       	cpi	r24, 0x6F	; 111
 6be:	c1 f0       	breq	.+48     	; 0x6f0 <vfprintf+0x26c>
 6c0:	18 f4       	brcc	.+6      	; 0x6c8 <vfprintf+0x244>
 6c2:	88 35       	cpi	r24, 0x58	; 88
 6c4:	79 f0       	breq	.+30     	; 0x6e4 <vfprintf+0x260>
 6c6:	b5 c0       	rjmp	.+362    	; 0x832 <__DATA_REGION_LENGTH__+0x32>
 6c8:	80 37       	cpi	r24, 0x70	; 112
 6ca:	19 f0       	breq	.+6      	; 0x6d2 <vfprintf+0x24e>
 6cc:	88 37       	cpi	r24, 0x78	; 120
 6ce:	21 f0       	breq	.+8      	; 0x6d8 <vfprintf+0x254>
 6d0:	b0 c0       	rjmp	.+352    	; 0x832 <__DATA_REGION_LENGTH__+0x32>
 6d2:	e9 2f       	mov	r30, r25
 6d4:	e0 61       	ori	r30, 0x10	; 16
 6d6:	be 2e       	mov	r11, r30
 6d8:	b4 fe       	sbrs	r11, 4
 6da:	0d c0       	rjmp	.+26     	; 0x6f6 <vfprintf+0x272>
 6dc:	fb 2d       	mov	r31, r11
 6de:	f4 60       	ori	r31, 0x04	; 4
 6e0:	bf 2e       	mov	r11, r31
 6e2:	09 c0       	rjmp	.+18     	; 0x6f6 <vfprintf+0x272>
 6e4:	34 fe       	sbrs	r3, 4
 6e6:	0a c0       	rjmp	.+20     	; 0x6fc <vfprintf+0x278>
 6e8:	29 2f       	mov	r18, r25
 6ea:	26 60       	ori	r18, 0x06	; 6
 6ec:	b2 2e       	mov	r11, r18
 6ee:	06 c0       	rjmp	.+12     	; 0x6fc <vfprintf+0x278>
 6f0:	28 e0       	ldi	r18, 0x08	; 8
 6f2:	30 e0       	ldi	r19, 0x00	; 0
 6f4:	05 c0       	rjmp	.+10     	; 0x700 <vfprintf+0x27c>
 6f6:	20 e1       	ldi	r18, 0x10	; 16
 6f8:	30 e0       	ldi	r19, 0x00	; 0
 6fa:	02 c0       	rjmp	.+4      	; 0x700 <vfprintf+0x27c>
 6fc:	20 e1       	ldi	r18, 0x10	; 16
 6fe:	32 e0       	ldi	r19, 0x02	; 2
 700:	f8 01       	movw	r30, r16
 702:	b7 fe       	sbrs	r11, 7
 704:	07 c0       	rjmp	.+14     	; 0x714 <vfprintf+0x290>
 706:	60 81       	ld	r22, Z
 708:	71 81       	ldd	r23, Z+1	; 0x01
 70a:	82 81       	ldd	r24, Z+2	; 0x02
 70c:	93 81       	ldd	r25, Z+3	; 0x03
 70e:	0c 5f       	subi	r16, 0xFC	; 252
 710:	1f 4f       	sbci	r17, 0xFF	; 255
 712:	06 c0       	rjmp	.+12     	; 0x720 <vfprintf+0x29c>
 714:	60 81       	ld	r22, Z
 716:	71 81       	ldd	r23, Z+1	; 0x01
 718:	80 e0       	ldi	r24, 0x00	; 0
 71a:	90 e0       	ldi	r25, 0x00	; 0
 71c:	0e 5f       	subi	r16, 0xFE	; 254
 71e:	1f 4f       	sbci	r17, 0xFF	; 255
 720:	a3 01       	movw	r20, r6
 722:	0e 94 75 04 	call	0x8ea	; 0x8ea <__ultoa_invert>
 726:	88 2e       	mov	r8, r24
 728:	86 18       	sub	r8, r6
 72a:	fb 2d       	mov	r31, r11
 72c:	ff 77       	andi	r31, 0x7F	; 127
 72e:	3f 2e       	mov	r3, r31
 730:	36 fe       	sbrs	r3, 6
 732:	0d c0       	rjmp	.+26     	; 0x74e <vfprintf+0x2ca>
 734:	23 2d       	mov	r18, r3
 736:	2e 7f       	andi	r18, 0xFE	; 254
 738:	a2 2e       	mov	r10, r18
 73a:	89 14       	cp	r8, r9
 73c:	58 f4       	brcc	.+22     	; 0x754 <vfprintf+0x2d0>
 73e:	34 fe       	sbrs	r3, 4
 740:	0b c0       	rjmp	.+22     	; 0x758 <vfprintf+0x2d4>
 742:	32 fc       	sbrc	r3, 2
 744:	09 c0       	rjmp	.+18     	; 0x758 <vfprintf+0x2d4>
 746:	83 2d       	mov	r24, r3
 748:	8e 7e       	andi	r24, 0xEE	; 238
 74a:	a8 2e       	mov	r10, r24
 74c:	05 c0       	rjmp	.+10     	; 0x758 <vfprintf+0x2d4>
 74e:	b8 2c       	mov	r11, r8
 750:	a3 2c       	mov	r10, r3
 752:	03 c0       	rjmp	.+6      	; 0x75a <vfprintf+0x2d6>
 754:	b8 2c       	mov	r11, r8
 756:	01 c0       	rjmp	.+2      	; 0x75a <vfprintf+0x2d6>
 758:	b9 2c       	mov	r11, r9
 75a:	a4 fe       	sbrs	r10, 4
 75c:	0f c0       	rjmp	.+30     	; 0x77c <vfprintf+0x2f8>
 75e:	fe 01       	movw	r30, r28
 760:	e8 0d       	add	r30, r8
 762:	f1 1d       	adc	r31, r1
 764:	80 81       	ld	r24, Z
 766:	80 33       	cpi	r24, 0x30	; 48
 768:	21 f4       	brne	.+8      	; 0x772 <vfprintf+0x2ee>
 76a:	9a 2d       	mov	r25, r10
 76c:	99 7e       	andi	r25, 0xE9	; 233
 76e:	a9 2e       	mov	r10, r25
 770:	09 c0       	rjmp	.+18     	; 0x784 <vfprintf+0x300>
 772:	a2 fe       	sbrs	r10, 2
 774:	06 c0       	rjmp	.+12     	; 0x782 <vfprintf+0x2fe>
 776:	b3 94       	inc	r11
 778:	b3 94       	inc	r11
 77a:	04 c0       	rjmp	.+8      	; 0x784 <vfprintf+0x300>
 77c:	8a 2d       	mov	r24, r10
 77e:	86 78       	andi	r24, 0x86	; 134
 780:	09 f0       	breq	.+2      	; 0x784 <vfprintf+0x300>
 782:	b3 94       	inc	r11
 784:	a3 fc       	sbrc	r10, 3
 786:	11 c0       	rjmp	.+34     	; 0x7aa <vfprintf+0x326>
 788:	a0 fe       	sbrs	r10, 0
 78a:	06 c0       	rjmp	.+12     	; 0x798 <vfprintf+0x314>
 78c:	b2 14       	cp	r11, r2
 78e:	88 f4       	brcc	.+34     	; 0x7b2 <vfprintf+0x32e>
 790:	28 0c       	add	r2, r8
 792:	92 2c       	mov	r9, r2
 794:	9b 18       	sub	r9, r11
 796:	0e c0       	rjmp	.+28     	; 0x7b4 <vfprintf+0x330>
 798:	b2 14       	cp	r11, r2
 79a:	60 f4       	brcc	.+24     	; 0x7b4 <vfprintf+0x330>
 79c:	b6 01       	movw	r22, r12
 79e:	80 e2       	ldi	r24, 0x20	; 32
 7a0:	90 e0       	ldi	r25, 0x00	; 0
 7a2:	0e 94 39 04 	call	0x872	; 0x872 <fputc>
 7a6:	b3 94       	inc	r11
 7a8:	f7 cf       	rjmp	.-18     	; 0x798 <vfprintf+0x314>
 7aa:	b2 14       	cp	r11, r2
 7ac:	18 f4       	brcc	.+6      	; 0x7b4 <vfprintf+0x330>
 7ae:	2b 18       	sub	r2, r11
 7b0:	02 c0       	rjmp	.+4      	; 0x7b6 <vfprintf+0x332>
 7b2:	98 2c       	mov	r9, r8
 7b4:	21 2c       	mov	r2, r1
 7b6:	a4 fe       	sbrs	r10, 4
 7b8:	10 c0       	rjmp	.+32     	; 0x7da <vfprintf+0x356>
 7ba:	b6 01       	movw	r22, r12
 7bc:	80 e3       	ldi	r24, 0x30	; 48
 7be:	90 e0       	ldi	r25, 0x00	; 0
 7c0:	0e 94 39 04 	call	0x872	; 0x872 <fputc>
 7c4:	a2 fe       	sbrs	r10, 2
 7c6:	17 c0       	rjmp	.+46     	; 0x7f6 <vfprintf+0x372>
 7c8:	a1 fc       	sbrc	r10, 1
 7ca:	03 c0       	rjmp	.+6      	; 0x7d2 <vfprintf+0x34e>
 7cc:	88 e7       	ldi	r24, 0x78	; 120
 7ce:	90 e0       	ldi	r25, 0x00	; 0
 7d0:	02 c0       	rjmp	.+4      	; 0x7d6 <vfprintf+0x352>
 7d2:	88 e5       	ldi	r24, 0x58	; 88
 7d4:	90 e0       	ldi	r25, 0x00	; 0
 7d6:	b6 01       	movw	r22, r12
 7d8:	0c c0       	rjmp	.+24     	; 0x7f2 <vfprintf+0x36e>
 7da:	8a 2d       	mov	r24, r10
 7dc:	86 78       	andi	r24, 0x86	; 134
 7de:	59 f0       	breq	.+22     	; 0x7f6 <vfprintf+0x372>
 7e0:	a1 fe       	sbrs	r10, 1
 7e2:	02 c0       	rjmp	.+4      	; 0x7e8 <vfprintf+0x364>
 7e4:	8b e2       	ldi	r24, 0x2B	; 43
 7e6:	01 c0       	rjmp	.+2      	; 0x7ea <vfprintf+0x366>
 7e8:	80 e2       	ldi	r24, 0x20	; 32
 7ea:	a7 fc       	sbrc	r10, 7
 7ec:	8d e2       	ldi	r24, 0x2D	; 45
 7ee:	b6 01       	movw	r22, r12
 7f0:	90 e0       	ldi	r25, 0x00	; 0
 7f2:	0e 94 39 04 	call	0x872	; 0x872 <fputc>
 7f6:	89 14       	cp	r8, r9
 7f8:	38 f4       	brcc	.+14     	; 0x808 <__DATA_REGION_LENGTH__+0x8>
 7fa:	b6 01       	movw	r22, r12
 7fc:	80 e3       	ldi	r24, 0x30	; 48
 7fe:	90 e0       	ldi	r25, 0x00	; 0
 800:	0e 94 39 04 	call	0x872	; 0x872 <fputc>
 804:	9a 94       	dec	r9
 806:	f7 cf       	rjmp	.-18     	; 0x7f6 <vfprintf+0x372>
 808:	8a 94       	dec	r8
 80a:	f3 01       	movw	r30, r6
 80c:	e8 0d       	add	r30, r8
 80e:	f1 1d       	adc	r31, r1
 810:	80 81       	ld	r24, Z
 812:	b6 01       	movw	r22, r12
 814:	90 e0       	ldi	r25, 0x00	; 0
 816:	0e 94 39 04 	call	0x872	; 0x872 <fputc>
 81a:	81 10       	cpse	r8, r1
 81c:	f5 cf       	rjmp	.-22     	; 0x808 <__DATA_REGION_LENGTH__+0x8>
 81e:	22 20       	and	r2, r2
 820:	09 f4       	brne	.+2      	; 0x824 <__DATA_REGION_LENGTH__+0x24>
 822:	42 ce       	rjmp	.-892    	; 0x4a8 <vfprintf+0x24>
 824:	b6 01       	movw	r22, r12
 826:	80 e2       	ldi	r24, 0x20	; 32
 828:	90 e0       	ldi	r25, 0x00	; 0
 82a:	0e 94 39 04 	call	0x872	; 0x872 <fputc>
 82e:	2a 94       	dec	r2
 830:	f6 cf       	rjmp	.-20     	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
 832:	f6 01       	movw	r30, r12
 834:	86 81       	ldd	r24, Z+6	; 0x06
 836:	97 81       	ldd	r25, Z+7	; 0x07
 838:	02 c0       	rjmp	.+4      	; 0x83e <__DATA_REGION_LENGTH__+0x3e>
 83a:	8f ef       	ldi	r24, 0xFF	; 255
 83c:	9f ef       	ldi	r25, 0xFF	; 255
 83e:	2b 96       	adiw	r28, 0x0b	; 11
 840:	e2 e1       	ldi	r30, 0x12	; 18
 842:	0c 94 ef 04 	jmp	0x9de	; 0x9de <__epilogue_restores__>

00000846 <strnlen_P>:
 846:	fc 01       	movw	r30, r24
 848:	05 90       	lpm	r0, Z+
 84a:	61 50       	subi	r22, 0x01	; 1
 84c:	70 40       	sbci	r23, 0x00	; 0
 84e:	01 10       	cpse	r0, r1
 850:	d8 f7       	brcc	.-10     	; 0x848 <strnlen_P+0x2>
 852:	80 95       	com	r24
 854:	90 95       	com	r25
 856:	8e 0f       	add	r24, r30
 858:	9f 1f       	adc	r25, r31
 85a:	08 95       	ret

0000085c <strnlen>:
 85c:	fc 01       	movw	r30, r24
 85e:	61 50       	subi	r22, 0x01	; 1
 860:	70 40       	sbci	r23, 0x00	; 0
 862:	01 90       	ld	r0, Z+
 864:	01 10       	cpse	r0, r1
 866:	d8 f7       	brcc	.-10     	; 0x85e <strnlen+0x2>
 868:	80 95       	com	r24
 86a:	90 95       	com	r25
 86c:	8e 0f       	add	r24, r30
 86e:	9f 1f       	adc	r25, r31
 870:	08 95       	ret

00000872 <fputc>:
 872:	0f 93       	push	r16
 874:	1f 93       	push	r17
 876:	cf 93       	push	r28
 878:	df 93       	push	r29
 87a:	fb 01       	movw	r30, r22
 87c:	23 81       	ldd	r18, Z+3	; 0x03
 87e:	21 fd       	sbrc	r18, 1
 880:	03 c0       	rjmp	.+6      	; 0x888 <fputc+0x16>
 882:	8f ef       	ldi	r24, 0xFF	; 255
 884:	9f ef       	ldi	r25, 0xFF	; 255
 886:	2c c0       	rjmp	.+88     	; 0x8e0 <fputc+0x6e>
 888:	22 ff       	sbrs	r18, 2
 88a:	16 c0       	rjmp	.+44     	; 0x8b8 <fputc+0x46>
 88c:	46 81       	ldd	r20, Z+6	; 0x06
 88e:	57 81       	ldd	r21, Z+7	; 0x07
 890:	24 81       	ldd	r18, Z+4	; 0x04
 892:	35 81       	ldd	r19, Z+5	; 0x05
 894:	42 17       	cp	r20, r18
 896:	53 07       	cpc	r21, r19
 898:	44 f4       	brge	.+16     	; 0x8aa <fputc+0x38>
 89a:	a0 81       	ld	r26, Z
 89c:	b1 81       	ldd	r27, Z+1	; 0x01
 89e:	9d 01       	movw	r18, r26
 8a0:	2f 5f       	subi	r18, 0xFF	; 255
 8a2:	3f 4f       	sbci	r19, 0xFF	; 255
 8a4:	31 83       	std	Z+1, r19	; 0x01
 8a6:	20 83       	st	Z, r18
 8a8:	8c 93       	st	X, r24
 8aa:	26 81       	ldd	r18, Z+6	; 0x06
 8ac:	37 81       	ldd	r19, Z+7	; 0x07
 8ae:	2f 5f       	subi	r18, 0xFF	; 255
 8b0:	3f 4f       	sbci	r19, 0xFF	; 255
 8b2:	37 83       	std	Z+7, r19	; 0x07
 8b4:	26 83       	std	Z+6, r18	; 0x06
 8b6:	14 c0       	rjmp	.+40     	; 0x8e0 <fputc+0x6e>
 8b8:	8b 01       	movw	r16, r22
 8ba:	ec 01       	movw	r28, r24
 8bc:	fb 01       	movw	r30, r22
 8be:	00 84       	ldd	r0, Z+8	; 0x08
 8c0:	f1 85       	ldd	r31, Z+9	; 0x09
 8c2:	e0 2d       	mov	r30, r0
 8c4:	09 95       	icall
 8c6:	89 2b       	or	r24, r25
 8c8:	e1 f6       	brne	.-72     	; 0x882 <fputc+0x10>
 8ca:	d8 01       	movw	r26, r16
 8cc:	16 96       	adiw	r26, 0x06	; 6
 8ce:	8d 91       	ld	r24, X+
 8d0:	9c 91       	ld	r25, X
 8d2:	17 97       	sbiw	r26, 0x07	; 7
 8d4:	01 96       	adiw	r24, 0x01	; 1
 8d6:	17 96       	adiw	r26, 0x07	; 7
 8d8:	9c 93       	st	X, r25
 8da:	8e 93       	st	-X, r24
 8dc:	16 97       	sbiw	r26, 0x06	; 6
 8de:	ce 01       	movw	r24, r28
 8e0:	df 91       	pop	r29
 8e2:	cf 91       	pop	r28
 8e4:	1f 91       	pop	r17
 8e6:	0f 91       	pop	r16
 8e8:	08 95       	ret

000008ea <__ultoa_invert>:
 8ea:	fa 01       	movw	r30, r20
 8ec:	aa 27       	eor	r26, r26
 8ee:	28 30       	cpi	r18, 0x08	; 8
 8f0:	51 f1       	breq	.+84     	; 0x946 <__stack+0x47>
 8f2:	20 31       	cpi	r18, 0x10	; 16
 8f4:	81 f1       	breq	.+96     	; 0x956 <__stack+0x57>
 8f6:	e8 94       	clt
 8f8:	6f 93       	push	r22
 8fa:	6e 7f       	andi	r22, 0xFE	; 254
 8fc:	6e 5f       	subi	r22, 0xFE	; 254
 8fe:	7f 4f       	sbci	r23, 0xFF	; 255
 900:	8f 4f       	sbci	r24, 0xFF	; 255
 902:	9f 4f       	sbci	r25, 0xFF	; 255
 904:	af 4f       	sbci	r26, 0xFF	; 255
 906:	b1 e0       	ldi	r27, 0x01	; 1
 908:	3e d0       	rcall	.+124    	; 0x986 <__stack+0x87>
 90a:	b4 e0       	ldi	r27, 0x04	; 4
 90c:	3c d0       	rcall	.+120    	; 0x986 <__stack+0x87>
 90e:	67 0f       	add	r22, r23
 910:	78 1f       	adc	r23, r24
 912:	89 1f       	adc	r24, r25
 914:	9a 1f       	adc	r25, r26
 916:	a1 1d       	adc	r26, r1
 918:	68 0f       	add	r22, r24
 91a:	79 1f       	adc	r23, r25
 91c:	8a 1f       	adc	r24, r26
 91e:	91 1d       	adc	r25, r1
 920:	a1 1d       	adc	r26, r1
 922:	6a 0f       	add	r22, r26
 924:	71 1d       	adc	r23, r1
 926:	81 1d       	adc	r24, r1
 928:	91 1d       	adc	r25, r1
 92a:	a1 1d       	adc	r26, r1
 92c:	20 d0       	rcall	.+64     	; 0x96e <__stack+0x6f>
 92e:	09 f4       	brne	.+2      	; 0x932 <__stack+0x33>
 930:	68 94       	set
 932:	3f 91       	pop	r19
 934:	2a e0       	ldi	r18, 0x0A	; 10
 936:	26 9f       	mul	r18, r22
 938:	11 24       	eor	r1, r1
 93a:	30 19       	sub	r19, r0
 93c:	30 5d       	subi	r19, 0xD0	; 208
 93e:	31 93       	st	Z+, r19
 940:	de f6       	brtc	.-74     	; 0x8f8 <__ultoa_invert+0xe>
 942:	cf 01       	movw	r24, r30
 944:	08 95       	ret
 946:	46 2f       	mov	r20, r22
 948:	47 70       	andi	r20, 0x07	; 7
 94a:	40 5d       	subi	r20, 0xD0	; 208
 94c:	41 93       	st	Z+, r20
 94e:	b3 e0       	ldi	r27, 0x03	; 3
 950:	0f d0       	rcall	.+30     	; 0x970 <__stack+0x71>
 952:	c9 f7       	brne	.-14     	; 0x946 <__stack+0x47>
 954:	f6 cf       	rjmp	.-20     	; 0x942 <__stack+0x43>
 956:	46 2f       	mov	r20, r22
 958:	4f 70       	andi	r20, 0x0F	; 15
 95a:	40 5d       	subi	r20, 0xD0	; 208
 95c:	4a 33       	cpi	r20, 0x3A	; 58
 95e:	18 f0       	brcs	.+6      	; 0x966 <__stack+0x67>
 960:	49 5d       	subi	r20, 0xD9	; 217
 962:	31 fd       	sbrc	r19, 1
 964:	40 52       	subi	r20, 0x20	; 32
 966:	41 93       	st	Z+, r20
 968:	02 d0       	rcall	.+4      	; 0x96e <__stack+0x6f>
 96a:	a9 f7       	brne	.-22     	; 0x956 <__stack+0x57>
 96c:	ea cf       	rjmp	.-44     	; 0x942 <__stack+0x43>
 96e:	b4 e0       	ldi	r27, 0x04	; 4
 970:	a6 95       	lsr	r26
 972:	97 95       	ror	r25
 974:	87 95       	ror	r24
 976:	77 95       	ror	r23
 978:	67 95       	ror	r22
 97a:	ba 95       	dec	r27
 97c:	c9 f7       	brne	.-14     	; 0x970 <__stack+0x71>
 97e:	00 97       	sbiw	r24, 0x00	; 0
 980:	61 05       	cpc	r22, r1
 982:	71 05       	cpc	r23, r1
 984:	08 95       	ret
 986:	9b 01       	movw	r18, r22
 988:	ac 01       	movw	r20, r24
 98a:	0a 2e       	mov	r0, r26
 98c:	06 94       	lsr	r0
 98e:	57 95       	ror	r21
 990:	47 95       	ror	r20
 992:	37 95       	ror	r19
 994:	27 95       	ror	r18
 996:	ba 95       	dec	r27
 998:	c9 f7       	brne	.-14     	; 0x98c <__stack+0x8d>
 99a:	62 0f       	add	r22, r18
 99c:	73 1f       	adc	r23, r19
 99e:	84 1f       	adc	r24, r20
 9a0:	95 1f       	adc	r25, r21
 9a2:	a0 1d       	adc	r26, r0
 9a4:	08 95       	ret

000009a6 <__prologue_saves__>:
 9a6:	2f 92       	push	r2
 9a8:	3f 92       	push	r3
 9aa:	4f 92       	push	r4
 9ac:	5f 92       	push	r5
 9ae:	6f 92       	push	r6
 9b0:	7f 92       	push	r7
 9b2:	8f 92       	push	r8
 9b4:	9f 92       	push	r9
 9b6:	af 92       	push	r10
 9b8:	bf 92       	push	r11
 9ba:	cf 92       	push	r12
 9bc:	df 92       	push	r13
 9be:	ef 92       	push	r14
 9c0:	ff 92       	push	r15
 9c2:	0f 93       	push	r16
 9c4:	1f 93       	push	r17
 9c6:	cf 93       	push	r28
 9c8:	df 93       	push	r29
 9ca:	cd b7       	in	r28, 0x3d	; 61
 9cc:	de b7       	in	r29, 0x3e	; 62
 9ce:	ca 1b       	sub	r28, r26
 9d0:	db 0b       	sbc	r29, r27
 9d2:	0f b6       	in	r0, 0x3f	; 63
 9d4:	f8 94       	cli
 9d6:	de bf       	out	0x3e, r29	; 62
 9d8:	0f be       	out	0x3f, r0	; 63
 9da:	cd bf       	out	0x3d, r28	; 61
 9dc:	09 94       	ijmp

000009de <__epilogue_restores__>:
 9de:	2a 88       	ldd	r2, Y+18	; 0x12
 9e0:	39 88       	ldd	r3, Y+17	; 0x11
 9e2:	48 88       	ldd	r4, Y+16	; 0x10
 9e4:	5f 84       	ldd	r5, Y+15	; 0x0f
 9e6:	6e 84       	ldd	r6, Y+14	; 0x0e
 9e8:	7d 84       	ldd	r7, Y+13	; 0x0d
 9ea:	8c 84       	ldd	r8, Y+12	; 0x0c
 9ec:	9b 84       	ldd	r9, Y+11	; 0x0b
 9ee:	aa 84       	ldd	r10, Y+10	; 0x0a
 9f0:	b9 84       	ldd	r11, Y+9	; 0x09
 9f2:	c8 84       	ldd	r12, Y+8	; 0x08
 9f4:	df 80       	ldd	r13, Y+7	; 0x07
 9f6:	ee 80       	ldd	r14, Y+6	; 0x06
 9f8:	fd 80       	ldd	r15, Y+5	; 0x05
 9fa:	0c 81       	ldd	r16, Y+4	; 0x04
 9fc:	1b 81       	ldd	r17, Y+3	; 0x03
 9fe:	aa 81       	ldd	r26, Y+2	; 0x02
 a00:	b9 81       	ldd	r27, Y+1	; 0x01
 a02:	ce 0f       	add	r28, r30
 a04:	d1 1d       	adc	r29, r1
 a06:	0f b6       	in	r0, 0x3f	; 63
 a08:	f8 94       	cli
 a0a:	de bf       	out	0x3e, r29	; 62
 a0c:	0f be       	out	0x3f, r0	; 63
 a0e:	cd bf       	out	0x3d, r28	; 61
 a10:	ed 01       	movw	r28, r26
 a12:	08 95       	ret

00000a14 <_exit>:
 a14:	f8 94       	cli

00000a16 <__stop_program>:
 a16:	ff cf       	rjmp	.-2      	; 0xa16 <__stop_program>
