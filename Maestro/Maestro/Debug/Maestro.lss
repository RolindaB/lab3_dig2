
Maestro.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000008c  00800100  00000a7a  00000b0e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a7a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000098  0080018c  0080018c  00000b9a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000b9a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000bf8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  00000c38  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000fe2  00000000  00000000  00000cf8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000992  00000000  00000000  00001cda  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000736  00000000  00000000  0000266c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000198  00000000  00000000  00002da4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000647  00000000  00000000  00002f3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000052d  00000000  00000000  00003583  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  00003ab0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3b 00 	jmp	0x76	; 0x76 <__ctors_end>
   4:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   8:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  10:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  14:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  18:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  1c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  20:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  24:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  28:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  2c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  30:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  34:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  38:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  3c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  40:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  44:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  48:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__vector_18>
  4c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  50:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  54:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  58:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  5c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  60:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  64:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  68:	6d 01       	movw	r12, r26
  6a:	74 01       	movw	r14, r8
  6c:	7b 01       	movw	r14, r22
  6e:	85 01       	movw	r16, r10
  70:	8f 01       	movw	r16, r30
  72:	99 01       	movw	r18, r18
  74:	a3 01       	movw	r20, r6

00000076 <__ctors_end>:
  76:	11 24       	eor	r1, r1
  78:	1f be       	out	0x3f, r1	; 63
  7a:	cf ef       	ldi	r28, 0xFF	; 255
  7c:	d8 e0       	ldi	r29, 0x08	; 8
  7e:	de bf       	out	0x3e, r29	; 62
  80:	cd bf       	out	0x3d, r28	; 61

00000082 <__do_copy_data>:
  82:	11 e0       	ldi	r17, 0x01	; 1
  84:	a0 e0       	ldi	r26, 0x00	; 0
  86:	b1 e0       	ldi	r27, 0x01	; 1
  88:	ea e7       	ldi	r30, 0x7A	; 122
  8a:	fa e0       	ldi	r31, 0x0A	; 10
  8c:	02 c0       	rjmp	.+4      	; 0x92 <__do_copy_data+0x10>
  8e:	05 90       	lpm	r0, Z+
  90:	0d 92       	st	X+, r0
  92:	ac 38       	cpi	r26, 0x8C	; 140
  94:	b1 07       	cpc	r27, r17
  96:	d9 f7       	brne	.-10     	; 0x8e <__do_copy_data+0xc>

00000098 <__do_clear_bss>:
  98:	22 e0       	ldi	r18, 0x02	; 2
  9a:	ac e8       	ldi	r26, 0x8C	; 140
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a4 32       	cpi	r26, 0x24	; 36
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	0e 94 16 01 	call	0x22c	; 0x22c <main>
  ac:	0c 94 3b 05 	jmp	0xa76	; 0xa76 <_exit>

000000b0 <__bad_interrupt>:
  b0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b4 <setUp>:
void enviarValoresUART();
void IntCont();
void lecturaADC();

void setUp() {
	DDRD |= (1<<DDD2)|(1<<DDD3)|(1<<DDD4)|(1<<DDD5)|(1<<DDD6)|(1<<DDD7);
  b4:	8a b1       	in	r24, 0x0a	; 10
  b6:	8c 6f       	ori	r24, 0xFC	; 252
  b8:	8a b9       	out	0x0a, r24	; 10
	PORTD &= ~((1<<PORTD2)|(1<<PORTD3)|(1<<PORTD4)|(1<<PORTD5)|(1<<PORTD6)|(1<<PORTD7));
  ba:	8b b1       	in	r24, 0x0b	; 11
  bc:	83 70       	andi	r24, 0x03	; 3
  be:	8b b9       	out	0x0b, r24	; 11
	PORTC |= (1<<PORTC5)|(1<<PORTC6);
  c0:	88 b1       	in	r24, 0x08	; 8
  c2:	80 66       	ori	r24, 0x60	; 96
  c4:	88 b9       	out	0x08, r24	; 8
	PORTC &= ~((1<<PORTC5)|(1<<PORTC6));
  c6:	88 b1       	in	r24, 0x08	; 8
  c8:	8f 79       	andi	r24, 0x9F	; 159
  ca:	88 b9       	out	0x08, r24	; 8
	SpiInit(SPI_MASTER_OSC_DIV128, SPI_DATA_ORDER_MSB, SPI_CLOCK_IDLE_LOW, SPI_CLOK_FIRST_EDGE);
  cc:	20 e0       	ldi	r18, 0x00	; 0
  ce:	40 e0       	ldi	r20, 0x00	; 0
  d0:	60 e0       	ldi	r22, 0x00	; 0
  d2:	86 e5       	ldi	r24, 0x56	; 86
  d4:	0e 94 55 01 	call	0x2aa	; 0x2aa <SpiInit>
	UART_init(9600); // Asegúrate de inicializar UART
  d8:	80 e8       	ldi	r24, 0x80	; 128
  da:	95 e2       	ldi	r25, 0x25	; 37
  dc:	0e 94 c1 01 	call	0x382	; 0x382 <UART_init>
  e0:	08 95       	ret

000000e2 <enviarValoresUART>:
}

void enviarValoresUART() {
  e2:	1f 93       	push	r17
  e4:	cf 93       	push	r28
  e6:	df 93       	push	r29
	valorSpi2b = (int)(valorSpi2);
  e8:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <valorSpi2>
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	90 93 21 02 	sts	0x0221, r25	; 0x800221 <valorSpi2b+0x1>
  f2:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <valorSpi2b>
	valorSpi1b = (int)(valorSpi1);
  f6:	80 91 8f 01 	lds	r24, 0x018F	; 0x80018f <valorSpi1>
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	90 93 23 02 	sts	0x0223, r25	; 0x800223 <valorSpi1b+0x1>
 100:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <valorSpi1b>
	UART_send_string("\n");
 104:	89 e0       	ldi	r24, 0x09	; 9
 106:	91 e0       	ldi	r25, 0x01	; 1
 108:	0e 94 ef 01 	call	0x3de	; 0x3de <UART_send_string>
	snprintf(buffer, sizeof(buffer), "V1: %d \r\n", valorSpi1b);
 10c:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <valorSpi1b+0x1>
 110:	8f 93       	push	r24
 112:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <valorSpi1b>
 116:	8f 93       	push	r24
 118:	81 e0       	ldi	r24, 0x01	; 1
 11a:	91 e0       	ldi	r25, 0x01	; 1
 11c:	9f 93       	push	r25
 11e:	8f 93       	push	r24
 120:	1f 92       	push	r1
 122:	10 e1       	ldi	r17, 0x10	; 16
 124:	1f 93       	push	r17
 126:	c0 e1       	ldi	r28, 0x10	; 16
 128:	d2 e0       	ldi	r29, 0x02	; 2
 12a:	df 93       	push	r29
 12c:	cf 93       	push	r28
 12e:	0e 94 43 02 	call	0x486	; 0x486 <snprintf>
	UART_send_string(buffer);
 132:	ce 01       	movw	r24, r28
 134:	0e 94 ef 01 	call	0x3de	; 0x3de <UART_send_string>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 138:	8f e9       	ldi	r24, 0x9F	; 159
 13a:	9f e0       	ldi	r25, 0x0F	; 15
 13c:	01 97       	sbiw	r24, 0x01	; 1
 13e:	f1 f7       	brne	.-4      	; 0x13c <enviarValoresUART+0x5a>
 140:	00 c0       	rjmp	.+0      	; 0x142 <enviarValoresUART+0x60>
 142:	00 00       	nop
	_delay_ms(1);
	snprintf(buffer, sizeof(buffer), "V2: %d \r\n", valorSpi2b);
 144:	80 91 21 02 	lds	r24, 0x0221	; 0x800221 <valorSpi2b+0x1>
 148:	8f 93       	push	r24
 14a:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <valorSpi2b>
 14e:	8f 93       	push	r24
 150:	8b e0       	ldi	r24, 0x0B	; 11
 152:	91 e0       	ldi	r25, 0x01	; 1
 154:	9f 93       	push	r25
 156:	8f 93       	push	r24
 158:	1f 92       	push	r1
 15a:	1f 93       	push	r17
 15c:	df 93       	push	r29
 15e:	cf 93       	push	r28
 160:	0e 94 43 02 	call	0x486	; 0x486 <snprintf>
	UART_send_string(buffer);
 164:	ce 01       	movw	r24, r28
 166:	0e 94 ef 01 	call	0x3de	; 0x3de <UART_send_string>
}
 16a:	8d b7       	in	r24, 0x3d	; 61
 16c:	9e b7       	in	r25, 0x3e	; 62
 16e:	40 96       	adiw	r24, 0x10	; 16
 170:	0f b6       	in	r0, 0x3f	; 63
 172:	f8 94       	cli
 174:	9e bf       	out	0x3e, r25	; 62
 176:	0f be       	out	0x3f, r0	; 63
 178:	8d bf       	out	0x3d, r24	; 61
 17a:	df 91       	pop	r29
 17c:	cf 91       	pop	r28
 17e:	1f 91       	pop	r17
 180:	08 95       	ret

00000182 <lecturaADC>:

void lecturaADC() {
	PORTB &= ~(1<<PORTB2); // SLAVE SELECT LOW
 182:	85 b1       	in	r24, 0x05	; 5
 184:	8b 7f       	andi	r24, 0xFB	; 251
 186:	85 b9       	out	0x05, r24	; 5
	SpiWrite('c'); // Suponiendo que 'c' se representa como 0xC0
 188:	83 e6       	ldi	r24, 0x63	; 99
 18a:	0e 94 ba 01 	call	0x374	; 0x374 <SpiWrite>
	valorSpi1 = SpiRead();
 18e:	0e 94 bc 01 	call	0x378	; 0x378 <SpiRead>
 192:	80 93 8f 01 	sts	0x018F, r24	; 0x80018f <valorSpi1>
 196:	8f e3       	ldi	r24, 0x3F	; 63
 198:	9c e9       	ldi	r25, 0x9C	; 156
 19a:	01 97       	sbiw	r24, 0x01	; 1
 19c:	f1 f7       	brne	.-4      	; 0x19a <lecturaADC+0x18>
 19e:	00 c0       	rjmp	.+0      	; 0x1a0 <lecturaADC+0x1e>
 1a0:	00 00       	nop
	_delay_ms(10);
	SpiWrite('d'); // Suponiendo que 'd' se representa como 0xD0
 1a2:	84 e6       	ldi	r24, 0x64	; 100
 1a4:	0e 94 ba 01 	call	0x374	; 0x374 <SpiWrite>
	valorSpi2 = SpiRead();
 1a8:	0e 94 bc 01 	call	0x378	; 0x378 <SpiRead>
 1ac:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <valorSpi2>
 1b0:	8f e3       	ldi	r24, 0x3F	; 63
 1b2:	9c e9       	ldi	r25, 0x9C	; 156
 1b4:	01 97       	sbiw	r24, 0x01	; 1
 1b6:	f1 f7       	brne	.-4      	; 0x1b4 <lecturaADC+0x32>
 1b8:	00 c0       	rjmp	.+0      	; 0x1ba <lecturaADC+0x38>
 1ba:	00 00       	nop
	_delay_ms(10);
	PORTB |= (1<<PORTB2); // SLAVE SELECT HIGH
 1bc:	85 b1       	in	r24, 0x05	; 5
 1be:	84 60       	ori	r24, 0x04	; 4
 1c0:	85 b9       	out	0x05, r24	; 5
 1c2:	08 95       	ret

000001c4 <IntCont>:
}

void IntCont() {
	if (UART_available()) {
 1c4:	0e 94 11 02 	call	0x422	; 0x422 <UART_available>
 1c8:	89 2b       	or	r24, r25
 1ca:	59 f0       	breq	.+22     	; 0x1e2 <IntCont+0x1e>
		char comando = UART_receive();
 1cc:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <UART_receive>
		if (comando == 'm') {
 1d0:	8d 36       	cpi	r24, 0x6D	; 109
 1d2:	19 f4       	brne	.+6      	; 0x1da <IntCont+0x16>
			enviarValoresUART();
 1d4:	0e 94 71 00 	call	0xe2	; 0xe2 <enviarValoresUART>
 1d8:	08 95       	ret
			} else {
			UART_send_string("\nEl comando ingresado no se reconoce\n");
 1da:	85 e1       	ldi	r24, 0x15	; 21
 1dc:	91 e0       	ldi	r25, 0x01	; 1
 1de:	0e 94 ef 01 	call	0x3de	; 0x3de <UART_send_string>
 1e2:	08 95       	ret

000001e4 <__vector_18>:
		}
	}
}

// Rutina de interrupción del UART
ISR(USART_RX_vect) {
 1e4:	1f 92       	push	r1
 1e6:	0f 92       	push	r0
 1e8:	0f b6       	in	r0, 0x3f	; 63
 1ea:	0f 92       	push	r0
 1ec:	11 24       	eor	r1, r1
 1ee:	8f 93       	push	r24
 1f0:	ef 93       	push	r30
 1f2:	ff 93       	push	r31
	uart_buffer[uart_head] = UDR0; // Leer el carácter recibido del registro UDR0
 1f4:	e0 91 8d 01 	lds	r30, 0x018D	; 0x80018d <uart_head>
 1f8:	f0 e0       	ldi	r31, 0x00	; 0
 1fa:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 1fe:	e0 57       	subi	r30, 0x70	; 112
 200:	fe 4f       	sbci	r31, 0xFE	; 254
 202:	80 83       	st	Z, r24
	uart_head = (uart_head + 1) % sizeof(uart_buffer); // Actualizar el índice de la cabeza del buffer
 204:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <uart_head>
 208:	8f 5f       	subi	r24, 0xFF	; 255
 20a:	8f 77       	andi	r24, 0x7F	; 127
 20c:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <uart_head>
	uart_buffer[uart_head] = '\0'; // Terminador de cadena
 210:	e0 91 8d 01 	lds	r30, 0x018D	; 0x80018d <uart_head>
 214:	f0 e0       	ldi	r31, 0x00	; 0
 216:	e0 57       	subi	r30, 0x70	; 112
 218:	fe 4f       	sbci	r31, 0xFE	; 254
 21a:	10 82       	st	Z, r1
}
 21c:	ff 91       	pop	r31
 21e:	ef 91       	pop	r30
 220:	8f 91       	pop	r24
 222:	0f 90       	pop	r0
 224:	0f be       	out	0x3f, r0	; 63
 226:	0f 90       	pop	r0
 228:	1f 90       	pop	r1
 22a:	18 95       	reti

0000022c <main>:

/********************PROGRAMA PRINCIPAL****************************************************/
int main(void) {
	setUp();
 22c:	0e 94 5a 00 	call	0xb4	; 0xb4 <setUp>
	sei(); // Habilitar interrupciones globales
 230:	78 94       	sei

	while (1) {
		if (inicio == 1) {
 232:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 236:	81 30       	cpi	r24, 0x01	; 1
 238:	09 f5       	brne	.+66     	; 0x27c <main+0x50>
 23a:	2f ef       	ldi	r18, 0xFF	; 255
 23c:	81 ee       	ldi	r24, 0xE1	; 225
 23e:	94 e0       	ldi	r25, 0x04	; 4
 240:	21 50       	subi	r18, 0x01	; 1
 242:	80 40       	sbci	r24, 0x00	; 0
 244:	90 40       	sbci	r25, 0x00	; 0
 246:	e1 f7       	brne	.-8      	; 0x240 <main+0x14>
 248:	00 c0       	rjmp	.+0      	; 0x24a <main+0x1e>
 24a:	00 00       	nop
			_delay_ms(100); // Esperar un tiempo para permitir la actualización del ADC
			UART_send_string("\nIngrese 'm' para observar el ADC.\r\n");
 24c:	8b e3       	ldi	r24, 0x3B	; 59
 24e:	91 e0       	ldi	r25, 0x01	; 1
 250:	0e 94 ef 01 	call	0x3de	; 0x3de <UART_send_string>
			UART_send_string("Ingrese 'algun numero' para el contador.\r\n");
 254:	80 e6       	ldi	r24, 0x60	; 96
 256:	91 e0       	ldi	r25, 0x01	; 1
 258:	0e 94 ef 01 	call	0x3de	; 0x3de <UART_send_string>
			lecturaADC();
 25c:	0e 94 c1 00 	call	0x182	; 0x182 <lecturaADC>
 260:	2f ef       	ldi	r18, 0xFF	; 255
 262:	85 ea       	ldi	r24, 0xA5	; 165
 264:	9e e0       	ldi	r25, 0x0E	; 14
 266:	21 50       	subi	r18, 0x01	; 1
 268:	80 40       	sbci	r24, 0x00	; 0
 26a:	90 40       	sbci	r25, 0x00	; 0
 26c:	e1 f7       	brne	.-8      	; 0x266 <main+0x3a>
 26e:	00 c0       	rjmp	.+0      	; 0x270 <main+0x44>
 270:	00 00       	nop
			_delay_ms(300);
			IntCont();
 272:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <IntCont>
			inicio = 0;
 276:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 27a:	0b c0       	rjmp	.+22     	; 0x292 <main+0x66>
 27c:	2f ef       	ldi	r18, 0xFF	; 255
 27e:	89 e6       	ldi	r24, 0x69	; 105
 280:	98 e1       	ldi	r25, 0x18	; 24
 282:	21 50       	subi	r18, 0x01	; 1
 284:	80 40       	sbci	r24, 0x00	; 0
 286:	90 40       	sbci	r25, 0x00	; 0
 288:	e1 f7       	brne	.-8      	; 0x282 <main+0x56>
 28a:	00 c0       	rjmp	.+0      	; 0x28c <main+0x60>
 28c:	00 00       	nop
			} else {
			_delay_ms(500); // Esperar un tiempo para permitir la actualización del ADC
			IntCont(); // Verificar y procesar los comandos UART
 28e:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <IntCont>
		}
		lecturaADC(); // Leer ADC y actualizar valores
 292:	0e 94 c1 00 	call	0x182	; 0x182 <lecturaADC>
 296:	2f ef       	ldi	r18, 0xFF	; 255
 298:	85 ea       	ldi	r24, 0xA5	; 165
 29a:	9e e0       	ldi	r25, 0x0E	; 14
 29c:	21 50       	subi	r18, 0x01	; 1
 29e:	80 40       	sbci	r24, 0x00	; 0
 2a0:	90 40       	sbci	r25, 0x00	; 0
 2a2:	e1 f7       	brne	.-8      	; 0x29c <main+0x70>
 2a4:	00 c0       	rjmp	.+0      	; 0x2a6 <main+0x7a>
 2a6:	00 00       	nop
 2a8:	c4 cf       	rjmp	.-120    	; 0x232 <main+0x6>

000002aa <SpiInit>:
	if(SPSR & (1<<SPIF))
	return 1;
	else
	return 0;
	
}
 2aa:	e8 2f       	mov	r30, r24
 2ac:	84 ff       	sbrs	r24, 4
 2ae:	52 c0       	rjmp	.+164    	; 0x354 <SpiInit+0xaa>
 2b0:	84 b1       	in	r24, 0x04	; 4
 2b2:	8c 62       	ori	r24, 0x2C	; 44
 2b4:	84 b9       	out	0x04, r24	; 4
 2b6:	84 b1       	in	r24, 0x04	; 4
 2b8:	8f 7e       	andi	r24, 0xEF	; 239
 2ba:	84 b9       	out	0x04, r24	; 4
 2bc:	8c b5       	in	r24, 0x2c	; 44
 2be:	80 61       	ori	r24, 0x10	; 16
 2c0:	8c bd       	out	0x2c, r24	; 44
 2c2:	e7 70       	andi	r30, 0x07	; 7
 2c4:	8e 2f       	mov	r24, r30
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	87 30       	cpi	r24, 0x07	; 7
 2ca:	91 05       	cpc	r25, r1
 2cc:	08 f0       	brcs	.+2      	; 0x2d0 <SpiInit+0x26>
 2ce:	4b c0       	rjmp	.+150    	; 0x366 <SpiInit+0xbc>
 2d0:	fc 01       	movw	r30, r24
 2d2:	ec 5c       	subi	r30, 0xCC	; 204
 2d4:	ff 4f       	sbci	r31, 0xFF	; 255
 2d6:	0c 94 3d 02 	jmp	0x47a	; 0x47a <__tablejump2__>
 2da:	8c b5       	in	r24, 0x2c	; 44
 2dc:	8c 7f       	andi	r24, 0xFC	; 252
 2de:	8c bd       	out	0x2c, r24	; 44
 2e0:	8d b5       	in	r24, 0x2d	; 45
 2e2:	81 60       	ori	r24, 0x01	; 1
 2e4:	8d bd       	out	0x2d, r24	; 45
 2e6:	3f c0       	rjmp	.+126    	; 0x366 <SpiInit+0xbc>
 2e8:	8c b5       	in	r24, 0x2c	; 44
 2ea:	8c 7f       	andi	r24, 0xFC	; 252
 2ec:	8c bd       	out	0x2c, r24	; 44
 2ee:	8d b5       	in	r24, 0x2d	; 45
 2f0:	8e 7f       	andi	r24, 0xFE	; 254
 2f2:	8d bd       	out	0x2d, r24	; 45
 2f4:	38 c0       	rjmp	.+112    	; 0x366 <SpiInit+0xbc>
 2f6:	8c b5       	in	r24, 0x2c	; 44
 2f8:	81 60       	ori	r24, 0x01	; 1
 2fa:	8c bd       	out	0x2c, r24	; 44
 2fc:	8c b5       	in	r24, 0x2c	; 44
 2fe:	8d 7f       	andi	r24, 0xFD	; 253
 300:	8c bd       	out	0x2c, r24	; 44
 302:	8d b5       	in	r24, 0x2d	; 45
 304:	81 60       	ori	r24, 0x01	; 1
 306:	8d bd       	out	0x2d, r24	; 45
 308:	2e c0       	rjmp	.+92     	; 0x366 <SpiInit+0xbc>
 30a:	8c b5       	in	r24, 0x2c	; 44
 30c:	81 60       	ori	r24, 0x01	; 1
 30e:	8c bd       	out	0x2c, r24	; 44
 310:	8c b5       	in	r24, 0x2c	; 44
 312:	8d 7f       	andi	r24, 0xFD	; 253
 314:	8c bd       	out	0x2c, r24	; 44
 316:	8d b5       	in	r24, 0x2d	; 45
 318:	8e 7f       	andi	r24, 0xFE	; 254
 31a:	8d bd       	out	0x2d, r24	; 45
 31c:	24 c0       	rjmp	.+72     	; 0x366 <SpiInit+0xbc>
 31e:	8c b5       	in	r24, 0x2c	; 44
 320:	8e 7f       	andi	r24, 0xFE	; 254
 322:	8c bd       	out	0x2c, r24	; 44
 324:	8c b5       	in	r24, 0x2c	; 44
 326:	82 60       	ori	r24, 0x02	; 2
 328:	8c bd       	out	0x2c, r24	; 44
 32a:	8d b5       	in	r24, 0x2d	; 45
 32c:	81 60       	ori	r24, 0x01	; 1
 32e:	8d bd       	out	0x2d, r24	; 45
 330:	1a c0       	rjmp	.+52     	; 0x366 <SpiInit+0xbc>
 332:	8c b5       	in	r24, 0x2c	; 44
 334:	8e 7f       	andi	r24, 0xFE	; 254
 336:	8c bd       	out	0x2c, r24	; 44
 338:	8c b5       	in	r24, 0x2c	; 44
 33a:	82 60       	ori	r24, 0x02	; 2
 33c:	8c bd       	out	0x2c, r24	; 44
 33e:	8d b5       	in	r24, 0x2d	; 45
 340:	8e 7f       	andi	r24, 0xFE	; 254
 342:	8d bd       	out	0x2d, r24	; 45
 344:	10 c0       	rjmp	.+32     	; 0x366 <SpiInit+0xbc>
 346:	8c b5       	in	r24, 0x2c	; 44
 348:	83 60       	ori	r24, 0x03	; 3
 34a:	8c bd       	out	0x2c, r24	; 44
 34c:	8d b5       	in	r24, 0x2d	; 45
 34e:	8e 7f       	andi	r24, 0xFE	; 254
 350:	8d bd       	out	0x2d, r24	; 45
 352:	09 c0       	rjmp	.+18     	; 0x366 <SpiInit+0xbc>
 354:	84 b1       	in	r24, 0x04	; 4
 356:	80 61       	ori	r24, 0x10	; 16
 358:	84 b9       	out	0x04, r24	; 4
 35a:	84 b1       	in	r24, 0x04	; 4
 35c:	83 7d       	andi	r24, 0xD3	; 211
 35e:	84 b9       	out	0x04, r24	; 4
 360:	8c b5       	in	r24, 0x2c	; 44
 362:	8f 7e       	andi	r24, 0xEF	; 239
 364:	8c bd       	out	0x2c, r24	; 44
 366:	8c b5       	in	r24, 0x2c	; 44
 368:	46 2b       	or	r20, r22
 36a:	24 2b       	or	r18, r20
 36c:	28 2b       	or	r18, r24
 36e:	20 64       	ori	r18, 0x40	; 64
 370:	2c bd       	out	0x2c, r18	; 44
 372:	08 95       	ret

00000374 <SpiWrite>:
 374:	8e bd       	out	0x2e, r24	; 46
 376:	08 95       	ret

00000378 <SpiRead>:

uint8_t SpiRead(void){//lee el dato recivido
	while(!(SPSR & (1<<SPIF))); // ESPERAR HASTA QUE LA VARIABLE 
 378:	0d b4       	in	r0, 0x2d	; 45
 37a:	07 fe       	sbrs	r0, 7
 37c:	fd cf       	rjmp	.-6      	; 0x378 <SpiRead>
	return(SPDR);
 37e:	8e b5       	in	r24, 0x2e	; 46
 380:	08 95       	ret

00000382 <UART_init>:
volatile uint8_t uart_head = 0; // Índice de la cabeza del buffer
volatile uint8_t uart_tail = 0; // Índice de la cola del buffer

/* Inicializa el UART con el baud rate especificado.*/
void UART_init(unsigned int baud) {
	unsigned int ubrr = BAUD_PRESCALE(baud);
 382:	a0 e0       	ldi	r26, 0x00	; 0
 384:	b0 e0       	ldi	r27, 0x00	; 0
 386:	88 0f       	add	r24, r24
 388:	99 1f       	adc	r25, r25
 38a:	aa 1f       	adc	r26, r26
 38c:	bb 1f       	adc	r27, r27
 38e:	88 0f       	add	r24, r24
 390:	99 1f       	adc	r25, r25
 392:	aa 1f       	adc	r26, r26
 394:	bb 1f       	adc	r27, r27
 396:	9c 01       	movw	r18, r24
 398:	ad 01       	movw	r20, r26
 39a:	22 0f       	add	r18, r18
 39c:	33 1f       	adc	r19, r19
 39e:	44 1f       	adc	r20, r20
 3a0:	55 1f       	adc	r21, r21
 3a2:	22 0f       	add	r18, r18
 3a4:	33 1f       	adc	r19, r19
 3a6:	44 1f       	adc	r20, r20
 3a8:	55 1f       	adc	r21, r21
 3aa:	60 e0       	ldi	r22, 0x00	; 0
 3ac:	74 e2       	ldi	r23, 0x24	; 36
 3ae:	84 ef       	ldi	r24, 0xF4	; 244
 3b0:	90 e0       	ldi	r25, 0x00	; 0
 3b2:	0e 94 1b 02 	call	0x436	; 0x436 <__udivmodsi4>
 3b6:	21 50       	subi	r18, 0x01	; 1
 3b8:	31 09       	sbc	r19, r1
	UBRR0H = (unsigned char)(ubrr >> 8);
 3ba:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (unsigned char)ubrr;
 3be:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	UCSR0B = (1 << RXEN0) | (1 << TXEN0)| (1 << RXCIE0); // Habilitar RX, TX y la interrupción RX
 3c2:	88 e9       	ldi	r24, 0x98	; 152
 3c4:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00); // Configurar para 8 bits de datos, 1 bit de stop
 3c8:	86 e0       	ldi	r24, 0x06	; 6
 3ca:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 3ce:	08 95       	ret

000003d0 <UART_send>:
}

/* Envía un solo carácter a través de UART.*/
void UART_send(unsigned char data) {
	while (!(UCSR0A & (1 << UDRE0))); // Esperar hasta que el buffer de transmisión esté vacío
 3d0:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 3d4:	95 ff       	sbrs	r25, 5
 3d6:	fc cf       	rjmp	.-8      	; 0x3d0 <UART_send>
	UDR0 = data; // Enviar el carácter
 3d8:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 3dc:	08 95       	ret

000003de <UART_send_string>:
}

/* Envía una cadena de caracteres a través de UART.*/
void UART_send_string(const char* str) {
 3de:	cf 93       	push	r28
 3e0:	df 93       	push	r29
 3e2:	ec 01       	movw	r28, r24
	while (*str) {
 3e4:	03 c0       	rjmp	.+6      	; 0x3ec <UART_send_string+0xe>
		UART_send(*str++); // Enviar cada carácter de la cadena
 3e6:	21 96       	adiw	r28, 0x01	; 1
 3e8:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <UART_send>
	UDR0 = data; // Enviar el carácter
}

/* Envía una cadena de caracteres a través de UART.*/
void UART_send_string(const char* str) {
	while (*str) {
 3ec:	88 81       	ld	r24, Y
 3ee:	81 11       	cpse	r24, r1
 3f0:	fa cf       	rjmp	.-12     	; 0x3e6 <UART_send_string+0x8>
		UART_send(*str++); // Enviar cada carácter de la cadena
	}
}
 3f2:	df 91       	pop	r29
 3f4:	cf 91       	pop	r28
 3f6:	08 95       	ret

000003f8 <UART_receive>:

/*brief Recibe un solo carácter del buffer UART.*/
unsigned char UART_receive(void) {
	if (uart_head != uart_tail) { // Verificar si hay datos disponibles
 3f8:	90 91 8d 01 	lds	r25, 0x018D	; 0x80018d <uart_head>
 3fc:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <__data_end>
 400:	98 17       	cp	r25, r24
 402:	69 f0       	breq	.+26     	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
		unsigned char data = uart_buffer[uart_tail]; // Leer el carácter del buffer
 404:	e0 91 8c 01 	lds	r30, 0x018C	; 0x80018c <__data_end>
 408:	f0 e0       	ldi	r31, 0x00	; 0
 40a:	e0 57       	subi	r30, 0x70	; 112
 40c:	fe 4f       	sbci	r31, 0xFE	; 254
 40e:	80 81       	ld	r24, Z
		uart_tail = (uart_tail + 1) % sizeof(uart_buffer); // Actualizar el índice de la cola
 410:	90 91 8c 01 	lds	r25, 0x018C	; 0x80018c <__data_end>
 414:	9f 5f       	subi	r25, 0xFF	; 255
 416:	9f 77       	andi	r25, 0x7F	; 127
 418:	90 93 8c 01 	sts	0x018C, r25	; 0x80018c <__data_end>
		return data; // Devolver el carácter recibido
 41c:	08 95       	ret
		} else {
		return 0; // No hay datos disponibles
 41e:	80 e0       	ldi	r24, 0x00	; 0
	}
}
 420:	08 95       	ret

00000422 <UART_available>:

/*brief Verifica si hay datos disponibles en el buffer UART.*/
int UART_available(void) {
	return (uart_head != uart_tail); // Retorna 1 si hay datos en el buffer, 0 si no
 422:	20 91 8d 01 	lds	r18, 0x018D	; 0x80018d <uart_head>
 426:	90 91 8c 01 	lds	r25, 0x018C	; 0x80018c <__data_end>
 42a:	81 e0       	ldi	r24, 0x01	; 1
 42c:	29 13       	cpse	r18, r25
 42e:	01 c0       	rjmp	.+2      	; 0x432 <UART_available+0x10>
 430:	80 e0       	ldi	r24, 0x00	; 0
}
 432:	90 e0       	ldi	r25, 0x00	; 0
 434:	08 95       	ret

00000436 <__udivmodsi4>:
 436:	a1 e2       	ldi	r26, 0x21	; 33
 438:	1a 2e       	mov	r1, r26
 43a:	aa 1b       	sub	r26, r26
 43c:	bb 1b       	sub	r27, r27
 43e:	fd 01       	movw	r30, r26
 440:	0d c0       	rjmp	.+26     	; 0x45c <__udivmodsi4_ep>

00000442 <__udivmodsi4_loop>:
 442:	aa 1f       	adc	r26, r26
 444:	bb 1f       	adc	r27, r27
 446:	ee 1f       	adc	r30, r30
 448:	ff 1f       	adc	r31, r31
 44a:	a2 17       	cp	r26, r18
 44c:	b3 07       	cpc	r27, r19
 44e:	e4 07       	cpc	r30, r20
 450:	f5 07       	cpc	r31, r21
 452:	20 f0       	brcs	.+8      	; 0x45c <__udivmodsi4_ep>
 454:	a2 1b       	sub	r26, r18
 456:	b3 0b       	sbc	r27, r19
 458:	e4 0b       	sbc	r30, r20
 45a:	f5 0b       	sbc	r31, r21

0000045c <__udivmodsi4_ep>:
 45c:	66 1f       	adc	r22, r22
 45e:	77 1f       	adc	r23, r23
 460:	88 1f       	adc	r24, r24
 462:	99 1f       	adc	r25, r25
 464:	1a 94       	dec	r1
 466:	69 f7       	brne	.-38     	; 0x442 <__udivmodsi4_loop>
 468:	60 95       	com	r22
 46a:	70 95       	com	r23
 46c:	80 95       	com	r24
 46e:	90 95       	com	r25
 470:	9b 01       	movw	r18, r22
 472:	ac 01       	movw	r20, r24
 474:	bd 01       	movw	r22, r26
 476:	cf 01       	movw	r24, r30
 478:	08 95       	ret

0000047a <__tablejump2__>:
 47a:	ee 0f       	add	r30, r30
 47c:	ff 1f       	adc	r31, r31
 47e:	05 90       	lpm	r0, Z+
 480:	f4 91       	lpm	r31, Z
 482:	e0 2d       	mov	r30, r0
 484:	09 94       	ijmp

00000486 <snprintf>:
 486:	ae e0       	ldi	r26, 0x0E	; 14
 488:	b0 e0       	ldi	r27, 0x00	; 0
 48a:	e9 e4       	ldi	r30, 0x49	; 73
 48c:	f2 e0       	ldi	r31, 0x02	; 2
 48e:	0c 94 12 05 	jmp	0xa24	; 0xa24 <__prologue_saves__+0x1c>
 492:	0d 89       	ldd	r16, Y+21	; 0x15
 494:	1e 89       	ldd	r17, Y+22	; 0x16
 496:	8f 89       	ldd	r24, Y+23	; 0x17
 498:	98 8d       	ldd	r25, Y+24	; 0x18
 49a:	26 e0       	ldi	r18, 0x06	; 6
 49c:	2c 83       	std	Y+4, r18	; 0x04
 49e:	1a 83       	std	Y+2, r17	; 0x02
 4a0:	09 83       	std	Y+1, r16	; 0x01
 4a2:	97 ff       	sbrs	r25, 7
 4a4:	02 c0       	rjmp	.+4      	; 0x4aa <snprintf+0x24>
 4a6:	80 e0       	ldi	r24, 0x00	; 0
 4a8:	90 e8       	ldi	r25, 0x80	; 128
 4aa:	01 97       	sbiw	r24, 0x01	; 1
 4ac:	9e 83       	std	Y+6, r25	; 0x06
 4ae:	8d 83       	std	Y+5, r24	; 0x05
 4b0:	ae 01       	movw	r20, r28
 4b2:	45 5e       	subi	r20, 0xE5	; 229
 4b4:	5f 4f       	sbci	r21, 0xFF	; 255
 4b6:	69 8d       	ldd	r22, Y+25	; 0x19
 4b8:	7a 8d       	ldd	r23, Y+26	; 0x1a
 4ba:	ce 01       	movw	r24, r28
 4bc:	01 96       	adiw	r24, 0x01	; 1
 4be:	0e 94 73 02 	call	0x4e6	; 0x4e6 <vfprintf>
 4c2:	4d 81       	ldd	r20, Y+5	; 0x05
 4c4:	5e 81       	ldd	r21, Y+6	; 0x06
 4c6:	57 fd       	sbrc	r21, 7
 4c8:	0a c0       	rjmp	.+20     	; 0x4de <snprintf+0x58>
 4ca:	2f 81       	ldd	r18, Y+7	; 0x07
 4cc:	38 85       	ldd	r19, Y+8	; 0x08
 4ce:	42 17       	cp	r20, r18
 4d0:	53 07       	cpc	r21, r19
 4d2:	0c f4       	brge	.+2      	; 0x4d6 <snprintf+0x50>
 4d4:	9a 01       	movw	r18, r20
 4d6:	f8 01       	movw	r30, r16
 4d8:	e2 0f       	add	r30, r18
 4da:	f3 1f       	adc	r31, r19
 4dc:	10 82       	st	Z, r1
 4de:	2e 96       	adiw	r28, 0x0e	; 14
 4e0:	e4 e0       	ldi	r30, 0x04	; 4
 4e2:	0c 94 2e 05 	jmp	0xa5c	; 0xa5c <__epilogue_restores__+0x1c>

000004e6 <vfprintf>:
 4e6:	ab e0       	ldi	r26, 0x0B	; 11
 4e8:	b0 e0       	ldi	r27, 0x00	; 0
 4ea:	e9 e7       	ldi	r30, 0x79	; 121
 4ec:	f2 e0       	ldi	r31, 0x02	; 2
 4ee:	0c 94 04 05 	jmp	0xa08	; 0xa08 <__prologue_saves__>
 4f2:	6c 01       	movw	r12, r24
 4f4:	7b 01       	movw	r14, r22
 4f6:	8a 01       	movw	r16, r20
 4f8:	fc 01       	movw	r30, r24
 4fa:	17 82       	std	Z+7, r1	; 0x07
 4fc:	16 82       	std	Z+6, r1	; 0x06
 4fe:	83 81       	ldd	r24, Z+3	; 0x03
 500:	81 ff       	sbrs	r24, 1
 502:	cc c1       	rjmp	.+920    	; 0x89c <__DATA_REGION_LENGTH__+0x9c>
 504:	ce 01       	movw	r24, r28
 506:	01 96       	adiw	r24, 0x01	; 1
 508:	3c 01       	movw	r6, r24
 50a:	f6 01       	movw	r30, r12
 50c:	93 81       	ldd	r25, Z+3	; 0x03
 50e:	f7 01       	movw	r30, r14
 510:	93 fd       	sbrc	r25, 3
 512:	85 91       	lpm	r24, Z+
 514:	93 ff       	sbrs	r25, 3
 516:	81 91       	ld	r24, Z+
 518:	7f 01       	movw	r14, r30
 51a:	88 23       	and	r24, r24
 51c:	09 f4       	brne	.+2      	; 0x520 <vfprintf+0x3a>
 51e:	ba c1       	rjmp	.+884    	; 0x894 <__DATA_REGION_LENGTH__+0x94>
 520:	85 32       	cpi	r24, 0x25	; 37
 522:	39 f4       	brne	.+14     	; 0x532 <vfprintf+0x4c>
 524:	93 fd       	sbrc	r25, 3
 526:	85 91       	lpm	r24, Z+
 528:	93 ff       	sbrs	r25, 3
 52a:	81 91       	ld	r24, Z+
 52c:	7f 01       	movw	r14, r30
 52e:	85 32       	cpi	r24, 0x25	; 37
 530:	29 f4       	brne	.+10     	; 0x53c <vfprintf+0x56>
 532:	b6 01       	movw	r22, r12
 534:	90 e0       	ldi	r25, 0x00	; 0
 536:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <fputc>
 53a:	e7 cf       	rjmp	.-50     	; 0x50a <vfprintf+0x24>
 53c:	91 2c       	mov	r9, r1
 53e:	21 2c       	mov	r2, r1
 540:	31 2c       	mov	r3, r1
 542:	ff e1       	ldi	r31, 0x1F	; 31
 544:	f3 15       	cp	r31, r3
 546:	d8 f0       	brcs	.+54     	; 0x57e <vfprintf+0x98>
 548:	8b 32       	cpi	r24, 0x2B	; 43
 54a:	79 f0       	breq	.+30     	; 0x56a <vfprintf+0x84>
 54c:	38 f4       	brcc	.+14     	; 0x55c <vfprintf+0x76>
 54e:	80 32       	cpi	r24, 0x20	; 32
 550:	79 f0       	breq	.+30     	; 0x570 <vfprintf+0x8a>
 552:	83 32       	cpi	r24, 0x23	; 35
 554:	a1 f4       	brne	.+40     	; 0x57e <vfprintf+0x98>
 556:	23 2d       	mov	r18, r3
 558:	20 61       	ori	r18, 0x10	; 16
 55a:	1d c0       	rjmp	.+58     	; 0x596 <vfprintf+0xb0>
 55c:	8d 32       	cpi	r24, 0x2D	; 45
 55e:	61 f0       	breq	.+24     	; 0x578 <vfprintf+0x92>
 560:	80 33       	cpi	r24, 0x30	; 48
 562:	69 f4       	brne	.+26     	; 0x57e <vfprintf+0x98>
 564:	23 2d       	mov	r18, r3
 566:	21 60       	ori	r18, 0x01	; 1
 568:	16 c0       	rjmp	.+44     	; 0x596 <vfprintf+0xb0>
 56a:	83 2d       	mov	r24, r3
 56c:	82 60       	ori	r24, 0x02	; 2
 56e:	38 2e       	mov	r3, r24
 570:	e3 2d       	mov	r30, r3
 572:	e4 60       	ori	r30, 0x04	; 4
 574:	3e 2e       	mov	r3, r30
 576:	2a c0       	rjmp	.+84     	; 0x5cc <vfprintf+0xe6>
 578:	f3 2d       	mov	r31, r3
 57a:	f8 60       	ori	r31, 0x08	; 8
 57c:	1d c0       	rjmp	.+58     	; 0x5b8 <vfprintf+0xd2>
 57e:	37 fc       	sbrc	r3, 7
 580:	2d c0       	rjmp	.+90     	; 0x5dc <vfprintf+0xf6>
 582:	20 ed       	ldi	r18, 0xD0	; 208
 584:	28 0f       	add	r18, r24
 586:	2a 30       	cpi	r18, 0x0A	; 10
 588:	40 f0       	brcs	.+16     	; 0x59a <vfprintf+0xb4>
 58a:	8e 32       	cpi	r24, 0x2E	; 46
 58c:	b9 f4       	brne	.+46     	; 0x5bc <vfprintf+0xd6>
 58e:	36 fc       	sbrc	r3, 6
 590:	81 c1       	rjmp	.+770    	; 0x894 <__DATA_REGION_LENGTH__+0x94>
 592:	23 2d       	mov	r18, r3
 594:	20 64       	ori	r18, 0x40	; 64
 596:	32 2e       	mov	r3, r18
 598:	19 c0       	rjmp	.+50     	; 0x5cc <vfprintf+0xe6>
 59a:	36 fe       	sbrs	r3, 6
 59c:	06 c0       	rjmp	.+12     	; 0x5aa <vfprintf+0xc4>
 59e:	8a e0       	ldi	r24, 0x0A	; 10
 5a0:	98 9e       	mul	r9, r24
 5a2:	20 0d       	add	r18, r0
 5a4:	11 24       	eor	r1, r1
 5a6:	92 2e       	mov	r9, r18
 5a8:	11 c0       	rjmp	.+34     	; 0x5cc <vfprintf+0xe6>
 5aa:	ea e0       	ldi	r30, 0x0A	; 10
 5ac:	2e 9e       	mul	r2, r30
 5ae:	20 0d       	add	r18, r0
 5b0:	11 24       	eor	r1, r1
 5b2:	22 2e       	mov	r2, r18
 5b4:	f3 2d       	mov	r31, r3
 5b6:	f0 62       	ori	r31, 0x20	; 32
 5b8:	3f 2e       	mov	r3, r31
 5ba:	08 c0       	rjmp	.+16     	; 0x5cc <vfprintf+0xe6>
 5bc:	8c 36       	cpi	r24, 0x6C	; 108
 5be:	21 f4       	brne	.+8      	; 0x5c8 <vfprintf+0xe2>
 5c0:	83 2d       	mov	r24, r3
 5c2:	80 68       	ori	r24, 0x80	; 128
 5c4:	38 2e       	mov	r3, r24
 5c6:	02 c0       	rjmp	.+4      	; 0x5cc <vfprintf+0xe6>
 5c8:	88 36       	cpi	r24, 0x68	; 104
 5ca:	41 f4       	brne	.+16     	; 0x5dc <vfprintf+0xf6>
 5cc:	f7 01       	movw	r30, r14
 5ce:	93 fd       	sbrc	r25, 3
 5d0:	85 91       	lpm	r24, Z+
 5d2:	93 ff       	sbrs	r25, 3
 5d4:	81 91       	ld	r24, Z+
 5d6:	7f 01       	movw	r14, r30
 5d8:	81 11       	cpse	r24, r1
 5da:	b3 cf       	rjmp	.-154    	; 0x542 <vfprintf+0x5c>
 5dc:	98 2f       	mov	r25, r24
 5de:	9f 7d       	andi	r25, 0xDF	; 223
 5e0:	95 54       	subi	r25, 0x45	; 69
 5e2:	93 30       	cpi	r25, 0x03	; 3
 5e4:	28 f4       	brcc	.+10     	; 0x5f0 <vfprintf+0x10a>
 5e6:	0c 5f       	subi	r16, 0xFC	; 252
 5e8:	1f 4f       	sbci	r17, 0xFF	; 255
 5ea:	9f e3       	ldi	r25, 0x3F	; 63
 5ec:	99 83       	std	Y+1, r25	; 0x01
 5ee:	0d c0       	rjmp	.+26     	; 0x60a <vfprintf+0x124>
 5f0:	83 36       	cpi	r24, 0x63	; 99
 5f2:	31 f0       	breq	.+12     	; 0x600 <vfprintf+0x11a>
 5f4:	83 37       	cpi	r24, 0x73	; 115
 5f6:	71 f0       	breq	.+28     	; 0x614 <vfprintf+0x12e>
 5f8:	83 35       	cpi	r24, 0x53	; 83
 5fa:	09 f0       	breq	.+2      	; 0x5fe <vfprintf+0x118>
 5fc:	59 c0       	rjmp	.+178    	; 0x6b0 <vfprintf+0x1ca>
 5fe:	21 c0       	rjmp	.+66     	; 0x642 <vfprintf+0x15c>
 600:	f8 01       	movw	r30, r16
 602:	80 81       	ld	r24, Z
 604:	89 83       	std	Y+1, r24	; 0x01
 606:	0e 5f       	subi	r16, 0xFE	; 254
 608:	1f 4f       	sbci	r17, 0xFF	; 255
 60a:	88 24       	eor	r8, r8
 60c:	83 94       	inc	r8
 60e:	91 2c       	mov	r9, r1
 610:	53 01       	movw	r10, r6
 612:	13 c0       	rjmp	.+38     	; 0x63a <vfprintf+0x154>
 614:	28 01       	movw	r4, r16
 616:	f2 e0       	ldi	r31, 0x02	; 2
 618:	4f 0e       	add	r4, r31
 61a:	51 1c       	adc	r5, r1
 61c:	f8 01       	movw	r30, r16
 61e:	a0 80       	ld	r10, Z
 620:	b1 80       	ldd	r11, Z+1	; 0x01
 622:	36 fe       	sbrs	r3, 6
 624:	03 c0       	rjmp	.+6      	; 0x62c <vfprintf+0x146>
 626:	69 2d       	mov	r22, r9
 628:	70 e0       	ldi	r23, 0x00	; 0
 62a:	02 c0       	rjmp	.+4      	; 0x630 <vfprintf+0x14a>
 62c:	6f ef       	ldi	r22, 0xFF	; 255
 62e:	7f ef       	ldi	r23, 0xFF	; 255
 630:	c5 01       	movw	r24, r10
 632:	0e 94 5f 04 	call	0x8be	; 0x8be <strnlen>
 636:	4c 01       	movw	r8, r24
 638:	82 01       	movw	r16, r4
 63a:	f3 2d       	mov	r31, r3
 63c:	ff 77       	andi	r31, 0x7F	; 127
 63e:	3f 2e       	mov	r3, r31
 640:	16 c0       	rjmp	.+44     	; 0x66e <vfprintf+0x188>
 642:	28 01       	movw	r4, r16
 644:	22 e0       	ldi	r18, 0x02	; 2
 646:	42 0e       	add	r4, r18
 648:	51 1c       	adc	r5, r1
 64a:	f8 01       	movw	r30, r16
 64c:	a0 80       	ld	r10, Z
 64e:	b1 80       	ldd	r11, Z+1	; 0x01
 650:	36 fe       	sbrs	r3, 6
 652:	03 c0       	rjmp	.+6      	; 0x65a <vfprintf+0x174>
 654:	69 2d       	mov	r22, r9
 656:	70 e0       	ldi	r23, 0x00	; 0
 658:	02 c0       	rjmp	.+4      	; 0x65e <vfprintf+0x178>
 65a:	6f ef       	ldi	r22, 0xFF	; 255
 65c:	7f ef       	ldi	r23, 0xFF	; 255
 65e:	c5 01       	movw	r24, r10
 660:	0e 94 54 04 	call	0x8a8	; 0x8a8 <strnlen_P>
 664:	4c 01       	movw	r8, r24
 666:	f3 2d       	mov	r31, r3
 668:	f0 68       	ori	r31, 0x80	; 128
 66a:	3f 2e       	mov	r3, r31
 66c:	82 01       	movw	r16, r4
 66e:	33 fc       	sbrc	r3, 3
 670:	1b c0       	rjmp	.+54     	; 0x6a8 <vfprintf+0x1c2>
 672:	82 2d       	mov	r24, r2
 674:	90 e0       	ldi	r25, 0x00	; 0
 676:	88 16       	cp	r8, r24
 678:	99 06       	cpc	r9, r25
 67a:	b0 f4       	brcc	.+44     	; 0x6a8 <vfprintf+0x1c2>
 67c:	b6 01       	movw	r22, r12
 67e:	80 e2       	ldi	r24, 0x20	; 32
 680:	90 e0       	ldi	r25, 0x00	; 0
 682:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <fputc>
 686:	2a 94       	dec	r2
 688:	f4 cf       	rjmp	.-24     	; 0x672 <vfprintf+0x18c>
 68a:	f5 01       	movw	r30, r10
 68c:	37 fc       	sbrc	r3, 7
 68e:	85 91       	lpm	r24, Z+
 690:	37 fe       	sbrs	r3, 7
 692:	81 91       	ld	r24, Z+
 694:	5f 01       	movw	r10, r30
 696:	b6 01       	movw	r22, r12
 698:	90 e0       	ldi	r25, 0x00	; 0
 69a:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <fputc>
 69e:	21 10       	cpse	r2, r1
 6a0:	2a 94       	dec	r2
 6a2:	21 e0       	ldi	r18, 0x01	; 1
 6a4:	82 1a       	sub	r8, r18
 6a6:	91 08       	sbc	r9, r1
 6a8:	81 14       	cp	r8, r1
 6aa:	91 04       	cpc	r9, r1
 6ac:	71 f7       	brne	.-36     	; 0x68a <vfprintf+0x1a4>
 6ae:	e8 c0       	rjmp	.+464    	; 0x880 <__DATA_REGION_LENGTH__+0x80>
 6b0:	84 36       	cpi	r24, 0x64	; 100
 6b2:	11 f0       	breq	.+4      	; 0x6b8 <vfprintf+0x1d2>
 6b4:	89 36       	cpi	r24, 0x69	; 105
 6b6:	41 f5       	brne	.+80     	; 0x708 <vfprintf+0x222>
 6b8:	f8 01       	movw	r30, r16
 6ba:	37 fe       	sbrs	r3, 7
 6bc:	07 c0       	rjmp	.+14     	; 0x6cc <vfprintf+0x1e6>
 6be:	60 81       	ld	r22, Z
 6c0:	71 81       	ldd	r23, Z+1	; 0x01
 6c2:	82 81       	ldd	r24, Z+2	; 0x02
 6c4:	93 81       	ldd	r25, Z+3	; 0x03
 6c6:	0c 5f       	subi	r16, 0xFC	; 252
 6c8:	1f 4f       	sbci	r17, 0xFF	; 255
 6ca:	08 c0       	rjmp	.+16     	; 0x6dc <vfprintf+0x1f6>
 6cc:	60 81       	ld	r22, Z
 6ce:	71 81       	ldd	r23, Z+1	; 0x01
 6d0:	07 2e       	mov	r0, r23
 6d2:	00 0c       	add	r0, r0
 6d4:	88 0b       	sbc	r24, r24
 6d6:	99 0b       	sbc	r25, r25
 6d8:	0e 5f       	subi	r16, 0xFE	; 254
 6da:	1f 4f       	sbci	r17, 0xFF	; 255
 6dc:	f3 2d       	mov	r31, r3
 6de:	ff 76       	andi	r31, 0x6F	; 111
 6e0:	3f 2e       	mov	r3, r31
 6e2:	97 ff       	sbrs	r25, 7
 6e4:	09 c0       	rjmp	.+18     	; 0x6f8 <vfprintf+0x212>
 6e6:	90 95       	com	r25
 6e8:	80 95       	com	r24
 6ea:	70 95       	com	r23
 6ec:	61 95       	neg	r22
 6ee:	7f 4f       	sbci	r23, 0xFF	; 255
 6f0:	8f 4f       	sbci	r24, 0xFF	; 255
 6f2:	9f 4f       	sbci	r25, 0xFF	; 255
 6f4:	f0 68       	ori	r31, 0x80	; 128
 6f6:	3f 2e       	mov	r3, r31
 6f8:	2a e0       	ldi	r18, 0x0A	; 10
 6fa:	30 e0       	ldi	r19, 0x00	; 0
 6fc:	a3 01       	movw	r20, r6
 6fe:	0e 94 a6 04 	call	0x94c	; 0x94c <__ultoa_invert>
 702:	88 2e       	mov	r8, r24
 704:	86 18       	sub	r8, r6
 706:	45 c0       	rjmp	.+138    	; 0x792 <vfprintf+0x2ac>
 708:	85 37       	cpi	r24, 0x75	; 117
 70a:	31 f4       	brne	.+12     	; 0x718 <vfprintf+0x232>
 70c:	23 2d       	mov	r18, r3
 70e:	2f 7e       	andi	r18, 0xEF	; 239
 710:	b2 2e       	mov	r11, r18
 712:	2a e0       	ldi	r18, 0x0A	; 10
 714:	30 e0       	ldi	r19, 0x00	; 0
 716:	25 c0       	rjmp	.+74     	; 0x762 <vfprintf+0x27c>
 718:	93 2d       	mov	r25, r3
 71a:	99 7f       	andi	r25, 0xF9	; 249
 71c:	b9 2e       	mov	r11, r25
 71e:	8f 36       	cpi	r24, 0x6F	; 111
 720:	c1 f0       	breq	.+48     	; 0x752 <vfprintf+0x26c>
 722:	18 f4       	brcc	.+6      	; 0x72a <vfprintf+0x244>
 724:	88 35       	cpi	r24, 0x58	; 88
 726:	79 f0       	breq	.+30     	; 0x746 <vfprintf+0x260>
 728:	b5 c0       	rjmp	.+362    	; 0x894 <__DATA_REGION_LENGTH__+0x94>
 72a:	80 37       	cpi	r24, 0x70	; 112
 72c:	19 f0       	breq	.+6      	; 0x734 <vfprintf+0x24e>
 72e:	88 37       	cpi	r24, 0x78	; 120
 730:	21 f0       	breq	.+8      	; 0x73a <vfprintf+0x254>
 732:	b0 c0       	rjmp	.+352    	; 0x894 <__DATA_REGION_LENGTH__+0x94>
 734:	e9 2f       	mov	r30, r25
 736:	e0 61       	ori	r30, 0x10	; 16
 738:	be 2e       	mov	r11, r30
 73a:	b4 fe       	sbrs	r11, 4
 73c:	0d c0       	rjmp	.+26     	; 0x758 <vfprintf+0x272>
 73e:	fb 2d       	mov	r31, r11
 740:	f4 60       	ori	r31, 0x04	; 4
 742:	bf 2e       	mov	r11, r31
 744:	09 c0       	rjmp	.+18     	; 0x758 <vfprintf+0x272>
 746:	34 fe       	sbrs	r3, 4
 748:	0a c0       	rjmp	.+20     	; 0x75e <vfprintf+0x278>
 74a:	29 2f       	mov	r18, r25
 74c:	26 60       	ori	r18, 0x06	; 6
 74e:	b2 2e       	mov	r11, r18
 750:	06 c0       	rjmp	.+12     	; 0x75e <vfprintf+0x278>
 752:	28 e0       	ldi	r18, 0x08	; 8
 754:	30 e0       	ldi	r19, 0x00	; 0
 756:	05 c0       	rjmp	.+10     	; 0x762 <vfprintf+0x27c>
 758:	20 e1       	ldi	r18, 0x10	; 16
 75a:	30 e0       	ldi	r19, 0x00	; 0
 75c:	02 c0       	rjmp	.+4      	; 0x762 <vfprintf+0x27c>
 75e:	20 e1       	ldi	r18, 0x10	; 16
 760:	32 e0       	ldi	r19, 0x02	; 2
 762:	f8 01       	movw	r30, r16
 764:	b7 fe       	sbrs	r11, 7
 766:	07 c0       	rjmp	.+14     	; 0x776 <vfprintf+0x290>
 768:	60 81       	ld	r22, Z
 76a:	71 81       	ldd	r23, Z+1	; 0x01
 76c:	82 81       	ldd	r24, Z+2	; 0x02
 76e:	93 81       	ldd	r25, Z+3	; 0x03
 770:	0c 5f       	subi	r16, 0xFC	; 252
 772:	1f 4f       	sbci	r17, 0xFF	; 255
 774:	06 c0       	rjmp	.+12     	; 0x782 <vfprintf+0x29c>
 776:	60 81       	ld	r22, Z
 778:	71 81       	ldd	r23, Z+1	; 0x01
 77a:	80 e0       	ldi	r24, 0x00	; 0
 77c:	90 e0       	ldi	r25, 0x00	; 0
 77e:	0e 5f       	subi	r16, 0xFE	; 254
 780:	1f 4f       	sbci	r17, 0xFF	; 255
 782:	a3 01       	movw	r20, r6
 784:	0e 94 a6 04 	call	0x94c	; 0x94c <__ultoa_invert>
 788:	88 2e       	mov	r8, r24
 78a:	86 18       	sub	r8, r6
 78c:	fb 2d       	mov	r31, r11
 78e:	ff 77       	andi	r31, 0x7F	; 127
 790:	3f 2e       	mov	r3, r31
 792:	36 fe       	sbrs	r3, 6
 794:	0d c0       	rjmp	.+26     	; 0x7b0 <vfprintf+0x2ca>
 796:	23 2d       	mov	r18, r3
 798:	2e 7f       	andi	r18, 0xFE	; 254
 79a:	a2 2e       	mov	r10, r18
 79c:	89 14       	cp	r8, r9
 79e:	58 f4       	brcc	.+22     	; 0x7b6 <vfprintf+0x2d0>
 7a0:	34 fe       	sbrs	r3, 4
 7a2:	0b c0       	rjmp	.+22     	; 0x7ba <vfprintf+0x2d4>
 7a4:	32 fc       	sbrc	r3, 2
 7a6:	09 c0       	rjmp	.+18     	; 0x7ba <vfprintf+0x2d4>
 7a8:	83 2d       	mov	r24, r3
 7aa:	8e 7e       	andi	r24, 0xEE	; 238
 7ac:	a8 2e       	mov	r10, r24
 7ae:	05 c0       	rjmp	.+10     	; 0x7ba <vfprintf+0x2d4>
 7b0:	b8 2c       	mov	r11, r8
 7b2:	a3 2c       	mov	r10, r3
 7b4:	03 c0       	rjmp	.+6      	; 0x7bc <vfprintf+0x2d6>
 7b6:	b8 2c       	mov	r11, r8
 7b8:	01 c0       	rjmp	.+2      	; 0x7bc <vfprintf+0x2d6>
 7ba:	b9 2c       	mov	r11, r9
 7bc:	a4 fe       	sbrs	r10, 4
 7be:	0f c0       	rjmp	.+30     	; 0x7de <vfprintf+0x2f8>
 7c0:	fe 01       	movw	r30, r28
 7c2:	e8 0d       	add	r30, r8
 7c4:	f1 1d       	adc	r31, r1
 7c6:	80 81       	ld	r24, Z
 7c8:	80 33       	cpi	r24, 0x30	; 48
 7ca:	21 f4       	brne	.+8      	; 0x7d4 <vfprintf+0x2ee>
 7cc:	9a 2d       	mov	r25, r10
 7ce:	99 7e       	andi	r25, 0xE9	; 233
 7d0:	a9 2e       	mov	r10, r25
 7d2:	09 c0       	rjmp	.+18     	; 0x7e6 <vfprintf+0x300>
 7d4:	a2 fe       	sbrs	r10, 2
 7d6:	06 c0       	rjmp	.+12     	; 0x7e4 <vfprintf+0x2fe>
 7d8:	b3 94       	inc	r11
 7da:	b3 94       	inc	r11
 7dc:	04 c0       	rjmp	.+8      	; 0x7e6 <vfprintf+0x300>
 7de:	8a 2d       	mov	r24, r10
 7e0:	86 78       	andi	r24, 0x86	; 134
 7e2:	09 f0       	breq	.+2      	; 0x7e6 <vfprintf+0x300>
 7e4:	b3 94       	inc	r11
 7e6:	a3 fc       	sbrc	r10, 3
 7e8:	11 c0       	rjmp	.+34     	; 0x80c <__DATA_REGION_LENGTH__+0xc>
 7ea:	a0 fe       	sbrs	r10, 0
 7ec:	06 c0       	rjmp	.+12     	; 0x7fa <vfprintf+0x314>
 7ee:	b2 14       	cp	r11, r2
 7f0:	88 f4       	brcc	.+34     	; 0x814 <__DATA_REGION_LENGTH__+0x14>
 7f2:	28 0c       	add	r2, r8
 7f4:	92 2c       	mov	r9, r2
 7f6:	9b 18       	sub	r9, r11
 7f8:	0e c0       	rjmp	.+28     	; 0x816 <__DATA_REGION_LENGTH__+0x16>
 7fa:	b2 14       	cp	r11, r2
 7fc:	60 f4       	brcc	.+24     	; 0x816 <__DATA_REGION_LENGTH__+0x16>
 7fe:	b6 01       	movw	r22, r12
 800:	80 e2       	ldi	r24, 0x20	; 32
 802:	90 e0       	ldi	r25, 0x00	; 0
 804:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <fputc>
 808:	b3 94       	inc	r11
 80a:	f7 cf       	rjmp	.-18     	; 0x7fa <vfprintf+0x314>
 80c:	b2 14       	cp	r11, r2
 80e:	18 f4       	brcc	.+6      	; 0x816 <__DATA_REGION_LENGTH__+0x16>
 810:	2b 18       	sub	r2, r11
 812:	02 c0       	rjmp	.+4      	; 0x818 <__DATA_REGION_LENGTH__+0x18>
 814:	98 2c       	mov	r9, r8
 816:	21 2c       	mov	r2, r1
 818:	a4 fe       	sbrs	r10, 4
 81a:	10 c0       	rjmp	.+32     	; 0x83c <__DATA_REGION_LENGTH__+0x3c>
 81c:	b6 01       	movw	r22, r12
 81e:	80 e3       	ldi	r24, 0x30	; 48
 820:	90 e0       	ldi	r25, 0x00	; 0
 822:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <fputc>
 826:	a2 fe       	sbrs	r10, 2
 828:	17 c0       	rjmp	.+46     	; 0x858 <__DATA_REGION_LENGTH__+0x58>
 82a:	a1 fc       	sbrc	r10, 1
 82c:	03 c0       	rjmp	.+6      	; 0x834 <__DATA_REGION_LENGTH__+0x34>
 82e:	88 e7       	ldi	r24, 0x78	; 120
 830:	90 e0       	ldi	r25, 0x00	; 0
 832:	02 c0       	rjmp	.+4      	; 0x838 <__DATA_REGION_LENGTH__+0x38>
 834:	88 e5       	ldi	r24, 0x58	; 88
 836:	90 e0       	ldi	r25, 0x00	; 0
 838:	b6 01       	movw	r22, r12
 83a:	0c c0       	rjmp	.+24     	; 0x854 <__DATA_REGION_LENGTH__+0x54>
 83c:	8a 2d       	mov	r24, r10
 83e:	86 78       	andi	r24, 0x86	; 134
 840:	59 f0       	breq	.+22     	; 0x858 <__DATA_REGION_LENGTH__+0x58>
 842:	a1 fe       	sbrs	r10, 1
 844:	02 c0       	rjmp	.+4      	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
 846:	8b e2       	ldi	r24, 0x2B	; 43
 848:	01 c0       	rjmp	.+2      	; 0x84c <__DATA_REGION_LENGTH__+0x4c>
 84a:	80 e2       	ldi	r24, 0x20	; 32
 84c:	a7 fc       	sbrc	r10, 7
 84e:	8d e2       	ldi	r24, 0x2D	; 45
 850:	b6 01       	movw	r22, r12
 852:	90 e0       	ldi	r25, 0x00	; 0
 854:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <fputc>
 858:	89 14       	cp	r8, r9
 85a:	38 f4       	brcc	.+14     	; 0x86a <__DATA_REGION_LENGTH__+0x6a>
 85c:	b6 01       	movw	r22, r12
 85e:	80 e3       	ldi	r24, 0x30	; 48
 860:	90 e0       	ldi	r25, 0x00	; 0
 862:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <fputc>
 866:	9a 94       	dec	r9
 868:	f7 cf       	rjmp	.-18     	; 0x858 <__DATA_REGION_LENGTH__+0x58>
 86a:	8a 94       	dec	r8
 86c:	f3 01       	movw	r30, r6
 86e:	e8 0d       	add	r30, r8
 870:	f1 1d       	adc	r31, r1
 872:	80 81       	ld	r24, Z
 874:	b6 01       	movw	r22, r12
 876:	90 e0       	ldi	r25, 0x00	; 0
 878:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <fputc>
 87c:	81 10       	cpse	r8, r1
 87e:	f5 cf       	rjmp	.-22     	; 0x86a <__DATA_REGION_LENGTH__+0x6a>
 880:	22 20       	and	r2, r2
 882:	09 f4       	brne	.+2      	; 0x886 <__DATA_REGION_LENGTH__+0x86>
 884:	42 ce       	rjmp	.-892    	; 0x50a <vfprintf+0x24>
 886:	b6 01       	movw	r22, r12
 888:	80 e2       	ldi	r24, 0x20	; 32
 88a:	90 e0       	ldi	r25, 0x00	; 0
 88c:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <fputc>
 890:	2a 94       	dec	r2
 892:	f6 cf       	rjmp	.-20     	; 0x880 <__DATA_REGION_LENGTH__+0x80>
 894:	f6 01       	movw	r30, r12
 896:	86 81       	ldd	r24, Z+6	; 0x06
 898:	97 81       	ldd	r25, Z+7	; 0x07
 89a:	02 c0       	rjmp	.+4      	; 0x8a0 <__DATA_REGION_LENGTH__+0xa0>
 89c:	8f ef       	ldi	r24, 0xFF	; 255
 89e:	9f ef       	ldi	r25, 0xFF	; 255
 8a0:	2b 96       	adiw	r28, 0x0b	; 11
 8a2:	e2 e1       	ldi	r30, 0x12	; 18
 8a4:	0c 94 20 05 	jmp	0xa40	; 0xa40 <__epilogue_restores__>

000008a8 <strnlen_P>:
 8a8:	fc 01       	movw	r30, r24
 8aa:	05 90       	lpm	r0, Z+
 8ac:	61 50       	subi	r22, 0x01	; 1
 8ae:	70 40       	sbci	r23, 0x00	; 0
 8b0:	01 10       	cpse	r0, r1
 8b2:	d8 f7       	brcc	.-10     	; 0x8aa <strnlen_P+0x2>
 8b4:	80 95       	com	r24
 8b6:	90 95       	com	r25
 8b8:	8e 0f       	add	r24, r30
 8ba:	9f 1f       	adc	r25, r31
 8bc:	08 95       	ret

000008be <strnlen>:
 8be:	fc 01       	movw	r30, r24
 8c0:	61 50       	subi	r22, 0x01	; 1
 8c2:	70 40       	sbci	r23, 0x00	; 0
 8c4:	01 90       	ld	r0, Z+
 8c6:	01 10       	cpse	r0, r1
 8c8:	d8 f7       	brcc	.-10     	; 0x8c0 <strnlen+0x2>
 8ca:	80 95       	com	r24
 8cc:	90 95       	com	r25
 8ce:	8e 0f       	add	r24, r30
 8d0:	9f 1f       	adc	r25, r31
 8d2:	08 95       	ret

000008d4 <fputc>:
 8d4:	0f 93       	push	r16
 8d6:	1f 93       	push	r17
 8d8:	cf 93       	push	r28
 8da:	df 93       	push	r29
 8dc:	fb 01       	movw	r30, r22
 8de:	23 81       	ldd	r18, Z+3	; 0x03
 8e0:	21 fd       	sbrc	r18, 1
 8e2:	03 c0       	rjmp	.+6      	; 0x8ea <fputc+0x16>
 8e4:	8f ef       	ldi	r24, 0xFF	; 255
 8e6:	9f ef       	ldi	r25, 0xFF	; 255
 8e8:	2c c0       	rjmp	.+88     	; 0x942 <__stack+0x43>
 8ea:	22 ff       	sbrs	r18, 2
 8ec:	16 c0       	rjmp	.+44     	; 0x91a <__stack+0x1b>
 8ee:	46 81       	ldd	r20, Z+6	; 0x06
 8f0:	57 81       	ldd	r21, Z+7	; 0x07
 8f2:	24 81       	ldd	r18, Z+4	; 0x04
 8f4:	35 81       	ldd	r19, Z+5	; 0x05
 8f6:	42 17       	cp	r20, r18
 8f8:	53 07       	cpc	r21, r19
 8fa:	44 f4       	brge	.+16     	; 0x90c <__stack+0xd>
 8fc:	a0 81       	ld	r26, Z
 8fe:	b1 81       	ldd	r27, Z+1	; 0x01
 900:	9d 01       	movw	r18, r26
 902:	2f 5f       	subi	r18, 0xFF	; 255
 904:	3f 4f       	sbci	r19, 0xFF	; 255
 906:	31 83       	std	Z+1, r19	; 0x01
 908:	20 83       	st	Z, r18
 90a:	8c 93       	st	X, r24
 90c:	26 81       	ldd	r18, Z+6	; 0x06
 90e:	37 81       	ldd	r19, Z+7	; 0x07
 910:	2f 5f       	subi	r18, 0xFF	; 255
 912:	3f 4f       	sbci	r19, 0xFF	; 255
 914:	37 83       	std	Z+7, r19	; 0x07
 916:	26 83       	std	Z+6, r18	; 0x06
 918:	14 c0       	rjmp	.+40     	; 0x942 <__stack+0x43>
 91a:	8b 01       	movw	r16, r22
 91c:	ec 01       	movw	r28, r24
 91e:	fb 01       	movw	r30, r22
 920:	00 84       	ldd	r0, Z+8	; 0x08
 922:	f1 85       	ldd	r31, Z+9	; 0x09
 924:	e0 2d       	mov	r30, r0
 926:	09 95       	icall
 928:	89 2b       	or	r24, r25
 92a:	e1 f6       	brne	.-72     	; 0x8e4 <fputc+0x10>
 92c:	d8 01       	movw	r26, r16
 92e:	16 96       	adiw	r26, 0x06	; 6
 930:	8d 91       	ld	r24, X+
 932:	9c 91       	ld	r25, X
 934:	17 97       	sbiw	r26, 0x07	; 7
 936:	01 96       	adiw	r24, 0x01	; 1
 938:	17 96       	adiw	r26, 0x07	; 7
 93a:	9c 93       	st	X, r25
 93c:	8e 93       	st	-X, r24
 93e:	16 97       	sbiw	r26, 0x06	; 6
 940:	ce 01       	movw	r24, r28
 942:	df 91       	pop	r29
 944:	cf 91       	pop	r28
 946:	1f 91       	pop	r17
 948:	0f 91       	pop	r16
 94a:	08 95       	ret

0000094c <__ultoa_invert>:
 94c:	fa 01       	movw	r30, r20
 94e:	aa 27       	eor	r26, r26
 950:	28 30       	cpi	r18, 0x08	; 8
 952:	51 f1       	breq	.+84     	; 0x9a8 <__ultoa_invert+0x5c>
 954:	20 31       	cpi	r18, 0x10	; 16
 956:	81 f1       	breq	.+96     	; 0x9b8 <__ultoa_invert+0x6c>
 958:	e8 94       	clt
 95a:	6f 93       	push	r22
 95c:	6e 7f       	andi	r22, 0xFE	; 254
 95e:	6e 5f       	subi	r22, 0xFE	; 254
 960:	7f 4f       	sbci	r23, 0xFF	; 255
 962:	8f 4f       	sbci	r24, 0xFF	; 255
 964:	9f 4f       	sbci	r25, 0xFF	; 255
 966:	af 4f       	sbci	r26, 0xFF	; 255
 968:	b1 e0       	ldi	r27, 0x01	; 1
 96a:	3e d0       	rcall	.+124    	; 0x9e8 <__ultoa_invert+0x9c>
 96c:	b4 e0       	ldi	r27, 0x04	; 4
 96e:	3c d0       	rcall	.+120    	; 0x9e8 <__ultoa_invert+0x9c>
 970:	67 0f       	add	r22, r23
 972:	78 1f       	adc	r23, r24
 974:	89 1f       	adc	r24, r25
 976:	9a 1f       	adc	r25, r26
 978:	a1 1d       	adc	r26, r1
 97a:	68 0f       	add	r22, r24
 97c:	79 1f       	adc	r23, r25
 97e:	8a 1f       	adc	r24, r26
 980:	91 1d       	adc	r25, r1
 982:	a1 1d       	adc	r26, r1
 984:	6a 0f       	add	r22, r26
 986:	71 1d       	adc	r23, r1
 988:	81 1d       	adc	r24, r1
 98a:	91 1d       	adc	r25, r1
 98c:	a1 1d       	adc	r26, r1
 98e:	20 d0       	rcall	.+64     	; 0x9d0 <__ultoa_invert+0x84>
 990:	09 f4       	brne	.+2      	; 0x994 <__ultoa_invert+0x48>
 992:	68 94       	set
 994:	3f 91       	pop	r19
 996:	2a e0       	ldi	r18, 0x0A	; 10
 998:	26 9f       	mul	r18, r22
 99a:	11 24       	eor	r1, r1
 99c:	30 19       	sub	r19, r0
 99e:	30 5d       	subi	r19, 0xD0	; 208
 9a0:	31 93       	st	Z+, r19
 9a2:	de f6       	brtc	.-74     	; 0x95a <__ultoa_invert+0xe>
 9a4:	cf 01       	movw	r24, r30
 9a6:	08 95       	ret
 9a8:	46 2f       	mov	r20, r22
 9aa:	47 70       	andi	r20, 0x07	; 7
 9ac:	40 5d       	subi	r20, 0xD0	; 208
 9ae:	41 93       	st	Z+, r20
 9b0:	b3 e0       	ldi	r27, 0x03	; 3
 9b2:	0f d0       	rcall	.+30     	; 0x9d2 <__ultoa_invert+0x86>
 9b4:	c9 f7       	brne	.-14     	; 0x9a8 <__ultoa_invert+0x5c>
 9b6:	f6 cf       	rjmp	.-20     	; 0x9a4 <__ultoa_invert+0x58>
 9b8:	46 2f       	mov	r20, r22
 9ba:	4f 70       	andi	r20, 0x0F	; 15
 9bc:	40 5d       	subi	r20, 0xD0	; 208
 9be:	4a 33       	cpi	r20, 0x3A	; 58
 9c0:	18 f0       	brcs	.+6      	; 0x9c8 <__ultoa_invert+0x7c>
 9c2:	49 5d       	subi	r20, 0xD9	; 217
 9c4:	31 fd       	sbrc	r19, 1
 9c6:	40 52       	subi	r20, 0x20	; 32
 9c8:	41 93       	st	Z+, r20
 9ca:	02 d0       	rcall	.+4      	; 0x9d0 <__ultoa_invert+0x84>
 9cc:	a9 f7       	brne	.-22     	; 0x9b8 <__ultoa_invert+0x6c>
 9ce:	ea cf       	rjmp	.-44     	; 0x9a4 <__ultoa_invert+0x58>
 9d0:	b4 e0       	ldi	r27, 0x04	; 4
 9d2:	a6 95       	lsr	r26
 9d4:	97 95       	ror	r25
 9d6:	87 95       	ror	r24
 9d8:	77 95       	ror	r23
 9da:	67 95       	ror	r22
 9dc:	ba 95       	dec	r27
 9de:	c9 f7       	brne	.-14     	; 0x9d2 <__ultoa_invert+0x86>
 9e0:	00 97       	sbiw	r24, 0x00	; 0
 9e2:	61 05       	cpc	r22, r1
 9e4:	71 05       	cpc	r23, r1
 9e6:	08 95       	ret
 9e8:	9b 01       	movw	r18, r22
 9ea:	ac 01       	movw	r20, r24
 9ec:	0a 2e       	mov	r0, r26
 9ee:	06 94       	lsr	r0
 9f0:	57 95       	ror	r21
 9f2:	47 95       	ror	r20
 9f4:	37 95       	ror	r19
 9f6:	27 95       	ror	r18
 9f8:	ba 95       	dec	r27
 9fa:	c9 f7       	brne	.-14     	; 0x9ee <__ultoa_invert+0xa2>
 9fc:	62 0f       	add	r22, r18
 9fe:	73 1f       	adc	r23, r19
 a00:	84 1f       	adc	r24, r20
 a02:	95 1f       	adc	r25, r21
 a04:	a0 1d       	adc	r26, r0
 a06:	08 95       	ret

00000a08 <__prologue_saves__>:
 a08:	2f 92       	push	r2
 a0a:	3f 92       	push	r3
 a0c:	4f 92       	push	r4
 a0e:	5f 92       	push	r5
 a10:	6f 92       	push	r6
 a12:	7f 92       	push	r7
 a14:	8f 92       	push	r8
 a16:	9f 92       	push	r9
 a18:	af 92       	push	r10
 a1a:	bf 92       	push	r11
 a1c:	cf 92       	push	r12
 a1e:	df 92       	push	r13
 a20:	ef 92       	push	r14
 a22:	ff 92       	push	r15
 a24:	0f 93       	push	r16
 a26:	1f 93       	push	r17
 a28:	cf 93       	push	r28
 a2a:	df 93       	push	r29
 a2c:	cd b7       	in	r28, 0x3d	; 61
 a2e:	de b7       	in	r29, 0x3e	; 62
 a30:	ca 1b       	sub	r28, r26
 a32:	db 0b       	sbc	r29, r27
 a34:	0f b6       	in	r0, 0x3f	; 63
 a36:	f8 94       	cli
 a38:	de bf       	out	0x3e, r29	; 62
 a3a:	0f be       	out	0x3f, r0	; 63
 a3c:	cd bf       	out	0x3d, r28	; 61
 a3e:	09 94       	ijmp

00000a40 <__epilogue_restores__>:
 a40:	2a 88       	ldd	r2, Y+18	; 0x12
 a42:	39 88       	ldd	r3, Y+17	; 0x11
 a44:	48 88       	ldd	r4, Y+16	; 0x10
 a46:	5f 84       	ldd	r5, Y+15	; 0x0f
 a48:	6e 84       	ldd	r6, Y+14	; 0x0e
 a4a:	7d 84       	ldd	r7, Y+13	; 0x0d
 a4c:	8c 84       	ldd	r8, Y+12	; 0x0c
 a4e:	9b 84       	ldd	r9, Y+11	; 0x0b
 a50:	aa 84       	ldd	r10, Y+10	; 0x0a
 a52:	b9 84       	ldd	r11, Y+9	; 0x09
 a54:	c8 84       	ldd	r12, Y+8	; 0x08
 a56:	df 80       	ldd	r13, Y+7	; 0x07
 a58:	ee 80       	ldd	r14, Y+6	; 0x06
 a5a:	fd 80       	ldd	r15, Y+5	; 0x05
 a5c:	0c 81       	ldd	r16, Y+4	; 0x04
 a5e:	1b 81       	ldd	r17, Y+3	; 0x03
 a60:	aa 81       	ldd	r26, Y+2	; 0x02
 a62:	b9 81       	ldd	r27, Y+1	; 0x01
 a64:	ce 0f       	add	r28, r30
 a66:	d1 1d       	adc	r29, r1
 a68:	0f b6       	in	r0, 0x3f	; 63
 a6a:	f8 94       	cli
 a6c:	de bf       	out	0x3e, r29	; 62
 a6e:	0f be       	out	0x3f, r0	; 63
 a70:	cd bf       	out	0x3d, r28	; 61
 a72:	ed 01       	movw	r28, r26
 a74:	08 95       	ret

00000a76 <_exit>:
 a76:	f8 94       	cli

00000a78 <__stop_program>:
 a78:	ff cf       	rjmp	.-2      	; 0xa78 <__stop_program>
