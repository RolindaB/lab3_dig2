
Maestro.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000011a  00800100  00000ce6  00000d7a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ce6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000009e  0080021a  0080021a  00000e94  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000e94  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ef0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e0  00000000  00000000  00000f30  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000143c  00000000  00000000  00001010  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a1d  00000000  00000000  0000244c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000919  00000000  00000000  00002e69  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000208  00000000  00000000  00003784  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006c0  00000000  00000000  0000398c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007d3  00000000  00000000  0000404c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  0000481f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3b 00 	jmp	0x76	; 0x76 <__ctors_end>
   4:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   8:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  10:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  14:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  18:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  1c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  20:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  24:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  28:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  2c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  30:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  34:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  38:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  3c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  40:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  44:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  48:	0c 94 07 03 	jmp	0x60e	; 0x60e <__vector_18>
  4c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  50:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  54:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  58:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  5c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  60:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  64:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  68:	08 02       	muls	r16, r24
  6a:	0f 02       	muls	r16, r31
  6c:	16 02       	muls	r17, r22
  6e:	20 02       	muls	r18, r16
  70:	2a 02       	muls	r18, r26
  72:	34 02       	muls	r19, r20
  74:	3e 02       	muls	r19, r30

00000076 <__ctors_end>:
  76:	11 24       	eor	r1, r1
  78:	1f be       	out	0x3f, r1	; 63
  7a:	cf ef       	ldi	r28, 0xFF	; 255
  7c:	d8 e0       	ldi	r29, 0x08	; 8
  7e:	de bf       	out	0x3e, r29	; 62
  80:	cd bf       	out	0x3d, r28	; 61

00000082 <__do_copy_data>:
  82:	12 e0       	ldi	r17, 0x02	; 2
  84:	a0 e0       	ldi	r26, 0x00	; 0
  86:	b1 e0       	ldi	r27, 0x01	; 1
  88:	e6 ee       	ldi	r30, 0xE6	; 230
  8a:	fc e0       	ldi	r31, 0x0C	; 12
  8c:	02 c0       	rjmp	.+4      	; 0x92 <__do_copy_data+0x10>
  8e:	05 90       	lpm	r0, Z+
  90:	0d 92       	st	X+, r0
  92:	aa 31       	cpi	r26, 0x1A	; 26
  94:	b1 07       	cpc	r27, r17
  96:	d9 f7       	brne	.-10     	; 0x8e <__do_copy_data+0xc>

00000098 <__do_clear_bss>:
  98:	22 e0       	ldi	r18, 0x02	; 2
  9a:	aa e1       	ldi	r26, 0x1A	; 26
  9c:	b2 e0       	ldi	r27, 0x02	; 2
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a8 3b       	cpi	r26, 0xB8	; 184
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	0e 94 b1 01 	call	0x362	; 0x362 <main>
  ac:	0c 94 71 06 	jmp	0xce2	; 0xce2 <_exit>

000000b0 <__bad_interrupt>:
  b0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b4 <setUp>:
void IntCont();
void lecturaADC();
//inicialización
void setUp() {
	// Configura PC4 y PC5 como salidas
	DDRC |= (1 << DDC4) | (1 << DDC5);
  b4:	87 b1       	in	r24, 0x07	; 7
  b6:	80 63       	ori	r24, 0x30	; 48
  b8:	87 b9       	out	0x07, r24	; 7
	// Configura PD2 a PD7 como salidas
	DDRD |= (1 << DDD2) | (1 << DDD3) | (1 << DDD4) | (1 << DDD5) | (1 << DDD6) | (1 << DDD7);
  ba:	8a b1       	in	r24, 0x0a	; 10
  bc:	8c 6f       	ori	r24, 0xFC	; 252
  be:	8a b9       	out	0x0a, r24	; 10
	// Inicializa los LEDs apagados
	PORTC &= ~((1 << PORTC4) | (1 << PORTC5));
  c0:	88 b1       	in	r24, 0x08	; 8
  c2:	8f 7c       	andi	r24, 0xCF	; 207
  c4:	88 b9       	out	0x08, r24	; 8
	PORTD &= ~((1 << PORTD2) | (1 << PORTD3) | (1 << PORTD4) | (1 << PORTD5) | (1 << PORTD6) | (1 << PORTD7));
  c6:	8b b1       	in	r24, 0x0b	; 11
  c8:	83 70       	andi	r24, 0x03	; 3
  ca:	8b b9       	out	0x0b, r24	; 11
	SpiInit(SPI_MASTER_OSC_DIV128, SPI_DATA_ORDER_MSB, SPI_CLOCK_IDLE_LOW, SPI_CLOK_FIRST_EDGE);
  cc:	20 e0       	ldi	r18, 0x00	; 0
  ce:	40 e0       	ldi	r20, 0x00	; 0
  d0:	60 e0       	ldi	r22, 0x00	; 0
  d2:	86 e5       	ldi	r24, 0x56	; 86
  d4:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <SpiInit>
	UART_init(9600); // Asegúrate de inicializar UART
  d8:	80 e8       	ldi	r24, 0x80	; 128
  da:	95 e2       	ldi	r25, 0x25	; 37
  dc:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <UART_init>
  e0:	08 95       	ret

000000e2 <enviarValoresUART>:
}
//uso de uart a consola
void enviarValoresUART() {
  e2:	1f 93       	push	r17
  e4:	cf 93       	push	r28
  e6:	df 93       	push	r29
	valorSpi2b = (int)(valorSpi2);
  e8:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <valorSpi2>
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	90 93 b5 02 	sts	0x02B5, r25	; 0x8002b5 <valorSpi2b+0x1>
  f2:	80 93 b4 02 	sts	0x02B4, r24	; 0x8002b4 <valorSpi2b>
	valorSpi1b = (int)(valorSpi1);
  f6:	80 91 1f 02 	lds	r24, 0x021F	; 0x80021f <valorSpi1>
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	90 93 b7 02 	sts	0x02B7, r25	; 0x8002b7 <valorSpi1b+0x1>
 100:	80 93 b6 02 	sts	0x02B6, r24	; 0x8002b6 <valorSpi1b>
	UART_send_string("\n\r");
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	91 e0       	ldi	r25, 0x01	; 1
 108:	0e 94 8a 02 	call	0x514	; 0x514 <UART_send_string>
	snprintf(buffer, sizeof(buffer), "P1: %d \r\n", valorSpi1b);
 10c:	80 91 b7 02 	lds	r24, 0x02B7	; 0x8002b7 <valorSpi1b+0x1>
 110:	8f 93       	push	r24
 112:	80 91 b6 02 	lds	r24, 0x02B6	; 0x8002b6 <valorSpi1b>
 116:	8f 93       	push	r24
 118:	84 e0       	ldi	r24, 0x04	; 4
 11a:	91 e0       	ldi	r25, 0x01	; 1
 11c:	9f 93       	push	r25
 11e:	8f 93       	push	r24
 120:	1f 92       	push	r1
 122:	10 e1       	ldi	r17, 0x10	; 16
 124:	1f 93       	push	r17
 126:	c4 ea       	ldi	r28, 0xA4	; 164
 128:	d2 e0       	ldi	r29, 0x02	; 2
 12a:	df 93       	push	r29
 12c:	cf 93       	push	r28
 12e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <snprintf>
	UART_send_string(buffer);
 132:	ce 01       	movw	r24, r28
 134:	0e 94 8a 02 	call	0x514	; 0x514 <UART_send_string>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 138:	8f e9       	ldi	r24, 0x9F	; 159
 13a:	9f e0       	ldi	r25, 0x0F	; 15
 13c:	01 97       	sbiw	r24, 0x01	; 1
 13e:	f1 f7       	brne	.-4      	; 0x13c <enviarValoresUART+0x5a>
 140:	00 c0       	rjmp	.+0      	; 0x142 <enviarValoresUART+0x60>
 142:	00 00       	nop
	_delay_ms(1);
	snprintf(buffer, sizeof(buffer), "P2: %d \r\n", valorSpi2b);
 144:	80 91 b5 02 	lds	r24, 0x02B5	; 0x8002b5 <valorSpi2b+0x1>
 148:	8f 93       	push	r24
 14a:	80 91 b4 02 	lds	r24, 0x02B4	; 0x8002b4 <valorSpi2b>
 14e:	8f 93       	push	r24
 150:	8e e0       	ldi	r24, 0x0E	; 14
 152:	91 e0       	ldi	r25, 0x01	; 1
 154:	9f 93       	push	r25
 156:	8f 93       	push	r24
 158:	1f 92       	push	r1
 15a:	1f 93       	push	r17
 15c:	df 93       	push	r29
 15e:	cf 93       	push	r28
 160:	0e 94 79 03 	call	0x6f2	; 0x6f2 <snprintf>
	UART_send_string(buffer);
 164:	ce 01       	movw	r24, r28
 166:	0e 94 8a 02 	call	0x514	; 0x514 <UART_send_string>
}
 16a:	8d b7       	in	r24, 0x3d	; 61
 16c:	9e b7       	in	r25, 0x3e	; 62
 16e:	40 96       	adiw	r24, 0x10	; 16
 170:	0f b6       	in	r0, 0x3f	; 63
 172:	f8 94       	cli
 174:	9e bf       	out	0x3e, r25	; 62
 176:	0f be       	out	0x3f, r0	; 63
 178:	8d bf       	out	0x3d, r24	; 61
 17a:	df 91       	pop	r29
 17c:	cf 91       	pop	r28
 17e:	1f 91       	pop	r17
 180:	08 95       	ret

00000182 <lecturaADC>:
//leer adc
void lecturaADC() {
	PORTB &= ~(1<<PORTB2); // SLAVE SELECT LOW
 182:	85 b1       	in	r24, 0x05	; 5
 184:	8b 7f       	andi	r24, 0xFB	; 251
 186:	85 b9       	out	0x05, r24	; 5
	SpiWrite('c'); // Suponiendo que 'c' se representa como 0xC0
 188:	83 e6       	ldi	r24, 0x63	; 99
 18a:	0e 94 55 02 	call	0x4aa	; 0x4aa <SpiWrite>
	valorSpi1 = SpiRead();
 18e:	0e 94 57 02 	call	0x4ae	; 0x4ae <SpiRead>
 192:	80 93 1f 02 	sts	0x021F, r24	; 0x80021f <valorSpi1>
 196:	8f e3       	ldi	r24, 0x3F	; 63
 198:	9c e9       	ldi	r25, 0x9C	; 156
 19a:	01 97       	sbiw	r24, 0x01	; 1
 19c:	f1 f7       	brne	.-4      	; 0x19a <lecturaADC+0x18>
 19e:	00 c0       	rjmp	.+0      	; 0x1a0 <lecturaADC+0x1e>
 1a0:	00 00       	nop
	_delay_ms(10);
	SpiWrite('d'); // Suponiendo que 'd' se representa como 0xD0
 1a2:	84 e6       	ldi	r24, 0x64	; 100
 1a4:	0e 94 55 02 	call	0x4aa	; 0x4aa <SpiWrite>
	valorSpi2 = SpiRead();
 1a8:	0e 94 57 02 	call	0x4ae	; 0x4ae <SpiRead>
 1ac:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <valorSpi2>
 1b0:	8f e3       	ldi	r24, 0x3F	; 63
 1b2:	9c e9       	ldi	r25, 0x9C	; 156
 1b4:	01 97       	sbiw	r24, 0x01	; 1
 1b6:	f1 f7       	brne	.-4      	; 0x1b4 <lecturaADC+0x32>
 1b8:	00 c0       	rjmp	.+0      	; 0x1ba <lecturaADC+0x38>
 1ba:	00 00       	nop
	_delay_ms(10);
	PORTB |= (1<<PORTB2); // SLAVE SELECT HIGH
 1bc:	85 b1       	in	r24, 0x05	; 5
 1be:	84 60       	ori	r24, 0x04	; 4
 1c0:	85 b9       	out	0x05, r24	; 5
 1c2:	08 95       	ret

000001c4 <refreshPort>:
/********************Mape0 de leds **************************************/

// Actualiza los LEDs según el valor recibido
void refreshPort(uint8_t value) {
	// Actualiza cada bit en PORTD y PORTC según el valor recibido
	if (value & 0b00000001) {  // Bit 0
 1c4:	80 ff       	sbrs	r24, 0
 1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <refreshPort+0xc>
		PORTC |= (1 << PORTC4);
 1c8:	98 b1       	in	r25, 0x08	; 8
 1ca:	90 61       	ori	r25, 0x10	; 16
 1cc:	98 b9       	out	0x08, r25	; 8
 1ce:	03 c0       	rjmp	.+6      	; 0x1d6 <refreshPort+0x12>
		} else {
		PORTC &= ~(1 << PORTC4);
 1d0:	98 b1       	in	r25, 0x08	; 8
 1d2:	9f 7e       	andi	r25, 0xEF	; 239
 1d4:	98 b9       	out	0x08, r25	; 8
	}

	if (value & 0b00000010) {  // Bit 1
 1d6:	81 ff       	sbrs	r24, 1
 1d8:	04 c0       	rjmp	.+8      	; 0x1e2 <refreshPort+0x1e>
		PORTC |= (1 << PORTC5);
 1da:	98 b1       	in	r25, 0x08	; 8
 1dc:	90 62       	ori	r25, 0x20	; 32
 1de:	98 b9       	out	0x08, r25	; 8
 1e0:	03 c0       	rjmp	.+6      	; 0x1e8 <refreshPort+0x24>
		} else {
		PORTC &= ~(1 << PORTC5);
 1e2:	98 b1       	in	r25, 0x08	; 8
 1e4:	9f 7d       	andi	r25, 0xDF	; 223
 1e6:	98 b9       	out	0x08, r25	; 8
	}

	if (value & 0b00000100) {  // Bit 2
 1e8:	82 ff       	sbrs	r24, 2
 1ea:	04 c0       	rjmp	.+8      	; 0x1f4 <refreshPort+0x30>
		PORTD |= (1 << PORTD2);
 1ec:	9b b1       	in	r25, 0x0b	; 11
 1ee:	94 60       	ori	r25, 0x04	; 4
 1f0:	9b b9       	out	0x0b, r25	; 11
 1f2:	03 c0       	rjmp	.+6      	; 0x1fa <refreshPort+0x36>
		} else {
		PORTD &= ~(1 << PORTD2);
 1f4:	9b b1       	in	r25, 0x0b	; 11
 1f6:	9b 7f       	andi	r25, 0xFB	; 251
 1f8:	9b b9       	out	0x0b, r25	; 11
	}

	if (value & 0b00001000) {  // Bit 3
 1fa:	83 ff       	sbrs	r24, 3
 1fc:	04 c0       	rjmp	.+8      	; 0x206 <refreshPort+0x42>
		PORTD |= (1 << PORTD3);
 1fe:	9b b1       	in	r25, 0x0b	; 11
 200:	98 60       	ori	r25, 0x08	; 8
 202:	9b b9       	out	0x0b, r25	; 11
 204:	03 c0       	rjmp	.+6      	; 0x20c <refreshPort+0x48>
		} else {
		PORTD &= ~(1 << PORTD3);
 206:	9b b1       	in	r25, 0x0b	; 11
 208:	97 7f       	andi	r25, 0xF7	; 247
 20a:	9b b9       	out	0x0b, r25	; 11
	}

	if (value & 0b00010000) {  // Bit 4
 20c:	84 ff       	sbrs	r24, 4
 20e:	04 c0       	rjmp	.+8      	; 0x218 <refreshPort+0x54>
		PORTD |= (1 << PORTD4);
 210:	9b b1       	in	r25, 0x0b	; 11
 212:	90 61       	ori	r25, 0x10	; 16
 214:	9b b9       	out	0x0b, r25	; 11
 216:	03 c0       	rjmp	.+6      	; 0x21e <refreshPort+0x5a>
		} else {
		PORTD &= ~(1 << PORTD4);
 218:	9b b1       	in	r25, 0x0b	; 11
 21a:	9f 7e       	andi	r25, 0xEF	; 239
 21c:	9b b9       	out	0x0b, r25	; 11
	}

	if (value & 0b00100000) {  // Bit 5
 21e:	85 ff       	sbrs	r24, 5
 220:	04 c0       	rjmp	.+8      	; 0x22a <refreshPort+0x66>
		PORTD |= (1 << PORTD5);
 222:	9b b1       	in	r25, 0x0b	; 11
 224:	90 62       	ori	r25, 0x20	; 32
 226:	9b b9       	out	0x0b, r25	; 11
 228:	03 c0       	rjmp	.+6      	; 0x230 <refreshPort+0x6c>
		} else {
		PORTD &= ~(1 << PORTD5);
 22a:	9b b1       	in	r25, 0x0b	; 11
 22c:	9f 7d       	andi	r25, 0xDF	; 223
 22e:	9b b9       	out	0x0b, r25	; 11
	}

	if (value & 0b01000000) {  // Bit 6
 230:	86 ff       	sbrs	r24, 6
 232:	04 c0       	rjmp	.+8      	; 0x23c <refreshPort+0x78>
		PORTD |= (1 << PORTD6);
 234:	9b b1       	in	r25, 0x0b	; 11
 236:	90 64       	ori	r25, 0x40	; 64
 238:	9b b9       	out	0x0b, r25	; 11
 23a:	03 c0       	rjmp	.+6      	; 0x242 <refreshPort+0x7e>
		} else {
		PORTD &= ~(1 << PORTD6);
 23c:	9b b1       	in	r25, 0x0b	; 11
 23e:	9f 7b       	andi	r25, 0xBF	; 191
 240:	9b b9       	out	0x0b, r25	; 11
	}

	if (value & 0b10000000) {  // Bit 7
 242:	88 23       	and	r24, r24
 244:	24 f4       	brge	.+8      	; 0x24e <refreshPort+0x8a>
		PORTD |= (1 << PORTD7);
 246:	8b b1       	in	r24, 0x0b	; 11
 248:	80 68       	ori	r24, 0x80	; 128
 24a:	8b b9       	out	0x0b, r24	; 11
 24c:	08 95       	ret
		} else {
		PORTD &= ~(1 << PORTD7);
 24e:	8b b1       	in	r24, 0x0b	; 11
 250:	8f 77       	andi	r24, 0x7F	; 127
 252:	8b b9       	out	0x0b, r24	; 11
 254:	08 95       	ret

00000256 <contNUm>:
	}
}

/*******************Contador uart***************************************/
void contNUm(){
	UART_send_string("\n\r");
 256:	81 e0       	ldi	r24, 0x01	; 1
 258:	91 e0       	ldi	r25, 0x01	; 1
 25a:	0e 94 8a 02 	call	0x514	; 0x514 <UART_send_string>
	// Mensaje inicial para el usuario
	UART_send_string("Por favor, ingresa un número (0-255): ");
 25e:	88 e1       	ldi	r24, 0x18	; 24
 260:	91 e0       	ldi	r25, 0x01	; 1
 262:	0e 94 8a 02 	call	0x514	; 0x514 <UART_send_string>
	// Lee una cadena de caracteres desde UART
		UART_receive_string(input_buffer, sizeof(input_buffer));
 266:	64 e0       	ldi	r22, 0x04	; 4
 268:	80 ea       	ldi	r24, 0xA0	; 160
 26a:	92 e0       	ldi	r25, 0x02	; 2
 26c:	0e 94 df 02 	call	0x5be	; 0x5be <UART_receive_string>

		// Envía un salto de línea antes de imprimir el mensaje recibido
		UART_send('\n');
 270:	8a e0       	ldi	r24, 0x0A	; 10
 272:	0e 94 83 02 	call	0x506	; 0x506 <UART_send>
		UART_send('\r'); // Retorno de carro para asegurar la posición del cursor al inicio de la línea
 276:	8d e0       	ldi	r24, 0x0D	; 13
 278:	0e 94 83 02 	call	0x506	; 0x506 <UART_send>

		UART_send_string("Cadena recibida: ");
 27c:	8f e3       	ldi	r24, 0x3F	; 63
 27e:	91 e0       	ldi	r25, 0x01	; 1
 280:	0e 94 8a 02 	call	0x514	; 0x514 <UART_send_string>
		UART_send_string(input_buffer);
 284:	80 ea       	ldi	r24, 0xA0	; 160
 286:	92 e0       	ldi	r25, 0x02	; 2
 288:	0e 94 8a 02 	call	0x514	; 0x514 <UART_send_string>
		UART_send('\n');
 28c:	8a e0       	ldi	r24, 0x0A	; 10
 28e:	0e 94 83 02 	call	0x506	; 0x506 <UART_send>
		// Convierte la cadena a un número entero
		received_value = atoi(input_buffer);
 292:	80 ea       	ldi	r24, 0xA0	; 160
 294:	92 e0       	ldi	r25, 0x02	; 2
 296:	0e 94 53 03 	call	0x6a6	; 0x6a6 <atoi>
 29a:	90 93 1b 02 	sts	0x021B, r25	; 0x80021b <__data_end+0x1>
 29e:	80 93 1a 02 	sts	0x021A, r24	; 0x80021a <__data_end>
		// Envía un salto de línea antes de imprimir el mensaje recibido
		UART_send('\n');
 2a2:	8a e0       	ldi	r24, 0x0A	; 10
 2a4:	0e 94 83 02 	call	0x506	; 0x506 <UART_send>
		UART_send('\r'); // Retorno de carro para asegurar la posición del cursor al inicio de la línea
 2a8:	8d e0       	ldi	r24, 0x0D	; 13
 2aa:	0e 94 83 02 	call	0x506	; 0x506 <UART_send>
		// Envía un salto de línea antes de imprimir el valor entero
		UART_send_string("Valor recibido como entero: ");
 2ae:	81 e5       	ldi	r24, 0x51	; 81
 2b0:	91 e0       	ldi	r25, 0x01	; 1
 2b2:	0e 94 8a 02 	call	0x514	; 0x514 <UART_send_string>
		UART_send_number(received_value);
 2b6:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <__data_end>
 2ba:	0e 94 97 02 	call	0x52e	; 0x52e <UART_send_number>
		// Envía un salto de línea antes de imprimir el mensaje recibido
		UART_send('\n');
 2be:	8a e0       	ldi	r24, 0x0A	; 10
 2c0:	0e 94 83 02 	call	0x506	; 0x506 <UART_send>
		UART_send('\r'); // Retorno de carro para asegurar la posición del cursor al inicio de la línea
 2c4:	8d e0       	ldi	r24, 0x0D	; 13
 2c6:	0e 94 83 02 	call	0x506	; 0x506 <UART_send>


		// Verifica si el número está en el rango permitido
		if (received_value >= 0 && received_value <= 255) {
 2ca:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <__data_end>
 2ce:	28 2f       	mov	r18, r24
 2d0:	30 91 1b 02 	lds	r19, 0x021B	; 0x80021b <__data_end+0x1>
 2d4:	2f 3f       	cpi	r18, 0xFF	; 255
 2d6:	31 05       	cpc	r19, r1
 2d8:	09 f0       	breq	.+2      	; 0x2dc <contNUm+0x86>
 2da:	18 f4       	brcc	.+6      	; 0x2e2 <contNUm+0x8c>
			// Actualiza los LEDs según el valor recibido
			refreshPort(received_value);
 2dc:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <refreshPort>
 2e0:	08 95       	ret
			} else {
			// Maneja valores fuera del rango permitido
			UART_send_string("Valor no válido. Por favor, ingresa un número entre 0 y 255.\n");
 2e2:	8e e6       	ldi	r24, 0x6E	; 110
 2e4:	91 e0       	ldi	r25, 0x01	; 1
 2e6:	0e 94 8a 02 	call	0x514	; 0x514 <UART_send_string>
 2ea:	08 95       	ret

000002ec <IntCont>:
}
//dependiendo de lo que quiera el usario opciones

void IntCont() {

	if (UART_available()) {
 2ec:	0e 94 d5 02 	call	0x5aa	; 0x5aa <UART_available>
 2f0:	89 2b       	or	r24, r25
 2f2:	b1 f1       	breq	.+108    	; 0x360 <IntCont+0x74>
		char comando = UART_receive();
 2f4:	0e 94 c0 02 	call	0x580	; 0x580 <UART_receive>
		if (comando == 'm') {
 2f8:	8d 36       	cpi	r24, 0x6D	; 109
 2fa:	b1 f4       	brne	.+44     	; 0x328 <IntCont+0x3c>
			enviarValoresUART();
 2fc:	0e 94 71 00 	call	0xe2	; 0xe2 <enviarValoresUART>
 300:	2f ef       	ldi	r18, 0xFF	; 255
 302:	81 ee       	ldi	r24, 0xE1	; 225
 304:	94 e0       	ldi	r25, 0x04	; 4
 306:	21 50       	subi	r18, 0x01	; 1
 308:	80 40       	sbci	r24, 0x00	; 0
 30a:	90 40       	sbci	r25, 0x00	; 0
 30c:	e1 f7       	brne	.-8      	; 0x306 <IntCont+0x1a>
 30e:	00 c0       	rjmp	.+0      	; 0x310 <IntCont+0x24>
 310:	00 00       	nop
			_delay_ms(100); // Esperar un tiempo para permitir la actualización del ADC
			UART_send_string("\nIngrese 'm' para observar el ADC.\r\n");
 312:	8c ea       	ldi	r24, 0xAC	; 172
 314:	91 e0       	ldi	r25, 0x01	; 1
 316:	0e 94 8a 02 	call	0x514	; 0x514 <UART_send_string>
			UART_send_string("Ingrese 'n' para el contador.\r\n");
 31a:	81 ed       	ldi	r24, 0xD1	; 209
 31c:	91 e0       	ldi	r25, 0x01	; 1
 31e:	0e 94 8a 02 	call	0x514	; 0x514 <UART_send_string>
			IntCont();
 322:	0e 94 76 01 	call	0x2ec	; 0x2ec <IntCont>
 326:	08 95       	ret
		} else if (comando == 'n'){
 328:	8e 36       	cpi	r24, 0x6E	; 110
 32a:	b1 f4       	brne	.+44     	; 0x358 <IntCont+0x6c>
				contNUm();
 32c:	0e 94 2b 01 	call	0x256	; 0x256 <contNUm>
 330:	2f ef       	ldi	r18, 0xFF	; 255
 332:	81 ee       	ldi	r24, 0xE1	; 225
 334:	94 e0       	ldi	r25, 0x04	; 4
 336:	21 50       	subi	r18, 0x01	; 1
 338:	80 40       	sbci	r24, 0x00	; 0
 33a:	90 40       	sbci	r25, 0x00	; 0
 33c:	e1 f7       	brne	.-8      	; 0x336 <IntCont+0x4a>
 33e:	00 c0       	rjmp	.+0      	; 0x340 <IntCont+0x54>
 340:	00 00       	nop
				_delay_ms(100); // Esperar un tiempo para permitir la actualización del ADC
				UART_send_string("\nIngrese 'm' para observar el ADC.\r\n");
 342:	8c ea       	ldi	r24, 0xAC	; 172
 344:	91 e0       	ldi	r25, 0x01	; 1
 346:	0e 94 8a 02 	call	0x514	; 0x514 <UART_send_string>
				UART_send_string("Ingrese 'n' para el contador.\r\n");
 34a:	81 ed       	ldi	r24, 0xD1	; 209
 34c:	91 e0       	ldi	r25, 0x01	; 1
 34e:	0e 94 8a 02 	call	0x514	; 0x514 <UART_send_string>
				IntCont();
 352:	0e 94 76 01 	call	0x2ec	; 0x2ec <IntCont>
 356:	08 95       	ret
		}else {
			UART_send_string("\nEl comando ingresado no se reconoce\n");
 358:	81 ef       	ldi	r24, 0xF1	; 241
 35a:	91 e0       	ldi	r25, 0x01	; 1
 35c:	0e 94 8a 02 	call	0x514	; 0x514 <UART_send_string>
 360:	08 95       	ret

00000362 <main>:
		
}

/********************PROGRAMA PRINCIPAL*********************************/
int main(void) {
	setUp();
 362:	0e 94 5a 00 	call	0xb4	; 0xb4 <setUp>
	sei(); // Habilitar interrupciones globales
 366:	78 94       	sei

	while (1) {
		if (inicio == 1) {
 368:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 36c:	81 30       	cpi	r24, 0x01	; 1
 36e:	09 f5       	brne	.+66     	; 0x3b2 <main+0x50>
 370:	2f ef       	ldi	r18, 0xFF	; 255
 372:	81 ee       	ldi	r24, 0xE1	; 225
 374:	94 e0       	ldi	r25, 0x04	; 4
 376:	21 50       	subi	r18, 0x01	; 1
 378:	80 40       	sbci	r24, 0x00	; 0
 37a:	90 40       	sbci	r25, 0x00	; 0
 37c:	e1 f7       	brne	.-8      	; 0x376 <main+0x14>
 37e:	00 c0       	rjmp	.+0      	; 0x380 <main+0x1e>
 380:	00 00       	nop
			_delay_ms(100); // Esperar un tiempo para permitir la actualización del ADC
			UART_send_string("\nIngrese 'm' para observar el ADC.\r\n");
 382:	8c ea       	ldi	r24, 0xAC	; 172
 384:	91 e0       	ldi	r25, 0x01	; 1
 386:	0e 94 8a 02 	call	0x514	; 0x514 <UART_send_string>
			UART_send_string("Ingrese 'n' para el contador.\r\n");
 38a:	81 ed       	ldi	r24, 0xD1	; 209
 38c:	91 e0       	ldi	r25, 0x01	; 1
 38e:	0e 94 8a 02 	call	0x514	; 0x514 <UART_send_string>
			lecturaADC();
 392:	0e 94 c1 00 	call	0x182	; 0x182 <lecturaADC>
 396:	2f ef       	ldi	r18, 0xFF	; 255
 398:	85 ea       	ldi	r24, 0xA5	; 165
 39a:	9e e0       	ldi	r25, 0x0E	; 14
 39c:	21 50       	subi	r18, 0x01	; 1
 39e:	80 40       	sbci	r24, 0x00	; 0
 3a0:	90 40       	sbci	r25, 0x00	; 0
 3a2:	e1 f7       	brne	.-8      	; 0x39c <main+0x3a>
 3a4:	00 c0       	rjmp	.+0      	; 0x3a6 <main+0x44>
 3a6:	00 00       	nop
			_delay_ms(300);
			IntCont();
 3a8:	0e 94 76 01 	call	0x2ec	; 0x2ec <IntCont>
			inicio = 0;
 3ac:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 3b0:	0b c0       	rjmp	.+22     	; 0x3c8 <main+0x66>
 3b2:	2f ef       	ldi	r18, 0xFF	; 255
 3b4:	89 e6       	ldi	r24, 0x69	; 105
 3b6:	98 e1       	ldi	r25, 0x18	; 24
 3b8:	21 50       	subi	r18, 0x01	; 1
 3ba:	80 40       	sbci	r24, 0x00	; 0
 3bc:	90 40       	sbci	r25, 0x00	; 0
 3be:	e1 f7       	brne	.-8      	; 0x3b8 <main+0x56>
 3c0:	00 c0       	rjmp	.+0      	; 0x3c2 <main+0x60>
 3c2:	00 00       	nop
			} else {
			_delay_ms(500); // Esperar un tiempo para permitir la actualización del ADC
			IntCont(); // Verificar y procesar los comandos UART
 3c4:	0e 94 76 01 	call	0x2ec	; 0x2ec <IntCont>
		}
		lecturaADC(); // Leer ADC y actualizar valores
 3c8:	0e 94 c1 00 	call	0x182	; 0x182 <lecturaADC>
 3cc:	2f ef       	ldi	r18, 0xFF	; 255
 3ce:	85 ea       	ldi	r24, 0xA5	; 165
 3d0:	9e e0       	ldi	r25, 0x0E	; 14
 3d2:	21 50       	subi	r18, 0x01	; 1
 3d4:	80 40       	sbci	r24, 0x00	; 0
 3d6:	90 40       	sbci	r25, 0x00	; 0
 3d8:	e1 f7       	brne	.-8      	; 0x3d2 <main+0x70>
 3da:	00 c0       	rjmp	.+0      	; 0x3dc <main+0x7a>
 3dc:	00 00       	nop
 3de:	c4 cf       	rjmp	.-120    	; 0x368 <main+0x6>

000003e0 <SpiInit>:
	if(SPSR & (1<<SPIF))
	return 1;
	else
	return 0;
	
}
 3e0:	e8 2f       	mov	r30, r24
 3e2:	84 ff       	sbrs	r24, 4
 3e4:	52 c0       	rjmp	.+164    	; 0x48a <__EEPROM_REGION_LENGTH__+0x8a>
 3e6:	84 b1       	in	r24, 0x04	; 4
 3e8:	8c 62       	ori	r24, 0x2C	; 44
 3ea:	84 b9       	out	0x04, r24	; 4
 3ec:	84 b1       	in	r24, 0x04	; 4
 3ee:	8f 7e       	andi	r24, 0xEF	; 239
 3f0:	84 b9       	out	0x04, r24	; 4
 3f2:	8c b5       	in	r24, 0x2c	; 44
 3f4:	80 61       	ori	r24, 0x10	; 16
 3f6:	8c bd       	out	0x2c, r24	; 44
 3f8:	e7 70       	andi	r30, 0x07	; 7
 3fa:	8e 2f       	mov	r24, r30
 3fc:	90 e0       	ldi	r25, 0x00	; 0
 3fe:	87 30       	cpi	r24, 0x07	; 7
 400:	91 05       	cpc	r25, r1
 402:	08 f0       	brcs	.+2      	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 404:	4b c0       	rjmp	.+150    	; 0x49c <__EEPROM_REGION_LENGTH__+0x9c>
 406:	fc 01       	movw	r30, r24
 408:	ec 5c       	subi	r30, 0xCC	; 204
 40a:	ff 4f       	sbci	r31, 0xFF	; 255
 40c:	0c 94 4d 03 	jmp	0x69a	; 0x69a <__tablejump2__>
 410:	8c b5       	in	r24, 0x2c	; 44
 412:	8c 7f       	andi	r24, 0xFC	; 252
 414:	8c bd       	out	0x2c, r24	; 44
 416:	8d b5       	in	r24, 0x2d	; 45
 418:	81 60       	ori	r24, 0x01	; 1
 41a:	8d bd       	out	0x2d, r24	; 45
 41c:	3f c0       	rjmp	.+126    	; 0x49c <__EEPROM_REGION_LENGTH__+0x9c>
 41e:	8c b5       	in	r24, 0x2c	; 44
 420:	8c 7f       	andi	r24, 0xFC	; 252
 422:	8c bd       	out	0x2c, r24	; 44
 424:	8d b5       	in	r24, 0x2d	; 45
 426:	8e 7f       	andi	r24, 0xFE	; 254
 428:	8d bd       	out	0x2d, r24	; 45
 42a:	38 c0       	rjmp	.+112    	; 0x49c <__EEPROM_REGION_LENGTH__+0x9c>
 42c:	8c b5       	in	r24, 0x2c	; 44
 42e:	81 60       	ori	r24, 0x01	; 1
 430:	8c bd       	out	0x2c, r24	; 44
 432:	8c b5       	in	r24, 0x2c	; 44
 434:	8d 7f       	andi	r24, 0xFD	; 253
 436:	8c bd       	out	0x2c, r24	; 44
 438:	8d b5       	in	r24, 0x2d	; 45
 43a:	81 60       	ori	r24, 0x01	; 1
 43c:	8d bd       	out	0x2d, r24	; 45
 43e:	2e c0       	rjmp	.+92     	; 0x49c <__EEPROM_REGION_LENGTH__+0x9c>
 440:	8c b5       	in	r24, 0x2c	; 44
 442:	81 60       	ori	r24, 0x01	; 1
 444:	8c bd       	out	0x2c, r24	; 44
 446:	8c b5       	in	r24, 0x2c	; 44
 448:	8d 7f       	andi	r24, 0xFD	; 253
 44a:	8c bd       	out	0x2c, r24	; 44
 44c:	8d b5       	in	r24, 0x2d	; 45
 44e:	8e 7f       	andi	r24, 0xFE	; 254
 450:	8d bd       	out	0x2d, r24	; 45
 452:	24 c0       	rjmp	.+72     	; 0x49c <__EEPROM_REGION_LENGTH__+0x9c>
 454:	8c b5       	in	r24, 0x2c	; 44
 456:	8e 7f       	andi	r24, 0xFE	; 254
 458:	8c bd       	out	0x2c, r24	; 44
 45a:	8c b5       	in	r24, 0x2c	; 44
 45c:	82 60       	ori	r24, 0x02	; 2
 45e:	8c bd       	out	0x2c, r24	; 44
 460:	8d b5       	in	r24, 0x2d	; 45
 462:	81 60       	ori	r24, 0x01	; 1
 464:	8d bd       	out	0x2d, r24	; 45
 466:	1a c0       	rjmp	.+52     	; 0x49c <__EEPROM_REGION_LENGTH__+0x9c>
 468:	8c b5       	in	r24, 0x2c	; 44
 46a:	8e 7f       	andi	r24, 0xFE	; 254
 46c:	8c bd       	out	0x2c, r24	; 44
 46e:	8c b5       	in	r24, 0x2c	; 44
 470:	82 60       	ori	r24, 0x02	; 2
 472:	8c bd       	out	0x2c, r24	; 44
 474:	8d b5       	in	r24, 0x2d	; 45
 476:	8e 7f       	andi	r24, 0xFE	; 254
 478:	8d bd       	out	0x2d, r24	; 45
 47a:	10 c0       	rjmp	.+32     	; 0x49c <__EEPROM_REGION_LENGTH__+0x9c>
 47c:	8c b5       	in	r24, 0x2c	; 44
 47e:	83 60       	ori	r24, 0x03	; 3
 480:	8c bd       	out	0x2c, r24	; 44
 482:	8d b5       	in	r24, 0x2d	; 45
 484:	8e 7f       	andi	r24, 0xFE	; 254
 486:	8d bd       	out	0x2d, r24	; 45
 488:	09 c0       	rjmp	.+18     	; 0x49c <__EEPROM_REGION_LENGTH__+0x9c>
 48a:	84 b1       	in	r24, 0x04	; 4
 48c:	80 61       	ori	r24, 0x10	; 16
 48e:	84 b9       	out	0x04, r24	; 4
 490:	84 b1       	in	r24, 0x04	; 4
 492:	83 7d       	andi	r24, 0xD3	; 211
 494:	84 b9       	out	0x04, r24	; 4
 496:	8c b5       	in	r24, 0x2c	; 44
 498:	8f 7e       	andi	r24, 0xEF	; 239
 49a:	8c bd       	out	0x2c, r24	; 44
 49c:	8c b5       	in	r24, 0x2c	; 44
 49e:	46 2b       	or	r20, r22
 4a0:	24 2b       	or	r18, r20
 4a2:	28 2b       	or	r18, r24
 4a4:	20 64       	ori	r18, 0x40	; 64
 4a6:	2c bd       	out	0x2c, r18	; 44
 4a8:	08 95       	ret

000004aa <SpiWrite>:
 4aa:	8e bd       	out	0x2e, r24	; 46
 4ac:	08 95       	ret

000004ae <SpiRead>:

uint8_t SpiRead(void){//lee el dato recivido
	while(!(SPSR & (1<<SPIF))); // ESPERAR HASTA QUE LA VARIABLE 
 4ae:	0d b4       	in	r0, 0x2d	; 45
 4b0:	07 fe       	sbrs	r0, 7
 4b2:	fd cf       	rjmp	.-6      	; 0x4ae <SpiRead>
	return(SPDR);
 4b4:	8e b5       	in	r24, 0x2e	; 46
 4b6:	08 95       	ret

000004b8 <UART_init>:
volatile uint8_t uart_head = 0; // Índice de la cabeza del buffer
volatile uint8_t uart_tail = 0; // Índice de la cola del buffer

/* Inicializa el UART con el baud rate especificado. */
void UART_init(unsigned int baud) {
	unsigned int ubrr = BAUD_PRESCALE(baud);
 4b8:	a0 e0       	ldi	r26, 0x00	; 0
 4ba:	b0 e0       	ldi	r27, 0x00	; 0
 4bc:	88 0f       	add	r24, r24
 4be:	99 1f       	adc	r25, r25
 4c0:	aa 1f       	adc	r26, r26
 4c2:	bb 1f       	adc	r27, r27
 4c4:	88 0f       	add	r24, r24
 4c6:	99 1f       	adc	r25, r25
 4c8:	aa 1f       	adc	r26, r26
 4ca:	bb 1f       	adc	r27, r27
 4cc:	9c 01       	movw	r18, r24
 4ce:	ad 01       	movw	r20, r26
 4d0:	22 0f       	add	r18, r18
 4d2:	33 1f       	adc	r19, r19
 4d4:	44 1f       	adc	r20, r20
 4d6:	55 1f       	adc	r21, r21
 4d8:	22 0f       	add	r18, r18
 4da:	33 1f       	adc	r19, r19
 4dc:	44 1f       	adc	r20, r20
 4de:	55 1f       	adc	r21, r21
 4e0:	60 e0       	ldi	r22, 0x00	; 0
 4e2:	74 e2       	ldi	r23, 0x24	; 36
 4e4:	84 ef       	ldi	r24, 0xF4	; 244
 4e6:	90 e0       	ldi	r25, 0x00	; 0
 4e8:	0e 94 2b 03 	call	0x656	; 0x656 <__udivmodsi4>
 4ec:	21 50       	subi	r18, 0x01	; 1
 4ee:	31 09       	sbc	r19, r1
	UBRR0H = (unsigned char)(ubrr >> 8);
 4f0:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (unsigned char)ubrr;
 4f4:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	UCSR0B = (1 << RXEN0) | (1 << TXEN0) | (1 << RXCIE0); // Habilitar RX, TX y la interrupción RX
 4f8:	88 e9       	ldi	r24, 0x98	; 152
 4fa:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00); // Configurar para 8 bits de datos, 1 bit de stop
 4fe:	86 e0       	ldi	r24, 0x06	; 6
 500:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 504:	08 95       	ret

00000506 <UART_send>:
}

/* Envía un solo carácter a través de UART. */
void UART_send(unsigned char data) {
	while (!(UCSR0A & (1 << UDRE0))); // Esperar hasta que el buffer de transmisión esté vacío
 506:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 50a:	95 ff       	sbrs	r25, 5
 50c:	fc cf       	rjmp	.-8      	; 0x506 <UART_send>
	UDR0 = data; // Enviar el carácter
 50e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 512:	08 95       	ret

00000514 <UART_send_string>:
}

/* Envía una cadena de caracteres a través de UART. */
void UART_send_string(const char* str) {
 514:	cf 93       	push	r28
 516:	df 93       	push	r29
 518:	ec 01       	movw	r28, r24
	while (*str) {
 51a:	03 c0       	rjmp	.+6      	; 0x522 <UART_send_string+0xe>
		UART_send(*str++); // Enviar cada carácter de la cadena
 51c:	21 96       	adiw	r28, 0x01	; 1
 51e:	0e 94 83 02 	call	0x506	; 0x506 <UART_send>
	UDR0 = data; // Enviar el carácter
}

/* Envía una cadena de caracteres a través de UART. */
void UART_send_string(const char* str) {
	while (*str) {
 522:	88 81       	ld	r24, Y
 524:	81 11       	cpse	r24, r1
 526:	fa cf       	rjmp	.-12     	; 0x51c <UART_send_string+0x8>
		UART_send(*str++); // Enviar cada carácter de la cadena
	}
}
 528:	df 91       	pop	r29
 52a:	cf 91       	pop	r28
 52c:	08 95       	ret

0000052e <UART_send_number>:

/* Envía un número a través de UART. */
void UART_send_number(uint8_t number) {
 52e:	0f 93       	push	r16
 530:	1f 93       	push	r17
 532:	cf 93       	push	r28
 534:	df 93       	push	r29
 536:	00 d0       	rcall	.+0      	; 0x538 <UART_send_number+0xa>
 538:	00 d0       	rcall	.+0      	; 0x53a <UART_send_number+0xc>
 53a:	cd b7       	in	r28, 0x3d	; 61
 53c:	de b7       	in	r29, 0x3e	; 62
	char buffer[4]; // Para almacenar hasta 3 dígitos y un terminador de cadena
	snprintf(buffer, sizeof(buffer), "%u", number); // Convierte el número a cadena
 53e:	1f 92       	push	r1
 540:	8f 93       	push	r24
 542:	87 e1       	ldi	r24, 0x17	; 23
 544:	92 e0       	ldi	r25, 0x02	; 2
 546:	9f 93       	push	r25
 548:	8f 93       	push	r24
 54a:	1f 92       	push	r1
 54c:	84 e0       	ldi	r24, 0x04	; 4
 54e:	8f 93       	push	r24
 550:	8e 01       	movw	r16, r28
 552:	0f 5f       	subi	r16, 0xFF	; 255
 554:	1f 4f       	sbci	r17, 0xFF	; 255
 556:	1f 93       	push	r17
 558:	0f 93       	push	r16
 55a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <snprintf>
	UART_send_string(buffer); // Envía la cadena
 55e:	c8 01       	movw	r24, r16
 560:	0e 94 8a 02 	call	0x514	; 0x514 <UART_send_string>
}
 564:	0f b6       	in	r0, 0x3f	; 63
 566:	f8 94       	cli
 568:	de bf       	out	0x3e, r29	; 62
 56a:	0f be       	out	0x3f, r0	; 63
 56c:	cd bf       	out	0x3d, r28	; 61
 56e:	0f 90       	pop	r0
 570:	0f 90       	pop	r0
 572:	0f 90       	pop	r0
 574:	0f 90       	pop	r0
 576:	df 91       	pop	r29
 578:	cf 91       	pop	r28
 57a:	1f 91       	pop	r17
 57c:	0f 91       	pop	r16
 57e:	08 95       	ret

00000580 <UART_receive>:

/* Lee un solo carácter del buffer UART. */
unsigned char UART_receive(void) {
	if (uart_head != uart_tail) { // Verificar si hay datos disponibles
 580:	90 91 1d 02 	lds	r25, 0x021D	; 0x80021d <uart_head>
 584:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <uart_tail>
 588:	98 17       	cp	r25, r24
 58a:	69 f0       	breq	.+26     	; 0x5a6 <UART_receive+0x26>
		unsigned char data = uart_buffer[uart_tail]; // Leer el carácter del buffer
 58c:	e0 91 1c 02 	lds	r30, 0x021C	; 0x80021c <uart_tail>
 590:	f0 e0       	ldi	r31, 0x00	; 0
 592:	e0 5e       	subi	r30, 0xE0	; 224
 594:	fd 4f       	sbci	r31, 0xFD	; 253
 596:	80 81       	ld	r24, Z
		uart_tail = (uart_tail + 1) % sizeof(uart_buffer); // Actualizar el índice de la cola
 598:	90 91 1c 02 	lds	r25, 0x021C	; 0x80021c <uart_tail>
 59c:	9f 5f       	subi	r25, 0xFF	; 255
 59e:	9f 77       	andi	r25, 0x7F	; 127
 5a0:	90 93 1c 02 	sts	0x021C, r25	; 0x80021c <uart_tail>
		return data; // Devolver el carácter recibido
 5a4:	08 95       	ret
		} else {
		return 0; // No hay datos disponibles
 5a6:	80 e0       	ldi	r24, 0x00	; 0
	}
}
 5a8:	08 95       	ret

000005aa <UART_available>:
	buffer[index] = '\0'; // Null-terminar el string
}

/* Verifica si hay datos disponibles en el buffer UART. */
int UART_available(void) {
	return (uart_head != uart_tail); // Retorna 1 si hay datos en el buffer, 0 si no
 5aa:	20 91 1d 02 	lds	r18, 0x021D	; 0x80021d <uart_head>
 5ae:	90 91 1c 02 	lds	r25, 0x021C	; 0x80021c <uart_tail>
 5b2:	81 e0       	ldi	r24, 0x01	; 1
 5b4:	29 13       	cpse	r18, r25
 5b6:	01 c0       	rjmp	.+2      	; 0x5ba <UART_available+0x10>
 5b8:	80 e0       	ldi	r24, 0x00	; 0
}
 5ba:	90 e0       	ldi	r25, 0x00	; 0
 5bc:	08 95       	ret

000005be <UART_receive_string>:
		return 0; // No hay datos disponibles
	}
}

/* Lee una cadena del buffer UART hasta que se encuentra un delimitador. */
void UART_receive_string(char* buffer, uint8_t max_length) {
 5be:	0f 93       	push	r16
 5c0:	1f 93       	push	r17
 5c2:	cf 93       	push	r28
 5c4:	df 93       	push	r29
 5c6:	8c 01       	movw	r16, r24
 5c8:	d6 2f       	mov	r29, r22
	uint8_t index = 0;
 5ca:	c0 e0       	ldi	r28, 0x00	; 0
	char received_char;

	while (index < (max_length - 1)) { // Deja espacio para el terminador de cadena
 5cc:	0f c0       	rjmp	.+30     	; 0x5ec <UART_receive_string+0x2e>
		if (UART_available()) {
 5ce:	0e 94 d5 02 	call	0x5aa	; 0x5aa <UART_available>
 5d2:	89 2b       	or	r24, r25
 5d4:	59 f0       	breq	.+22     	; 0x5ec <UART_receive_string+0x2e>
			received_char = UART_receive();
 5d6:	0e 94 c0 02 	call	0x580	; 0x580 <UART_receive>
			if (received_char == '\n' || received_char == '\r') {
 5da:	8a 30       	cpi	r24, 0x0A	; 10
 5dc:	79 f0       	breq	.+30     	; 0x5fc <UART_receive_string+0x3e>
 5de:	8d 30       	cpi	r24, 0x0D	; 13
 5e0:	69 f0       	breq	.+26     	; 0x5fc <UART_receive_string+0x3e>
				// Fin de la cadena
				break;
			}
			buffer[index++] = received_char;
 5e2:	f8 01       	movw	r30, r16
 5e4:	ec 0f       	add	r30, r28
 5e6:	f1 1d       	adc	r31, r1
 5e8:	80 83       	st	Z, r24
 5ea:	cf 5f       	subi	r28, 0xFF	; 255
/* Lee una cadena del buffer UART hasta que se encuentra un delimitador. */
void UART_receive_string(char* buffer, uint8_t max_length) {
	uint8_t index = 0;
	char received_char;

	while (index < (max_length - 1)) { // Deja espacio para el terminador de cadena
 5ec:	2c 2f       	mov	r18, r28
 5ee:	30 e0       	ldi	r19, 0x00	; 0
 5f0:	8d 2f       	mov	r24, r29
 5f2:	90 e0       	ldi	r25, 0x00	; 0
 5f4:	01 97       	sbiw	r24, 0x01	; 1
 5f6:	28 17       	cp	r18, r24
 5f8:	39 07       	cpc	r19, r25
 5fa:	4c f3       	brlt	.-46     	; 0x5ce <UART_receive_string+0x10>
				break;
			}
			buffer[index++] = received_char;
		}
	}
	buffer[index] = '\0'; // Null-terminar el string
 5fc:	f8 01       	movw	r30, r16
 5fe:	ec 0f       	add	r30, r28
 600:	f1 1d       	adc	r31, r1
 602:	10 82       	st	Z, r1
}
 604:	df 91       	pop	r29
 606:	cf 91       	pop	r28
 608:	1f 91       	pop	r17
 60a:	0f 91       	pop	r16
 60c:	08 95       	ret

0000060e <__vector_18>:
int UART_available(void) {
	return (uart_head != uart_tail); // Retorna 1 si hay datos en el buffer, 0 si no
}

// Rutina de interrupción del UART
ISR(USART_RX_vect) {
 60e:	1f 92       	push	r1
 610:	0f 92       	push	r0
 612:	0f b6       	in	r0, 0x3f	; 63
 614:	0f 92       	push	r0
 616:	11 24       	eor	r1, r1
 618:	8f 93       	push	r24
 61a:	ef 93       	push	r30
 61c:	ff 93       	push	r31
	uart_buffer[uart_head] = UDR0; // Leer el carácter recibido del registro UDR0
 61e:	e0 91 1d 02 	lds	r30, 0x021D	; 0x80021d <uart_head>
 622:	f0 e0       	ldi	r31, 0x00	; 0
 624:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 628:	e0 5e       	subi	r30, 0xE0	; 224
 62a:	fd 4f       	sbci	r31, 0xFD	; 253
 62c:	80 83       	st	Z, r24
	uart_head = (uart_head + 1) % sizeof(uart_buffer); // Actualizar el índice de la cabeza del buffer
 62e:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <uart_head>
 632:	8f 5f       	subi	r24, 0xFF	; 255
 634:	8f 77       	andi	r24, 0x7F	; 127
 636:	80 93 1d 02 	sts	0x021D, r24	; 0x80021d <uart_head>
	uart_buffer[uart_head] = '\0'; // Terminador de cadena
 63a:	e0 91 1d 02 	lds	r30, 0x021D	; 0x80021d <uart_head>
 63e:	f0 e0       	ldi	r31, 0x00	; 0
 640:	e0 5e       	subi	r30, 0xE0	; 224
 642:	fd 4f       	sbci	r31, 0xFD	; 253
 644:	10 82       	st	Z, r1
}
 646:	ff 91       	pop	r31
 648:	ef 91       	pop	r30
 64a:	8f 91       	pop	r24
 64c:	0f 90       	pop	r0
 64e:	0f be       	out	0x3f, r0	; 63
 650:	0f 90       	pop	r0
 652:	1f 90       	pop	r1
 654:	18 95       	reti

00000656 <__udivmodsi4>:
 656:	a1 e2       	ldi	r26, 0x21	; 33
 658:	1a 2e       	mov	r1, r26
 65a:	aa 1b       	sub	r26, r26
 65c:	bb 1b       	sub	r27, r27
 65e:	fd 01       	movw	r30, r26
 660:	0d c0       	rjmp	.+26     	; 0x67c <__udivmodsi4_ep>

00000662 <__udivmodsi4_loop>:
 662:	aa 1f       	adc	r26, r26
 664:	bb 1f       	adc	r27, r27
 666:	ee 1f       	adc	r30, r30
 668:	ff 1f       	adc	r31, r31
 66a:	a2 17       	cp	r26, r18
 66c:	b3 07       	cpc	r27, r19
 66e:	e4 07       	cpc	r30, r20
 670:	f5 07       	cpc	r31, r21
 672:	20 f0       	brcs	.+8      	; 0x67c <__udivmodsi4_ep>
 674:	a2 1b       	sub	r26, r18
 676:	b3 0b       	sbc	r27, r19
 678:	e4 0b       	sbc	r30, r20
 67a:	f5 0b       	sbc	r31, r21

0000067c <__udivmodsi4_ep>:
 67c:	66 1f       	adc	r22, r22
 67e:	77 1f       	adc	r23, r23
 680:	88 1f       	adc	r24, r24
 682:	99 1f       	adc	r25, r25
 684:	1a 94       	dec	r1
 686:	69 f7       	brne	.-38     	; 0x662 <__udivmodsi4_loop>
 688:	60 95       	com	r22
 68a:	70 95       	com	r23
 68c:	80 95       	com	r24
 68e:	90 95       	com	r25
 690:	9b 01       	movw	r18, r22
 692:	ac 01       	movw	r20, r24
 694:	bd 01       	movw	r22, r26
 696:	cf 01       	movw	r24, r30
 698:	08 95       	ret

0000069a <__tablejump2__>:
 69a:	ee 0f       	add	r30, r30
 69c:	ff 1f       	adc	r31, r31
 69e:	05 90       	lpm	r0, Z+
 6a0:	f4 91       	lpm	r31, Z
 6a2:	e0 2d       	mov	r30, r0
 6a4:	09 94       	ijmp

000006a6 <atoi>:
 6a6:	fc 01       	movw	r30, r24
 6a8:	88 27       	eor	r24, r24
 6aa:	99 27       	eor	r25, r25
 6ac:	e8 94       	clt
 6ae:	21 91       	ld	r18, Z+
 6b0:	20 32       	cpi	r18, 0x20	; 32
 6b2:	e9 f3       	breq	.-6      	; 0x6ae <atoi+0x8>
 6b4:	29 30       	cpi	r18, 0x09	; 9
 6b6:	10 f0       	brcs	.+4      	; 0x6bc <atoi+0x16>
 6b8:	2e 30       	cpi	r18, 0x0E	; 14
 6ba:	c8 f3       	brcs	.-14     	; 0x6ae <atoi+0x8>
 6bc:	2b 32       	cpi	r18, 0x2B	; 43
 6be:	41 f0       	breq	.+16     	; 0x6d0 <atoi+0x2a>
 6c0:	2d 32       	cpi	r18, 0x2D	; 45
 6c2:	39 f4       	brne	.+14     	; 0x6d2 <atoi+0x2c>
 6c4:	68 94       	set
 6c6:	04 c0       	rjmp	.+8      	; 0x6d0 <atoi+0x2a>
 6c8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__mulhi_const_10>
 6cc:	82 0f       	add	r24, r18
 6ce:	91 1d       	adc	r25, r1
 6d0:	21 91       	ld	r18, Z+
 6d2:	20 53       	subi	r18, 0x30	; 48
 6d4:	2a 30       	cpi	r18, 0x0A	; 10
 6d6:	c0 f3       	brcs	.-16     	; 0x6c8 <atoi+0x22>
 6d8:	1e f4       	brtc	.+6      	; 0x6e0 <atoi+0x3a>
 6da:	90 95       	com	r25
 6dc:	81 95       	neg	r24
 6de:	9f 4f       	sbci	r25, 0xFF	; 255
 6e0:	08 95       	ret

000006e2 <__mulhi_const_10>:
 6e2:	7a e0       	ldi	r23, 0x0A	; 10
 6e4:	97 9f       	mul	r25, r23
 6e6:	90 2d       	mov	r25, r0
 6e8:	87 9f       	mul	r24, r23
 6ea:	80 2d       	mov	r24, r0
 6ec:	91 0d       	add	r25, r1
 6ee:	11 24       	eor	r1, r1
 6f0:	08 95       	ret

000006f2 <snprintf>:
 6f2:	ae e0       	ldi	r26, 0x0E	; 14
 6f4:	b0 e0       	ldi	r27, 0x00	; 0
 6f6:	ef e7       	ldi	r30, 0x7F	; 127
 6f8:	f3 e0       	ldi	r31, 0x03	; 3
 6fa:	0c 94 48 06 	jmp	0xc90	; 0xc90 <__prologue_saves__+0x1c>
 6fe:	0d 89       	ldd	r16, Y+21	; 0x15
 700:	1e 89       	ldd	r17, Y+22	; 0x16
 702:	8f 89       	ldd	r24, Y+23	; 0x17
 704:	98 8d       	ldd	r25, Y+24	; 0x18
 706:	26 e0       	ldi	r18, 0x06	; 6
 708:	2c 83       	std	Y+4, r18	; 0x04
 70a:	1a 83       	std	Y+2, r17	; 0x02
 70c:	09 83       	std	Y+1, r16	; 0x01
 70e:	97 ff       	sbrs	r25, 7
 710:	02 c0       	rjmp	.+4      	; 0x716 <snprintf+0x24>
 712:	80 e0       	ldi	r24, 0x00	; 0
 714:	90 e8       	ldi	r25, 0x80	; 128
 716:	01 97       	sbiw	r24, 0x01	; 1
 718:	9e 83       	std	Y+6, r25	; 0x06
 71a:	8d 83       	std	Y+5, r24	; 0x05
 71c:	ae 01       	movw	r20, r28
 71e:	45 5e       	subi	r20, 0xE5	; 229
 720:	5f 4f       	sbci	r21, 0xFF	; 255
 722:	69 8d       	ldd	r22, Y+25	; 0x19
 724:	7a 8d       	ldd	r23, Y+26	; 0x1a
 726:	ce 01       	movw	r24, r28
 728:	01 96       	adiw	r24, 0x01	; 1
 72a:	0e 94 a9 03 	call	0x752	; 0x752 <vfprintf>
 72e:	4d 81       	ldd	r20, Y+5	; 0x05
 730:	5e 81       	ldd	r21, Y+6	; 0x06
 732:	57 fd       	sbrc	r21, 7
 734:	0a c0       	rjmp	.+20     	; 0x74a <snprintf+0x58>
 736:	2f 81       	ldd	r18, Y+7	; 0x07
 738:	38 85       	ldd	r19, Y+8	; 0x08
 73a:	42 17       	cp	r20, r18
 73c:	53 07       	cpc	r21, r19
 73e:	0c f4       	brge	.+2      	; 0x742 <snprintf+0x50>
 740:	9a 01       	movw	r18, r20
 742:	f8 01       	movw	r30, r16
 744:	e2 0f       	add	r30, r18
 746:	f3 1f       	adc	r31, r19
 748:	10 82       	st	Z, r1
 74a:	2e 96       	adiw	r28, 0x0e	; 14
 74c:	e4 e0       	ldi	r30, 0x04	; 4
 74e:	0c 94 64 06 	jmp	0xcc8	; 0xcc8 <__epilogue_restores__+0x1c>

00000752 <vfprintf>:
 752:	ab e0       	ldi	r26, 0x0B	; 11
 754:	b0 e0       	ldi	r27, 0x00	; 0
 756:	ef ea       	ldi	r30, 0xAF	; 175
 758:	f3 e0       	ldi	r31, 0x03	; 3
 75a:	0c 94 3a 06 	jmp	0xc74	; 0xc74 <__prologue_saves__>
 75e:	6c 01       	movw	r12, r24
 760:	7b 01       	movw	r14, r22
 762:	8a 01       	movw	r16, r20
 764:	fc 01       	movw	r30, r24
 766:	17 82       	std	Z+7, r1	; 0x07
 768:	16 82       	std	Z+6, r1	; 0x06
 76a:	83 81       	ldd	r24, Z+3	; 0x03
 76c:	81 ff       	sbrs	r24, 1
 76e:	cc c1       	rjmp	.+920    	; 0xb08 <__stack+0x209>
 770:	ce 01       	movw	r24, r28
 772:	01 96       	adiw	r24, 0x01	; 1
 774:	3c 01       	movw	r6, r24
 776:	f6 01       	movw	r30, r12
 778:	93 81       	ldd	r25, Z+3	; 0x03
 77a:	f7 01       	movw	r30, r14
 77c:	93 fd       	sbrc	r25, 3
 77e:	85 91       	lpm	r24, Z+
 780:	93 ff       	sbrs	r25, 3
 782:	81 91       	ld	r24, Z+
 784:	7f 01       	movw	r14, r30
 786:	88 23       	and	r24, r24
 788:	09 f4       	brne	.+2      	; 0x78c <vfprintf+0x3a>
 78a:	ba c1       	rjmp	.+884    	; 0xb00 <__stack+0x201>
 78c:	85 32       	cpi	r24, 0x25	; 37
 78e:	39 f4       	brne	.+14     	; 0x79e <vfprintf+0x4c>
 790:	93 fd       	sbrc	r25, 3
 792:	85 91       	lpm	r24, Z+
 794:	93 ff       	sbrs	r25, 3
 796:	81 91       	ld	r24, Z+
 798:	7f 01       	movw	r14, r30
 79a:	85 32       	cpi	r24, 0x25	; 37
 79c:	29 f4       	brne	.+10     	; 0x7a8 <vfprintf+0x56>
 79e:	b6 01       	movw	r22, r12
 7a0:	90 e0       	ldi	r25, 0x00	; 0
 7a2:	0e 94 a0 05 	call	0xb40	; 0xb40 <fputc>
 7a6:	e7 cf       	rjmp	.-50     	; 0x776 <vfprintf+0x24>
 7a8:	91 2c       	mov	r9, r1
 7aa:	21 2c       	mov	r2, r1
 7ac:	31 2c       	mov	r3, r1
 7ae:	ff e1       	ldi	r31, 0x1F	; 31
 7b0:	f3 15       	cp	r31, r3
 7b2:	d8 f0       	brcs	.+54     	; 0x7ea <vfprintf+0x98>
 7b4:	8b 32       	cpi	r24, 0x2B	; 43
 7b6:	79 f0       	breq	.+30     	; 0x7d6 <vfprintf+0x84>
 7b8:	38 f4       	brcc	.+14     	; 0x7c8 <vfprintf+0x76>
 7ba:	80 32       	cpi	r24, 0x20	; 32
 7bc:	79 f0       	breq	.+30     	; 0x7dc <vfprintf+0x8a>
 7be:	83 32       	cpi	r24, 0x23	; 35
 7c0:	a1 f4       	brne	.+40     	; 0x7ea <vfprintf+0x98>
 7c2:	23 2d       	mov	r18, r3
 7c4:	20 61       	ori	r18, 0x10	; 16
 7c6:	1d c0       	rjmp	.+58     	; 0x802 <__DATA_REGION_LENGTH__+0x2>
 7c8:	8d 32       	cpi	r24, 0x2D	; 45
 7ca:	61 f0       	breq	.+24     	; 0x7e4 <vfprintf+0x92>
 7cc:	80 33       	cpi	r24, 0x30	; 48
 7ce:	69 f4       	brne	.+26     	; 0x7ea <vfprintf+0x98>
 7d0:	23 2d       	mov	r18, r3
 7d2:	21 60       	ori	r18, 0x01	; 1
 7d4:	16 c0       	rjmp	.+44     	; 0x802 <__DATA_REGION_LENGTH__+0x2>
 7d6:	83 2d       	mov	r24, r3
 7d8:	82 60       	ori	r24, 0x02	; 2
 7da:	38 2e       	mov	r3, r24
 7dc:	e3 2d       	mov	r30, r3
 7de:	e4 60       	ori	r30, 0x04	; 4
 7e0:	3e 2e       	mov	r3, r30
 7e2:	2a c0       	rjmp	.+84     	; 0x838 <__DATA_REGION_LENGTH__+0x38>
 7e4:	f3 2d       	mov	r31, r3
 7e6:	f8 60       	ori	r31, 0x08	; 8
 7e8:	1d c0       	rjmp	.+58     	; 0x824 <__DATA_REGION_LENGTH__+0x24>
 7ea:	37 fc       	sbrc	r3, 7
 7ec:	2d c0       	rjmp	.+90     	; 0x848 <__DATA_REGION_LENGTH__+0x48>
 7ee:	20 ed       	ldi	r18, 0xD0	; 208
 7f0:	28 0f       	add	r18, r24
 7f2:	2a 30       	cpi	r18, 0x0A	; 10
 7f4:	40 f0       	brcs	.+16     	; 0x806 <__DATA_REGION_LENGTH__+0x6>
 7f6:	8e 32       	cpi	r24, 0x2E	; 46
 7f8:	b9 f4       	brne	.+46     	; 0x828 <__DATA_REGION_LENGTH__+0x28>
 7fa:	36 fc       	sbrc	r3, 6
 7fc:	81 c1       	rjmp	.+770    	; 0xb00 <__stack+0x201>
 7fe:	23 2d       	mov	r18, r3
 800:	20 64       	ori	r18, 0x40	; 64
 802:	32 2e       	mov	r3, r18
 804:	19 c0       	rjmp	.+50     	; 0x838 <__DATA_REGION_LENGTH__+0x38>
 806:	36 fe       	sbrs	r3, 6
 808:	06 c0       	rjmp	.+12     	; 0x816 <__DATA_REGION_LENGTH__+0x16>
 80a:	8a e0       	ldi	r24, 0x0A	; 10
 80c:	98 9e       	mul	r9, r24
 80e:	20 0d       	add	r18, r0
 810:	11 24       	eor	r1, r1
 812:	92 2e       	mov	r9, r18
 814:	11 c0       	rjmp	.+34     	; 0x838 <__DATA_REGION_LENGTH__+0x38>
 816:	ea e0       	ldi	r30, 0x0A	; 10
 818:	2e 9e       	mul	r2, r30
 81a:	20 0d       	add	r18, r0
 81c:	11 24       	eor	r1, r1
 81e:	22 2e       	mov	r2, r18
 820:	f3 2d       	mov	r31, r3
 822:	f0 62       	ori	r31, 0x20	; 32
 824:	3f 2e       	mov	r3, r31
 826:	08 c0       	rjmp	.+16     	; 0x838 <__DATA_REGION_LENGTH__+0x38>
 828:	8c 36       	cpi	r24, 0x6C	; 108
 82a:	21 f4       	brne	.+8      	; 0x834 <__DATA_REGION_LENGTH__+0x34>
 82c:	83 2d       	mov	r24, r3
 82e:	80 68       	ori	r24, 0x80	; 128
 830:	38 2e       	mov	r3, r24
 832:	02 c0       	rjmp	.+4      	; 0x838 <__DATA_REGION_LENGTH__+0x38>
 834:	88 36       	cpi	r24, 0x68	; 104
 836:	41 f4       	brne	.+16     	; 0x848 <__DATA_REGION_LENGTH__+0x48>
 838:	f7 01       	movw	r30, r14
 83a:	93 fd       	sbrc	r25, 3
 83c:	85 91       	lpm	r24, Z+
 83e:	93 ff       	sbrs	r25, 3
 840:	81 91       	ld	r24, Z+
 842:	7f 01       	movw	r14, r30
 844:	81 11       	cpse	r24, r1
 846:	b3 cf       	rjmp	.-154    	; 0x7ae <vfprintf+0x5c>
 848:	98 2f       	mov	r25, r24
 84a:	9f 7d       	andi	r25, 0xDF	; 223
 84c:	95 54       	subi	r25, 0x45	; 69
 84e:	93 30       	cpi	r25, 0x03	; 3
 850:	28 f4       	brcc	.+10     	; 0x85c <__DATA_REGION_LENGTH__+0x5c>
 852:	0c 5f       	subi	r16, 0xFC	; 252
 854:	1f 4f       	sbci	r17, 0xFF	; 255
 856:	9f e3       	ldi	r25, 0x3F	; 63
 858:	99 83       	std	Y+1, r25	; 0x01
 85a:	0d c0       	rjmp	.+26     	; 0x876 <__DATA_REGION_LENGTH__+0x76>
 85c:	83 36       	cpi	r24, 0x63	; 99
 85e:	31 f0       	breq	.+12     	; 0x86c <__DATA_REGION_LENGTH__+0x6c>
 860:	83 37       	cpi	r24, 0x73	; 115
 862:	71 f0       	breq	.+28     	; 0x880 <__DATA_REGION_LENGTH__+0x80>
 864:	83 35       	cpi	r24, 0x53	; 83
 866:	09 f0       	breq	.+2      	; 0x86a <__DATA_REGION_LENGTH__+0x6a>
 868:	59 c0       	rjmp	.+178    	; 0x91c <__stack+0x1d>
 86a:	21 c0       	rjmp	.+66     	; 0x8ae <__DATA_REGION_LENGTH__+0xae>
 86c:	f8 01       	movw	r30, r16
 86e:	80 81       	ld	r24, Z
 870:	89 83       	std	Y+1, r24	; 0x01
 872:	0e 5f       	subi	r16, 0xFE	; 254
 874:	1f 4f       	sbci	r17, 0xFF	; 255
 876:	88 24       	eor	r8, r8
 878:	83 94       	inc	r8
 87a:	91 2c       	mov	r9, r1
 87c:	53 01       	movw	r10, r6
 87e:	13 c0       	rjmp	.+38     	; 0x8a6 <__DATA_REGION_LENGTH__+0xa6>
 880:	28 01       	movw	r4, r16
 882:	f2 e0       	ldi	r31, 0x02	; 2
 884:	4f 0e       	add	r4, r31
 886:	51 1c       	adc	r5, r1
 888:	f8 01       	movw	r30, r16
 88a:	a0 80       	ld	r10, Z
 88c:	b1 80       	ldd	r11, Z+1	; 0x01
 88e:	36 fe       	sbrs	r3, 6
 890:	03 c0       	rjmp	.+6      	; 0x898 <__DATA_REGION_LENGTH__+0x98>
 892:	69 2d       	mov	r22, r9
 894:	70 e0       	ldi	r23, 0x00	; 0
 896:	02 c0       	rjmp	.+4      	; 0x89c <__DATA_REGION_LENGTH__+0x9c>
 898:	6f ef       	ldi	r22, 0xFF	; 255
 89a:	7f ef       	ldi	r23, 0xFF	; 255
 89c:	c5 01       	movw	r24, r10
 89e:	0e 94 95 05 	call	0xb2a	; 0xb2a <strnlen>
 8a2:	4c 01       	movw	r8, r24
 8a4:	82 01       	movw	r16, r4
 8a6:	f3 2d       	mov	r31, r3
 8a8:	ff 77       	andi	r31, 0x7F	; 127
 8aa:	3f 2e       	mov	r3, r31
 8ac:	16 c0       	rjmp	.+44     	; 0x8da <__DATA_REGION_LENGTH__+0xda>
 8ae:	28 01       	movw	r4, r16
 8b0:	22 e0       	ldi	r18, 0x02	; 2
 8b2:	42 0e       	add	r4, r18
 8b4:	51 1c       	adc	r5, r1
 8b6:	f8 01       	movw	r30, r16
 8b8:	a0 80       	ld	r10, Z
 8ba:	b1 80       	ldd	r11, Z+1	; 0x01
 8bc:	36 fe       	sbrs	r3, 6
 8be:	03 c0       	rjmp	.+6      	; 0x8c6 <__DATA_REGION_LENGTH__+0xc6>
 8c0:	69 2d       	mov	r22, r9
 8c2:	70 e0       	ldi	r23, 0x00	; 0
 8c4:	02 c0       	rjmp	.+4      	; 0x8ca <__DATA_REGION_LENGTH__+0xca>
 8c6:	6f ef       	ldi	r22, 0xFF	; 255
 8c8:	7f ef       	ldi	r23, 0xFF	; 255
 8ca:	c5 01       	movw	r24, r10
 8cc:	0e 94 8a 05 	call	0xb14	; 0xb14 <strnlen_P>
 8d0:	4c 01       	movw	r8, r24
 8d2:	f3 2d       	mov	r31, r3
 8d4:	f0 68       	ori	r31, 0x80	; 128
 8d6:	3f 2e       	mov	r3, r31
 8d8:	82 01       	movw	r16, r4
 8da:	33 fc       	sbrc	r3, 3
 8dc:	1b c0       	rjmp	.+54     	; 0x914 <__stack+0x15>
 8de:	82 2d       	mov	r24, r2
 8e0:	90 e0       	ldi	r25, 0x00	; 0
 8e2:	88 16       	cp	r8, r24
 8e4:	99 06       	cpc	r9, r25
 8e6:	b0 f4       	brcc	.+44     	; 0x914 <__stack+0x15>
 8e8:	b6 01       	movw	r22, r12
 8ea:	80 e2       	ldi	r24, 0x20	; 32
 8ec:	90 e0       	ldi	r25, 0x00	; 0
 8ee:	0e 94 a0 05 	call	0xb40	; 0xb40 <fputc>
 8f2:	2a 94       	dec	r2
 8f4:	f4 cf       	rjmp	.-24     	; 0x8de <__DATA_REGION_LENGTH__+0xde>
 8f6:	f5 01       	movw	r30, r10
 8f8:	37 fc       	sbrc	r3, 7
 8fa:	85 91       	lpm	r24, Z+
 8fc:	37 fe       	sbrs	r3, 7
 8fe:	81 91       	ld	r24, Z+
 900:	5f 01       	movw	r10, r30
 902:	b6 01       	movw	r22, r12
 904:	90 e0       	ldi	r25, 0x00	; 0
 906:	0e 94 a0 05 	call	0xb40	; 0xb40 <fputc>
 90a:	21 10       	cpse	r2, r1
 90c:	2a 94       	dec	r2
 90e:	21 e0       	ldi	r18, 0x01	; 1
 910:	82 1a       	sub	r8, r18
 912:	91 08       	sbc	r9, r1
 914:	81 14       	cp	r8, r1
 916:	91 04       	cpc	r9, r1
 918:	71 f7       	brne	.-36     	; 0x8f6 <__DATA_REGION_LENGTH__+0xf6>
 91a:	e8 c0       	rjmp	.+464    	; 0xaec <__stack+0x1ed>
 91c:	84 36       	cpi	r24, 0x64	; 100
 91e:	11 f0       	breq	.+4      	; 0x924 <__stack+0x25>
 920:	89 36       	cpi	r24, 0x69	; 105
 922:	41 f5       	brne	.+80     	; 0x974 <__stack+0x75>
 924:	f8 01       	movw	r30, r16
 926:	37 fe       	sbrs	r3, 7
 928:	07 c0       	rjmp	.+14     	; 0x938 <__stack+0x39>
 92a:	60 81       	ld	r22, Z
 92c:	71 81       	ldd	r23, Z+1	; 0x01
 92e:	82 81       	ldd	r24, Z+2	; 0x02
 930:	93 81       	ldd	r25, Z+3	; 0x03
 932:	0c 5f       	subi	r16, 0xFC	; 252
 934:	1f 4f       	sbci	r17, 0xFF	; 255
 936:	08 c0       	rjmp	.+16     	; 0x948 <__stack+0x49>
 938:	60 81       	ld	r22, Z
 93a:	71 81       	ldd	r23, Z+1	; 0x01
 93c:	07 2e       	mov	r0, r23
 93e:	00 0c       	add	r0, r0
 940:	88 0b       	sbc	r24, r24
 942:	99 0b       	sbc	r25, r25
 944:	0e 5f       	subi	r16, 0xFE	; 254
 946:	1f 4f       	sbci	r17, 0xFF	; 255
 948:	f3 2d       	mov	r31, r3
 94a:	ff 76       	andi	r31, 0x6F	; 111
 94c:	3f 2e       	mov	r3, r31
 94e:	97 ff       	sbrs	r25, 7
 950:	09 c0       	rjmp	.+18     	; 0x964 <__stack+0x65>
 952:	90 95       	com	r25
 954:	80 95       	com	r24
 956:	70 95       	com	r23
 958:	61 95       	neg	r22
 95a:	7f 4f       	sbci	r23, 0xFF	; 255
 95c:	8f 4f       	sbci	r24, 0xFF	; 255
 95e:	9f 4f       	sbci	r25, 0xFF	; 255
 960:	f0 68       	ori	r31, 0x80	; 128
 962:	3f 2e       	mov	r3, r31
 964:	2a e0       	ldi	r18, 0x0A	; 10
 966:	30 e0       	ldi	r19, 0x00	; 0
 968:	a3 01       	movw	r20, r6
 96a:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <__ultoa_invert>
 96e:	88 2e       	mov	r8, r24
 970:	86 18       	sub	r8, r6
 972:	45 c0       	rjmp	.+138    	; 0x9fe <__stack+0xff>
 974:	85 37       	cpi	r24, 0x75	; 117
 976:	31 f4       	brne	.+12     	; 0x984 <__stack+0x85>
 978:	23 2d       	mov	r18, r3
 97a:	2f 7e       	andi	r18, 0xEF	; 239
 97c:	b2 2e       	mov	r11, r18
 97e:	2a e0       	ldi	r18, 0x0A	; 10
 980:	30 e0       	ldi	r19, 0x00	; 0
 982:	25 c0       	rjmp	.+74     	; 0x9ce <__stack+0xcf>
 984:	93 2d       	mov	r25, r3
 986:	99 7f       	andi	r25, 0xF9	; 249
 988:	b9 2e       	mov	r11, r25
 98a:	8f 36       	cpi	r24, 0x6F	; 111
 98c:	c1 f0       	breq	.+48     	; 0x9be <__stack+0xbf>
 98e:	18 f4       	brcc	.+6      	; 0x996 <__stack+0x97>
 990:	88 35       	cpi	r24, 0x58	; 88
 992:	79 f0       	breq	.+30     	; 0x9b2 <__stack+0xb3>
 994:	b5 c0       	rjmp	.+362    	; 0xb00 <__stack+0x201>
 996:	80 37       	cpi	r24, 0x70	; 112
 998:	19 f0       	breq	.+6      	; 0x9a0 <__stack+0xa1>
 99a:	88 37       	cpi	r24, 0x78	; 120
 99c:	21 f0       	breq	.+8      	; 0x9a6 <__stack+0xa7>
 99e:	b0 c0       	rjmp	.+352    	; 0xb00 <__stack+0x201>
 9a0:	e9 2f       	mov	r30, r25
 9a2:	e0 61       	ori	r30, 0x10	; 16
 9a4:	be 2e       	mov	r11, r30
 9a6:	b4 fe       	sbrs	r11, 4
 9a8:	0d c0       	rjmp	.+26     	; 0x9c4 <__stack+0xc5>
 9aa:	fb 2d       	mov	r31, r11
 9ac:	f4 60       	ori	r31, 0x04	; 4
 9ae:	bf 2e       	mov	r11, r31
 9b0:	09 c0       	rjmp	.+18     	; 0x9c4 <__stack+0xc5>
 9b2:	34 fe       	sbrs	r3, 4
 9b4:	0a c0       	rjmp	.+20     	; 0x9ca <__stack+0xcb>
 9b6:	29 2f       	mov	r18, r25
 9b8:	26 60       	ori	r18, 0x06	; 6
 9ba:	b2 2e       	mov	r11, r18
 9bc:	06 c0       	rjmp	.+12     	; 0x9ca <__stack+0xcb>
 9be:	28 e0       	ldi	r18, 0x08	; 8
 9c0:	30 e0       	ldi	r19, 0x00	; 0
 9c2:	05 c0       	rjmp	.+10     	; 0x9ce <__stack+0xcf>
 9c4:	20 e1       	ldi	r18, 0x10	; 16
 9c6:	30 e0       	ldi	r19, 0x00	; 0
 9c8:	02 c0       	rjmp	.+4      	; 0x9ce <__stack+0xcf>
 9ca:	20 e1       	ldi	r18, 0x10	; 16
 9cc:	32 e0       	ldi	r19, 0x02	; 2
 9ce:	f8 01       	movw	r30, r16
 9d0:	b7 fe       	sbrs	r11, 7
 9d2:	07 c0       	rjmp	.+14     	; 0x9e2 <__stack+0xe3>
 9d4:	60 81       	ld	r22, Z
 9d6:	71 81       	ldd	r23, Z+1	; 0x01
 9d8:	82 81       	ldd	r24, Z+2	; 0x02
 9da:	93 81       	ldd	r25, Z+3	; 0x03
 9dc:	0c 5f       	subi	r16, 0xFC	; 252
 9de:	1f 4f       	sbci	r17, 0xFF	; 255
 9e0:	06 c0       	rjmp	.+12     	; 0x9ee <__stack+0xef>
 9e2:	60 81       	ld	r22, Z
 9e4:	71 81       	ldd	r23, Z+1	; 0x01
 9e6:	80 e0       	ldi	r24, 0x00	; 0
 9e8:	90 e0       	ldi	r25, 0x00	; 0
 9ea:	0e 5f       	subi	r16, 0xFE	; 254
 9ec:	1f 4f       	sbci	r17, 0xFF	; 255
 9ee:	a3 01       	movw	r20, r6
 9f0:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <__ultoa_invert>
 9f4:	88 2e       	mov	r8, r24
 9f6:	86 18       	sub	r8, r6
 9f8:	fb 2d       	mov	r31, r11
 9fa:	ff 77       	andi	r31, 0x7F	; 127
 9fc:	3f 2e       	mov	r3, r31
 9fe:	36 fe       	sbrs	r3, 6
 a00:	0d c0       	rjmp	.+26     	; 0xa1c <__stack+0x11d>
 a02:	23 2d       	mov	r18, r3
 a04:	2e 7f       	andi	r18, 0xFE	; 254
 a06:	a2 2e       	mov	r10, r18
 a08:	89 14       	cp	r8, r9
 a0a:	58 f4       	brcc	.+22     	; 0xa22 <__stack+0x123>
 a0c:	34 fe       	sbrs	r3, 4
 a0e:	0b c0       	rjmp	.+22     	; 0xa26 <__stack+0x127>
 a10:	32 fc       	sbrc	r3, 2
 a12:	09 c0       	rjmp	.+18     	; 0xa26 <__stack+0x127>
 a14:	83 2d       	mov	r24, r3
 a16:	8e 7e       	andi	r24, 0xEE	; 238
 a18:	a8 2e       	mov	r10, r24
 a1a:	05 c0       	rjmp	.+10     	; 0xa26 <__stack+0x127>
 a1c:	b8 2c       	mov	r11, r8
 a1e:	a3 2c       	mov	r10, r3
 a20:	03 c0       	rjmp	.+6      	; 0xa28 <__stack+0x129>
 a22:	b8 2c       	mov	r11, r8
 a24:	01 c0       	rjmp	.+2      	; 0xa28 <__stack+0x129>
 a26:	b9 2c       	mov	r11, r9
 a28:	a4 fe       	sbrs	r10, 4
 a2a:	0f c0       	rjmp	.+30     	; 0xa4a <__stack+0x14b>
 a2c:	fe 01       	movw	r30, r28
 a2e:	e8 0d       	add	r30, r8
 a30:	f1 1d       	adc	r31, r1
 a32:	80 81       	ld	r24, Z
 a34:	80 33       	cpi	r24, 0x30	; 48
 a36:	21 f4       	brne	.+8      	; 0xa40 <__stack+0x141>
 a38:	9a 2d       	mov	r25, r10
 a3a:	99 7e       	andi	r25, 0xE9	; 233
 a3c:	a9 2e       	mov	r10, r25
 a3e:	09 c0       	rjmp	.+18     	; 0xa52 <__stack+0x153>
 a40:	a2 fe       	sbrs	r10, 2
 a42:	06 c0       	rjmp	.+12     	; 0xa50 <__stack+0x151>
 a44:	b3 94       	inc	r11
 a46:	b3 94       	inc	r11
 a48:	04 c0       	rjmp	.+8      	; 0xa52 <__stack+0x153>
 a4a:	8a 2d       	mov	r24, r10
 a4c:	86 78       	andi	r24, 0x86	; 134
 a4e:	09 f0       	breq	.+2      	; 0xa52 <__stack+0x153>
 a50:	b3 94       	inc	r11
 a52:	a3 fc       	sbrc	r10, 3
 a54:	11 c0       	rjmp	.+34     	; 0xa78 <__stack+0x179>
 a56:	a0 fe       	sbrs	r10, 0
 a58:	06 c0       	rjmp	.+12     	; 0xa66 <__stack+0x167>
 a5a:	b2 14       	cp	r11, r2
 a5c:	88 f4       	brcc	.+34     	; 0xa80 <__stack+0x181>
 a5e:	28 0c       	add	r2, r8
 a60:	92 2c       	mov	r9, r2
 a62:	9b 18       	sub	r9, r11
 a64:	0e c0       	rjmp	.+28     	; 0xa82 <__stack+0x183>
 a66:	b2 14       	cp	r11, r2
 a68:	60 f4       	brcc	.+24     	; 0xa82 <__stack+0x183>
 a6a:	b6 01       	movw	r22, r12
 a6c:	80 e2       	ldi	r24, 0x20	; 32
 a6e:	90 e0       	ldi	r25, 0x00	; 0
 a70:	0e 94 a0 05 	call	0xb40	; 0xb40 <fputc>
 a74:	b3 94       	inc	r11
 a76:	f7 cf       	rjmp	.-18     	; 0xa66 <__stack+0x167>
 a78:	b2 14       	cp	r11, r2
 a7a:	18 f4       	brcc	.+6      	; 0xa82 <__stack+0x183>
 a7c:	2b 18       	sub	r2, r11
 a7e:	02 c0       	rjmp	.+4      	; 0xa84 <__stack+0x185>
 a80:	98 2c       	mov	r9, r8
 a82:	21 2c       	mov	r2, r1
 a84:	a4 fe       	sbrs	r10, 4
 a86:	10 c0       	rjmp	.+32     	; 0xaa8 <__stack+0x1a9>
 a88:	b6 01       	movw	r22, r12
 a8a:	80 e3       	ldi	r24, 0x30	; 48
 a8c:	90 e0       	ldi	r25, 0x00	; 0
 a8e:	0e 94 a0 05 	call	0xb40	; 0xb40 <fputc>
 a92:	a2 fe       	sbrs	r10, 2
 a94:	17 c0       	rjmp	.+46     	; 0xac4 <__stack+0x1c5>
 a96:	a1 fc       	sbrc	r10, 1
 a98:	03 c0       	rjmp	.+6      	; 0xaa0 <__stack+0x1a1>
 a9a:	88 e7       	ldi	r24, 0x78	; 120
 a9c:	90 e0       	ldi	r25, 0x00	; 0
 a9e:	02 c0       	rjmp	.+4      	; 0xaa4 <__stack+0x1a5>
 aa0:	88 e5       	ldi	r24, 0x58	; 88
 aa2:	90 e0       	ldi	r25, 0x00	; 0
 aa4:	b6 01       	movw	r22, r12
 aa6:	0c c0       	rjmp	.+24     	; 0xac0 <__stack+0x1c1>
 aa8:	8a 2d       	mov	r24, r10
 aaa:	86 78       	andi	r24, 0x86	; 134
 aac:	59 f0       	breq	.+22     	; 0xac4 <__stack+0x1c5>
 aae:	a1 fe       	sbrs	r10, 1
 ab0:	02 c0       	rjmp	.+4      	; 0xab6 <__stack+0x1b7>
 ab2:	8b e2       	ldi	r24, 0x2B	; 43
 ab4:	01 c0       	rjmp	.+2      	; 0xab8 <__stack+0x1b9>
 ab6:	80 e2       	ldi	r24, 0x20	; 32
 ab8:	a7 fc       	sbrc	r10, 7
 aba:	8d e2       	ldi	r24, 0x2D	; 45
 abc:	b6 01       	movw	r22, r12
 abe:	90 e0       	ldi	r25, 0x00	; 0
 ac0:	0e 94 a0 05 	call	0xb40	; 0xb40 <fputc>
 ac4:	89 14       	cp	r8, r9
 ac6:	38 f4       	brcc	.+14     	; 0xad6 <__stack+0x1d7>
 ac8:	b6 01       	movw	r22, r12
 aca:	80 e3       	ldi	r24, 0x30	; 48
 acc:	90 e0       	ldi	r25, 0x00	; 0
 ace:	0e 94 a0 05 	call	0xb40	; 0xb40 <fputc>
 ad2:	9a 94       	dec	r9
 ad4:	f7 cf       	rjmp	.-18     	; 0xac4 <__stack+0x1c5>
 ad6:	8a 94       	dec	r8
 ad8:	f3 01       	movw	r30, r6
 ada:	e8 0d       	add	r30, r8
 adc:	f1 1d       	adc	r31, r1
 ade:	80 81       	ld	r24, Z
 ae0:	b6 01       	movw	r22, r12
 ae2:	90 e0       	ldi	r25, 0x00	; 0
 ae4:	0e 94 a0 05 	call	0xb40	; 0xb40 <fputc>
 ae8:	81 10       	cpse	r8, r1
 aea:	f5 cf       	rjmp	.-22     	; 0xad6 <__stack+0x1d7>
 aec:	22 20       	and	r2, r2
 aee:	09 f4       	brne	.+2      	; 0xaf2 <__stack+0x1f3>
 af0:	42 ce       	rjmp	.-892    	; 0x776 <vfprintf+0x24>
 af2:	b6 01       	movw	r22, r12
 af4:	80 e2       	ldi	r24, 0x20	; 32
 af6:	90 e0       	ldi	r25, 0x00	; 0
 af8:	0e 94 a0 05 	call	0xb40	; 0xb40 <fputc>
 afc:	2a 94       	dec	r2
 afe:	f6 cf       	rjmp	.-20     	; 0xaec <__stack+0x1ed>
 b00:	f6 01       	movw	r30, r12
 b02:	86 81       	ldd	r24, Z+6	; 0x06
 b04:	97 81       	ldd	r25, Z+7	; 0x07
 b06:	02 c0       	rjmp	.+4      	; 0xb0c <__stack+0x20d>
 b08:	8f ef       	ldi	r24, 0xFF	; 255
 b0a:	9f ef       	ldi	r25, 0xFF	; 255
 b0c:	2b 96       	adiw	r28, 0x0b	; 11
 b0e:	e2 e1       	ldi	r30, 0x12	; 18
 b10:	0c 94 56 06 	jmp	0xcac	; 0xcac <__epilogue_restores__>

00000b14 <strnlen_P>:
 b14:	fc 01       	movw	r30, r24
 b16:	05 90       	lpm	r0, Z+
 b18:	61 50       	subi	r22, 0x01	; 1
 b1a:	70 40       	sbci	r23, 0x00	; 0
 b1c:	01 10       	cpse	r0, r1
 b1e:	d8 f7       	brcc	.-10     	; 0xb16 <strnlen_P+0x2>
 b20:	80 95       	com	r24
 b22:	90 95       	com	r25
 b24:	8e 0f       	add	r24, r30
 b26:	9f 1f       	adc	r25, r31
 b28:	08 95       	ret

00000b2a <strnlen>:
 b2a:	fc 01       	movw	r30, r24
 b2c:	61 50       	subi	r22, 0x01	; 1
 b2e:	70 40       	sbci	r23, 0x00	; 0
 b30:	01 90       	ld	r0, Z+
 b32:	01 10       	cpse	r0, r1
 b34:	d8 f7       	brcc	.-10     	; 0xb2c <strnlen+0x2>
 b36:	80 95       	com	r24
 b38:	90 95       	com	r25
 b3a:	8e 0f       	add	r24, r30
 b3c:	9f 1f       	adc	r25, r31
 b3e:	08 95       	ret

00000b40 <fputc>:
 b40:	0f 93       	push	r16
 b42:	1f 93       	push	r17
 b44:	cf 93       	push	r28
 b46:	df 93       	push	r29
 b48:	fb 01       	movw	r30, r22
 b4a:	23 81       	ldd	r18, Z+3	; 0x03
 b4c:	21 fd       	sbrc	r18, 1
 b4e:	03 c0       	rjmp	.+6      	; 0xb56 <fputc+0x16>
 b50:	8f ef       	ldi	r24, 0xFF	; 255
 b52:	9f ef       	ldi	r25, 0xFF	; 255
 b54:	2c c0       	rjmp	.+88     	; 0xbae <fputc+0x6e>
 b56:	22 ff       	sbrs	r18, 2
 b58:	16 c0       	rjmp	.+44     	; 0xb86 <fputc+0x46>
 b5a:	46 81       	ldd	r20, Z+6	; 0x06
 b5c:	57 81       	ldd	r21, Z+7	; 0x07
 b5e:	24 81       	ldd	r18, Z+4	; 0x04
 b60:	35 81       	ldd	r19, Z+5	; 0x05
 b62:	42 17       	cp	r20, r18
 b64:	53 07       	cpc	r21, r19
 b66:	44 f4       	brge	.+16     	; 0xb78 <fputc+0x38>
 b68:	a0 81       	ld	r26, Z
 b6a:	b1 81       	ldd	r27, Z+1	; 0x01
 b6c:	9d 01       	movw	r18, r26
 b6e:	2f 5f       	subi	r18, 0xFF	; 255
 b70:	3f 4f       	sbci	r19, 0xFF	; 255
 b72:	31 83       	std	Z+1, r19	; 0x01
 b74:	20 83       	st	Z, r18
 b76:	8c 93       	st	X, r24
 b78:	26 81       	ldd	r18, Z+6	; 0x06
 b7a:	37 81       	ldd	r19, Z+7	; 0x07
 b7c:	2f 5f       	subi	r18, 0xFF	; 255
 b7e:	3f 4f       	sbci	r19, 0xFF	; 255
 b80:	37 83       	std	Z+7, r19	; 0x07
 b82:	26 83       	std	Z+6, r18	; 0x06
 b84:	14 c0       	rjmp	.+40     	; 0xbae <fputc+0x6e>
 b86:	8b 01       	movw	r16, r22
 b88:	ec 01       	movw	r28, r24
 b8a:	fb 01       	movw	r30, r22
 b8c:	00 84       	ldd	r0, Z+8	; 0x08
 b8e:	f1 85       	ldd	r31, Z+9	; 0x09
 b90:	e0 2d       	mov	r30, r0
 b92:	09 95       	icall
 b94:	89 2b       	or	r24, r25
 b96:	e1 f6       	brne	.-72     	; 0xb50 <fputc+0x10>
 b98:	d8 01       	movw	r26, r16
 b9a:	16 96       	adiw	r26, 0x06	; 6
 b9c:	8d 91       	ld	r24, X+
 b9e:	9c 91       	ld	r25, X
 ba0:	17 97       	sbiw	r26, 0x07	; 7
 ba2:	01 96       	adiw	r24, 0x01	; 1
 ba4:	17 96       	adiw	r26, 0x07	; 7
 ba6:	9c 93       	st	X, r25
 ba8:	8e 93       	st	-X, r24
 baa:	16 97       	sbiw	r26, 0x06	; 6
 bac:	ce 01       	movw	r24, r28
 bae:	df 91       	pop	r29
 bb0:	cf 91       	pop	r28
 bb2:	1f 91       	pop	r17
 bb4:	0f 91       	pop	r16
 bb6:	08 95       	ret

00000bb8 <__ultoa_invert>:
 bb8:	fa 01       	movw	r30, r20
 bba:	aa 27       	eor	r26, r26
 bbc:	28 30       	cpi	r18, 0x08	; 8
 bbe:	51 f1       	breq	.+84     	; 0xc14 <__ultoa_invert+0x5c>
 bc0:	20 31       	cpi	r18, 0x10	; 16
 bc2:	81 f1       	breq	.+96     	; 0xc24 <__ultoa_invert+0x6c>
 bc4:	e8 94       	clt
 bc6:	6f 93       	push	r22
 bc8:	6e 7f       	andi	r22, 0xFE	; 254
 bca:	6e 5f       	subi	r22, 0xFE	; 254
 bcc:	7f 4f       	sbci	r23, 0xFF	; 255
 bce:	8f 4f       	sbci	r24, 0xFF	; 255
 bd0:	9f 4f       	sbci	r25, 0xFF	; 255
 bd2:	af 4f       	sbci	r26, 0xFF	; 255
 bd4:	b1 e0       	ldi	r27, 0x01	; 1
 bd6:	3e d0       	rcall	.+124    	; 0xc54 <__ultoa_invert+0x9c>
 bd8:	b4 e0       	ldi	r27, 0x04	; 4
 bda:	3c d0       	rcall	.+120    	; 0xc54 <__ultoa_invert+0x9c>
 bdc:	67 0f       	add	r22, r23
 bde:	78 1f       	adc	r23, r24
 be0:	89 1f       	adc	r24, r25
 be2:	9a 1f       	adc	r25, r26
 be4:	a1 1d       	adc	r26, r1
 be6:	68 0f       	add	r22, r24
 be8:	79 1f       	adc	r23, r25
 bea:	8a 1f       	adc	r24, r26
 bec:	91 1d       	adc	r25, r1
 bee:	a1 1d       	adc	r26, r1
 bf0:	6a 0f       	add	r22, r26
 bf2:	71 1d       	adc	r23, r1
 bf4:	81 1d       	adc	r24, r1
 bf6:	91 1d       	adc	r25, r1
 bf8:	a1 1d       	adc	r26, r1
 bfa:	20 d0       	rcall	.+64     	; 0xc3c <__ultoa_invert+0x84>
 bfc:	09 f4       	brne	.+2      	; 0xc00 <__ultoa_invert+0x48>
 bfe:	68 94       	set
 c00:	3f 91       	pop	r19
 c02:	2a e0       	ldi	r18, 0x0A	; 10
 c04:	26 9f       	mul	r18, r22
 c06:	11 24       	eor	r1, r1
 c08:	30 19       	sub	r19, r0
 c0a:	30 5d       	subi	r19, 0xD0	; 208
 c0c:	31 93       	st	Z+, r19
 c0e:	de f6       	brtc	.-74     	; 0xbc6 <__ultoa_invert+0xe>
 c10:	cf 01       	movw	r24, r30
 c12:	08 95       	ret
 c14:	46 2f       	mov	r20, r22
 c16:	47 70       	andi	r20, 0x07	; 7
 c18:	40 5d       	subi	r20, 0xD0	; 208
 c1a:	41 93       	st	Z+, r20
 c1c:	b3 e0       	ldi	r27, 0x03	; 3
 c1e:	0f d0       	rcall	.+30     	; 0xc3e <__ultoa_invert+0x86>
 c20:	c9 f7       	brne	.-14     	; 0xc14 <__ultoa_invert+0x5c>
 c22:	f6 cf       	rjmp	.-20     	; 0xc10 <__ultoa_invert+0x58>
 c24:	46 2f       	mov	r20, r22
 c26:	4f 70       	andi	r20, 0x0F	; 15
 c28:	40 5d       	subi	r20, 0xD0	; 208
 c2a:	4a 33       	cpi	r20, 0x3A	; 58
 c2c:	18 f0       	brcs	.+6      	; 0xc34 <__ultoa_invert+0x7c>
 c2e:	49 5d       	subi	r20, 0xD9	; 217
 c30:	31 fd       	sbrc	r19, 1
 c32:	40 52       	subi	r20, 0x20	; 32
 c34:	41 93       	st	Z+, r20
 c36:	02 d0       	rcall	.+4      	; 0xc3c <__ultoa_invert+0x84>
 c38:	a9 f7       	brne	.-22     	; 0xc24 <__ultoa_invert+0x6c>
 c3a:	ea cf       	rjmp	.-44     	; 0xc10 <__ultoa_invert+0x58>
 c3c:	b4 e0       	ldi	r27, 0x04	; 4
 c3e:	a6 95       	lsr	r26
 c40:	97 95       	ror	r25
 c42:	87 95       	ror	r24
 c44:	77 95       	ror	r23
 c46:	67 95       	ror	r22
 c48:	ba 95       	dec	r27
 c4a:	c9 f7       	brne	.-14     	; 0xc3e <__ultoa_invert+0x86>
 c4c:	00 97       	sbiw	r24, 0x00	; 0
 c4e:	61 05       	cpc	r22, r1
 c50:	71 05       	cpc	r23, r1
 c52:	08 95       	ret
 c54:	9b 01       	movw	r18, r22
 c56:	ac 01       	movw	r20, r24
 c58:	0a 2e       	mov	r0, r26
 c5a:	06 94       	lsr	r0
 c5c:	57 95       	ror	r21
 c5e:	47 95       	ror	r20
 c60:	37 95       	ror	r19
 c62:	27 95       	ror	r18
 c64:	ba 95       	dec	r27
 c66:	c9 f7       	brne	.-14     	; 0xc5a <__ultoa_invert+0xa2>
 c68:	62 0f       	add	r22, r18
 c6a:	73 1f       	adc	r23, r19
 c6c:	84 1f       	adc	r24, r20
 c6e:	95 1f       	adc	r25, r21
 c70:	a0 1d       	adc	r26, r0
 c72:	08 95       	ret

00000c74 <__prologue_saves__>:
 c74:	2f 92       	push	r2
 c76:	3f 92       	push	r3
 c78:	4f 92       	push	r4
 c7a:	5f 92       	push	r5
 c7c:	6f 92       	push	r6
 c7e:	7f 92       	push	r7
 c80:	8f 92       	push	r8
 c82:	9f 92       	push	r9
 c84:	af 92       	push	r10
 c86:	bf 92       	push	r11
 c88:	cf 92       	push	r12
 c8a:	df 92       	push	r13
 c8c:	ef 92       	push	r14
 c8e:	ff 92       	push	r15
 c90:	0f 93       	push	r16
 c92:	1f 93       	push	r17
 c94:	cf 93       	push	r28
 c96:	df 93       	push	r29
 c98:	cd b7       	in	r28, 0x3d	; 61
 c9a:	de b7       	in	r29, 0x3e	; 62
 c9c:	ca 1b       	sub	r28, r26
 c9e:	db 0b       	sbc	r29, r27
 ca0:	0f b6       	in	r0, 0x3f	; 63
 ca2:	f8 94       	cli
 ca4:	de bf       	out	0x3e, r29	; 62
 ca6:	0f be       	out	0x3f, r0	; 63
 ca8:	cd bf       	out	0x3d, r28	; 61
 caa:	09 94       	ijmp

00000cac <__epilogue_restores__>:
 cac:	2a 88       	ldd	r2, Y+18	; 0x12
 cae:	39 88       	ldd	r3, Y+17	; 0x11
 cb0:	48 88       	ldd	r4, Y+16	; 0x10
 cb2:	5f 84       	ldd	r5, Y+15	; 0x0f
 cb4:	6e 84       	ldd	r6, Y+14	; 0x0e
 cb6:	7d 84       	ldd	r7, Y+13	; 0x0d
 cb8:	8c 84       	ldd	r8, Y+12	; 0x0c
 cba:	9b 84       	ldd	r9, Y+11	; 0x0b
 cbc:	aa 84       	ldd	r10, Y+10	; 0x0a
 cbe:	b9 84       	ldd	r11, Y+9	; 0x09
 cc0:	c8 84       	ldd	r12, Y+8	; 0x08
 cc2:	df 80       	ldd	r13, Y+7	; 0x07
 cc4:	ee 80       	ldd	r14, Y+6	; 0x06
 cc6:	fd 80       	ldd	r15, Y+5	; 0x05
 cc8:	0c 81       	ldd	r16, Y+4	; 0x04
 cca:	1b 81       	ldd	r17, Y+3	; 0x03
 ccc:	aa 81       	ldd	r26, Y+2	; 0x02
 cce:	b9 81       	ldd	r27, Y+1	; 0x01
 cd0:	ce 0f       	add	r28, r30
 cd2:	d1 1d       	adc	r29, r1
 cd4:	0f b6       	in	r0, 0x3f	; 63
 cd6:	f8 94       	cli
 cd8:	de bf       	out	0x3e, r29	; 62
 cda:	0f be       	out	0x3f, r0	; 63
 cdc:	cd bf       	out	0x3d, r28	; 61
 cde:	ed 01       	movw	r28, r26
 ce0:	08 95       	ret

00000ce2 <_exit>:
 ce2:	f8 94       	cli

00000ce4 <__stop_program>:
 ce4:	ff cf       	rjmp	.-2      	; 0xce4 <__stop_program>
